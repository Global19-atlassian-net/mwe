/*
* generated by Xtext
*/

package org.eclipse.emf.mwe.properties.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class MWEPropertiesGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class PropertyFileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyFile");
		private final Assignment cEntriesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cEntriesNaturalLineParserRuleCall_0 = (RuleCall)cEntriesAssignment.eContents().get(0);
		
		//PropertyFile:
		//  entries+=NaturalLine*;
		public ParserRule getRule() { return rule; }

		//entries+=NaturalLine*
		public Assignment getEntriesAssignment() { return cEntriesAssignment; }

		//NaturalLine
		public RuleCall getEntriesNaturalLineParserRuleCall_0() { return cEntriesNaturalLineParserRuleCall_0; }
	}

	public class NaturalLineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NaturalLine");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBlankLineParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPropertyCommentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPropertyEntryParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//NaturalLine:
		//  BlankLine|PropertyComment|PropertyEntry;
		public ParserRule getRule() { return rule; }

		//BlankLine|PropertyComment|PropertyEntry
		public Alternatives getAlternatives() { return cAlternatives; }

		//BlankLine
		public RuleCall getBlankLineParserRuleCall_0() { return cBlankLineParserRuleCall_0; }

		//PropertyComment
		public RuleCall getPropertyCommentParserRuleCall_1() { return cPropertyCommentParserRuleCall_1; }

		//PropertyEntry
		public RuleCall getPropertyEntryParserRuleCall_2() { return cPropertyEntryParserRuleCall_2; }
	}

	public class BlankLineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BlankLine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBlankLineAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cLINE_TERMINATORTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//BlankLine:
		//  {BlankLine} WS? LINE_TERMINATOR;
		public ParserRule getRule() { return rule; }

		//{BlankLine} WS? LINE_TERMINATOR
		public Group getGroup() { return cGroup; }

		//{BlankLine}
		public Action getBlankLineAction_0() { return cBlankLineAction_0; }

		//WS?
		public RuleCall getWSTerminalRuleCall_1() { return cWSTerminalRuleCall_1; }

		//LINE_TERMINATOR
		public RuleCall getLINE_TERMINATORTerminalRuleCall_2() { return cLINE_TERMINATORTerminalRuleCall_2; }
	}

	public class PropertyCommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyComment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSL_COMMENTTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final RuleCall cLINE_TERMINATORTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//PropertyComment:
		//  WS? value=SL_COMMENT LINE_TERMINATOR;
		public ParserRule getRule() { return rule; }

		//WS? value=SL_COMMENT LINE_TERMINATOR
		public Group getGroup() { return cGroup; }

		//WS?
		public RuleCall getWSTerminalRuleCall_0() { return cWSTerminalRuleCall_0; }

		//value=SL_COMMENT
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//SL_COMMENT
		public RuleCall getValueSL_COMMENTTerminalRuleCall_1_0() { return cValueSL_COMMENTTerminalRuleCall_1_0; }

		//LINE_TERMINATOR
		public RuleCall getLINE_TERMINATORTerminalRuleCall_2() { return cLINE_TERMINATORTerminalRuleCall_2; }
	}

	public class PropertyEntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyEntry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameKeyParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Assignment cDelimiterAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final RuleCall cDelimiterDelimiterParserRuleCall_2_0_0_0 = (RuleCall)cDelimiterAssignment_2_0_0.eContents().get(0);
		private final Assignment cValueAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cValueCompoundStringLeadingDelimiterParserRuleCall_2_0_1_0 = (RuleCall)cValueAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Assignment cDelimiterAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cDelimiterSimpleDelimiterParserRuleCall_2_1_0_0 = (RuleCall)cDelimiterAssignment_2_1_0.eContents().get(0);
		private final Assignment cValueAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cValueCompoundStringParserRuleCall_2_1_1_0 = (RuleCall)cValueAssignment_2_1_1.eContents().get(0);
		
		//PropertyEntry:
		//  WS? name=Key (delimiter=Delimiter value=CompoundStringLeadingDelimiter|delimiter=
		//  SimpleDelimiter value=CompoundString);
		public ParserRule getRule() { return rule; }

		//WS? name=Key (delimiter=Delimiter value=CompoundStringLeadingDelimiter|delimiter=
		//SimpleDelimiter value=CompoundString)
		public Group getGroup() { return cGroup; }

		//WS?
		public RuleCall getWSTerminalRuleCall_0() { return cWSTerminalRuleCall_0; }

		//name=Key
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//Key
		public RuleCall getNameKeyParserRuleCall_1_0() { return cNameKeyParserRuleCall_1_0; }

		//delimiter=Delimiter value=CompoundStringLeadingDelimiter|delimiter=
		//SimpleDelimiter value=CompoundString
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//delimiter=Delimiter value=CompoundStringLeadingDelimiter
		public Group getGroup_2_0() { return cGroup_2_0; }

		//delimiter=Delimiter
		public Assignment getDelimiterAssignment_2_0_0() { return cDelimiterAssignment_2_0_0; }

		//Delimiter
		public RuleCall getDelimiterDelimiterParserRuleCall_2_0_0_0() { return cDelimiterDelimiterParserRuleCall_2_0_0_0; }

		//value=CompoundStringLeadingDelimiter
		public Assignment getValueAssignment_2_0_1() { return cValueAssignment_2_0_1; }

		//CompoundStringLeadingDelimiter
		public RuleCall getValueCompoundStringLeadingDelimiterParserRuleCall_2_0_1_0() { return cValueCompoundStringLeadingDelimiterParserRuleCall_2_0_1_0; }

		//delimiter=SimpleDelimiter value=CompoundString
		public Group getGroup_2_1() { return cGroup_2_1; }

		//delimiter=SimpleDelimiter
		public Assignment getDelimiterAssignment_2_1_0() { return cDelimiterAssignment_2_1_0; }

		//SimpleDelimiter
		public RuleCall getDelimiterSimpleDelimiterParserRuleCall_2_1_0_0() { return cDelimiterSimpleDelimiterParserRuleCall_2_1_0_0; }

		//value=CompoundString
		public Assignment getValueAssignment_2_1_1() { return cValueAssignment_2_1_1; }

		//CompoundString
		public RuleCall getValueCompoundStringParserRuleCall_2_1_1_0() { return cValueCompoundStringParserRuleCall_2_1_1_0; }
	}

	public class DelimiterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Delimiter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cColonKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Delimiter returns ecore::EString:
		//  WS? ("="|":") WS?;
		public ParserRule getRule() { return rule; }

		//WS? ("="|":") WS?
		public Group getGroup() { return cGroup; }

		//WS?
		public RuleCall getWSTerminalRuleCall_0() { return cWSTerminalRuleCall_0; }

		//"="|":"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"="
		public Keyword getEqualsSignKeyword_1_0() { return cEqualsSignKeyword_1_0; }

		//":"
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }

		//WS?
		public RuleCall getWSTerminalRuleCall_2() { return cWSTerminalRuleCall_2; }
	}

	public class SimpleDelimiterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimpleDelimiter");
		private final RuleCall cWSTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//SimpleDelimiter returns ecore::EString:
		//  WS;
		public ParserRule getRule() { return rule; }

		//WS
		public RuleCall getWSTerminalRuleCall() { return cWSTerminalRuleCall; }
	}

	public class CompoundStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompoundString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cCompoundStringAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final RuleCall cLINE_TERMINATORTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cPartsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cPartsCompoundStringPartParserRuleCall_1_0_0 = (RuleCall)cPartsAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cReverseSolidusKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final RuleCall cLINE_TERMINATORTerminalRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_1_1_2 = (RuleCall)cGroup_1_1.eContents().get(2);
		private final Assignment cPartsAssignment_1_1_3 = (Assignment)cGroup_1_1.eContents().get(3);
		private final RuleCall cPartsCompoundStringPartLeadingDelimiterParserRuleCall_1_1_3_0 = (RuleCall)cPartsAssignment_1_1_3.eContents().get(0);
		private final RuleCall cLINE_TERMINATORTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		
		//CompoundString:
		//  {CompoundString} LINE_TERMINATOR|parts+=CompoundStringPart ("\\" LINE_TERMINATOR WS?
		//  parts+=CompoundStringPartLeadingDelimiter)* LINE_TERMINATOR;
		public ParserRule getRule() { return rule; }

		//{CompoundString} LINE_TERMINATOR|parts+=CompoundStringPart ("\\" LINE_TERMINATOR WS?
		//parts+=CompoundStringPartLeadingDelimiter)* LINE_TERMINATOR
		public Alternatives getAlternatives() { return cAlternatives; }

		//{CompoundString} LINE_TERMINATOR
		public Group getGroup_0() { return cGroup_0; }

		//{CompoundString}
		public Action getCompoundStringAction_0_0() { return cCompoundStringAction_0_0; }

		//LINE_TERMINATOR
		public RuleCall getLINE_TERMINATORTerminalRuleCall_0_1() { return cLINE_TERMINATORTerminalRuleCall_0_1; }

		//parts+=CompoundStringPart ("\\" LINE_TERMINATOR WS? parts+=
		//CompoundStringPartLeadingDelimiter)* LINE_TERMINATOR
		public Group getGroup_1() { return cGroup_1; }

		//parts+=CompoundStringPart
		public Assignment getPartsAssignment_1_0() { return cPartsAssignment_1_0; }

		//CompoundStringPart
		public RuleCall getPartsCompoundStringPartParserRuleCall_1_0_0() { return cPartsCompoundStringPartParserRuleCall_1_0_0; }

		//("\\" LINE_TERMINATOR WS? parts+=CompoundStringPartLeadingDelimiter)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"\\"
		public Keyword getReverseSolidusKeyword_1_1_0() { return cReverseSolidusKeyword_1_1_0; }

		//LINE_TERMINATOR
		public RuleCall getLINE_TERMINATORTerminalRuleCall_1_1_1() { return cLINE_TERMINATORTerminalRuleCall_1_1_1; }

		//WS?
		public RuleCall getWSTerminalRuleCall_1_1_2() { return cWSTerminalRuleCall_1_1_2; }

		//parts+=CompoundStringPartLeadingDelimiter
		public Assignment getPartsAssignment_1_1_3() { return cPartsAssignment_1_1_3; }

		//CompoundStringPartLeadingDelimiter
		public RuleCall getPartsCompoundStringPartLeadingDelimiterParserRuleCall_1_1_3_0() { return cPartsCompoundStringPartLeadingDelimiterParserRuleCall_1_1_3_0; }

		//LINE_TERMINATOR
		public RuleCall getLINE_TERMINATORTerminalRuleCall_1_2() { return cLINE_TERMINATORTerminalRuleCall_1_2; }
	}

	public class CompoundStringLeadingDelimiterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompoundStringLeadingDelimiter");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cEmptyPropertyValueAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final RuleCall cLINE_TERMINATORTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cPartsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cPartsCompoundStringPartLeadingDelimiterParserRuleCall_1_0_0 = (RuleCall)cPartsAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cReverseSolidusKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final RuleCall cLINE_TERMINATORTerminalRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_1_1_2 = (RuleCall)cGroup_1_1.eContents().get(2);
		private final Assignment cPartsAssignment_1_1_3 = (Assignment)cGroup_1_1.eContents().get(3);
		private final RuleCall cPartsCompoundStringPartLeadingDelimiterParserRuleCall_1_1_3_0 = (RuleCall)cPartsAssignment_1_1_3.eContents().get(0);
		private final RuleCall cLINE_TERMINATORTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		
		//CompoundStringLeadingDelimiter returns CompoundString:
		//  {EmptyPropertyValue} LINE_TERMINATOR|parts+=CompoundStringPartLeadingDelimiter (
		//  "\\" LINE_TERMINATOR WS? parts+=CompoundStringPartLeadingDelimiter)* LINE_TERMINATOR
		//;
		public ParserRule getRule() { return rule; }

		//{EmptyPropertyValue} LINE_TERMINATOR|parts+=CompoundStringPartLeadingDelimiter (
		//"\\" LINE_TERMINATOR WS? parts+=CompoundStringPartLeadingDelimiter)* LINE_TERMINATOR
		public Alternatives getAlternatives() { return cAlternatives; }

		//{EmptyPropertyValue} LINE_TERMINATOR
		public Group getGroup_0() { return cGroup_0; }

		//{EmptyPropertyValue}
		public Action getEmptyPropertyValueAction_0_0() { return cEmptyPropertyValueAction_0_0; }

		//LINE_TERMINATOR
		public RuleCall getLINE_TERMINATORTerminalRuleCall_0_1() { return cLINE_TERMINATORTerminalRuleCall_0_1; }

		//parts+=CompoundStringPartLeadingDelimiter ("\\" LINE_TERMINATOR WS? parts+=
		//CompoundStringPartLeadingDelimiter)* LINE_TERMINATOR
		public Group getGroup_1() { return cGroup_1; }

		//parts+=CompoundStringPartLeadingDelimiter
		public Assignment getPartsAssignment_1_0() { return cPartsAssignment_1_0; }

		//CompoundStringPartLeadingDelimiter
		public RuleCall getPartsCompoundStringPartLeadingDelimiterParserRuleCall_1_0_0() { return cPartsCompoundStringPartLeadingDelimiterParserRuleCall_1_0_0; }

		//("\\" LINE_TERMINATOR WS? parts+=CompoundStringPartLeadingDelimiter)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"\\"
		public Keyword getReverseSolidusKeyword_1_1_0() { return cReverseSolidusKeyword_1_1_0; }

		//LINE_TERMINATOR
		public RuleCall getLINE_TERMINATORTerminalRuleCall_1_1_1() { return cLINE_TERMINATORTerminalRuleCall_1_1_1; }

		//WS?
		public RuleCall getWSTerminalRuleCall_1_1_2() { return cWSTerminalRuleCall_1_1_2; }

		//parts+=CompoundStringPartLeadingDelimiter
		public Assignment getPartsAssignment_1_1_3() { return cPartsAssignment_1_1_3; }

		//CompoundStringPartLeadingDelimiter
		public RuleCall getPartsCompoundStringPartLeadingDelimiterParserRuleCall_1_1_3_0() { return cPartsCompoundStringPartLeadingDelimiterParserRuleCall_1_1_3_0; }

		//LINE_TERMINATOR
		public RuleCall getLINE_TERMINATORTerminalRuleCall_1_2() { return cLINE_TERMINATORTerminalRuleCall_1_2; }
	}

	public class CompoundStringPartLeadingDelimiterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompoundStringPartLeadingDelimiter");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueCompoundStringPartLeadingDelimiterValueParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//CompoundStringPartLeadingDelimiter returns CompoundStringPart:
		//  value=CompoundStringPartLeadingDelimiterValue;
		public ParserRule getRule() { return rule; }

		//value=CompoundStringPartLeadingDelimiterValue
		public Assignment getValueAssignment() { return cValueAssignment; }

		//CompoundStringPartLeadingDelimiterValue
		public RuleCall getValueCompoundStringPartLeadingDelimiterValueParserRuleCall_0() { return cValueCompoundStringPartLeadingDelimiterValueParserRuleCall_0; }
	}

	public class CompoundStringPartLeadingDelimiterValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompoundStringPartLeadingDelimiterValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNonWSConstantParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cNonWSConstantParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//CompoundStringPartLeadingDelimiterValue returns ecore::EString:
		//  NonWSConstant (WS NonWSConstant?)*;
		public ParserRule getRule() { return rule; }

		//NonWSConstant (WS NonWSConstant?)*
		public Group getGroup() { return cGroup; }

		//NonWSConstant
		public RuleCall getNonWSConstantParserRuleCall_0() { return cNonWSConstantParserRuleCall_0; }

		//(WS NonWSConstant?)*
		public Group getGroup_1() { return cGroup_1; }

		//WS
		public RuleCall getWSTerminalRuleCall_1_0() { return cWSTerminalRuleCall_1_0; }

		//NonWSConstant?
		public RuleCall getNonWSConstantParserRuleCall_1_1() { return cNonWSConstantParserRuleCall_1_1; }
	}

	public class CompoundStringPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompoundStringPart");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueCompoundStringPartValueParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//CompoundStringPart:
		//  value=CompoundStringPartValue;
		public ParserRule getRule() { return rule; }

		//value=CompoundStringPartValue
		public Assignment getValueAssignment() { return cValueAssignment; }

		//CompoundStringPartValue
		public RuleCall getValueCompoundStringPartValueParserRuleCall_0() { return cValueCompoundStringPartValueParserRuleCall_0; }
	}

	public class CompoundStringPartValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompoundStringPartValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cKeyParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cNonWSConstantParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//CompoundStringPartValue returns ecore::EString:
		//  Key (WS NonWSConstant?)*;
		public ParserRule getRule() { return rule; }

		//Key (WS NonWSConstant?)*
		public Group getGroup() { return cGroup; }

		//Key
		public RuleCall getKeyParserRuleCall_0() { return cKeyParserRuleCall_0; }

		//(WS NonWSConstant?)*
		public Group getGroup_1() { return cGroup_1; }

		//WS
		public RuleCall getWSTerminalRuleCall_1_0() { return cWSTerminalRuleCall_1_0; }

		//NonWSConstant?
		public RuleCall getNonWSConstantParserRuleCall_1_1() { return cNonWSConstantParserRuleCall_1_1; }
	}

	public class NonWSConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NonWSConstant");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNonWsNonCommentConstantParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSL_COMMENTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//NonWSConstant returns ecore::EString:
		//  NonWsNonCommentConstant|SL_COMMENT;
		public ParserRule getRule() { return rule; }

		//NonWsNonCommentConstant|SL_COMMENT
		public Alternatives getAlternatives() { return cAlternatives; }

		//NonWsNonCommentConstant
		public RuleCall getNonWsNonCommentConstantParserRuleCall_0() { return cNonWsNonCommentConstantParserRuleCall_0; }

		//SL_COMMENT
		public RuleCall getSL_COMMENTTerminalRuleCall_1() { return cSL_COMMENTTerminalRuleCall_1; }
	}

	public class NonWsNonCommentConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NonWsNonCommentConstant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cKeyParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cColonKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final RuleCall cKeyParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//NonWsNonCommentConstant returns ecore::EString:
		//  Key ((":"|"=") Key?)*;
		public ParserRule getRule() { return rule; }

		//Key ((":"|"=") Key?)*
		public Group getGroup() { return cGroup; }

		//Key
		public RuleCall getKeyParserRuleCall_0() { return cKeyParserRuleCall_0; }

		//((":"|"=") Key?)*
		public Group getGroup_1() { return cGroup_1; }

		//":"|"="
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//":"
		public Keyword getColonKeyword_1_0_0() { return cColonKeyword_1_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1_0_1() { return cEqualsSignKeyword_1_0_1; }

		//Key?
		public RuleCall getKeyParserRuleCall_1_1() { return cKeyParserRuleCall_1_1; }
	}

	public class KeyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Key");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFQNParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cReverseSolidusColonKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cReverseSolidusEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cSolidusKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//Key returns ecore::EString:
		//  (FQN|"\\:"|"\\="|"/")+;
		public ParserRule getRule() { return rule; }

		//(FQN|"\\:"|"\\="|"/")+
		public Alternatives getAlternatives() { return cAlternatives; }

		//FQN
		public RuleCall getFQNParserRuleCall_0() { return cFQNParserRuleCall_0; }

		//"\\:"
		public Keyword getReverseSolidusColonKeyword_1() { return cReverseSolidusColonKeyword_1; }

		//"\\="
		public Keyword getReverseSolidusEqualsSignKeyword_2() { return cReverseSolidusEqualsSignKeyword_2; }

		//"/"
		public Keyword getSolidusKeyword_3() { return cSolidusKeyword_3; }
	}

	public class FQNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FQN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//FQN returns ecore::EString:
		//  ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	
	private PropertyFileElements pPropertyFile;
	private NaturalLineElements pNaturalLine;
	private BlankLineElements pBlankLine;
	private PropertyCommentElements pPropertyComment;
	private PropertyEntryElements pPropertyEntry;
	private DelimiterElements pDelimiter;
	private SimpleDelimiterElements pSimpleDelimiter;
	private CompoundStringElements pCompoundString;
	private CompoundStringLeadingDelimiterElements pCompoundStringLeadingDelimiter;
	private CompoundStringPartLeadingDelimiterElements pCompoundStringPartLeadingDelimiter;
	private CompoundStringPartLeadingDelimiterValueElements pCompoundStringPartLeadingDelimiterValue;
	private CompoundStringPartElements pCompoundStringPart;
	private CompoundStringPartValueElements pCompoundStringPartValue;
	private NonWSConstantElements pNonWSConstant;
	private NonWsNonCommentConstantElements pNonWsNonCommentConstant;
	private KeyElements pKey;
	private FQNElements pFQN;
	private TerminalRule tLINE_TERMINATOR;
	private TerminalRule tID;
	private TerminalRule tSL_COMMENT;
	private TerminalRule tWS;
	private TerminalRule tANY_OTHER;
	
	private final GrammarProvider grammarProvider;

	@Inject
	public MWEPropertiesGrammarAccess(GrammarProvider grammarProvider) {
		this.grammarProvider = grammarProvider;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	
	//PropertyFile:
	//  entries+=NaturalLine*;
	public PropertyFileElements getPropertyFileAccess() {
		return (pPropertyFile != null) ? pPropertyFile : (pPropertyFile = new PropertyFileElements());
	}
	
	public ParserRule getPropertyFileRule() {
		return getPropertyFileAccess().getRule();
	}

	//NaturalLine:
	//  BlankLine|PropertyComment|PropertyEntry;
	public NaturalLineElements getNaturalLineAccess() {
		return (pNaturalLine != null) ? pNaturalLine : (pNaturalLine = new NaturalLineElements());
	}
	
	public ParserRule getNaturalLineRule() {
		return getNaturalLineAccess().getRule();
	}

	//BlankLine:
	//  {BlankLine} WS? LINE_TERMINATOR;
	public BlankLineElements getBlankLineAccess() {
		return (pBlankLine != null) ? pBlankLine : (pBlankLine = new BlankLineElements());
	}
	
	public ParserRule getBlankLineRule() {
		return getBlankLineAccess().getRule();
	}

	//PropertyComment:
	//  WS? value=SL_COMMENT LINE_TERMINATOR;
	public PropertyCommentElements getPropertyCommentAccess() {
		return (pPropertyComment != null) ? pPropertyComment : (pPropertyComment = new PropertyCommentElements());
	}
	
	public ParserRule getPropertyCommentRule() {
		return getPropertyCommentAccess().getRule();
	}

	//PropertyEntry:
	//  WS? name=Key (delimiter=Delimiter value=CompoundStringLeadingDelimiter|delimiter=
	//  SimpleDelimiter value=CompoundString);
	public PropertyEntryElements getPropertyEntryAccess() {
		return (pPropertyEntry != null) ? pPropertyEntry : (pPropertyEntry = new PropertyEntryElements());
	}
	
	public ParserRule getPropertyEntryRule() {
		return getPropertyEntryAccess().getRule();
	}

	//Delimiter returns ecore::EString:
	//  WS? ("="|":") WS?;
	public DelimiterElements getDelimiterAccess() {
		return (pDelimiter != null) ? pDelimiter : (pDelimiter = new DelimiterElements());
	}
	
	public ParserRule getDelimiterRule() {
		return getDelimiterAccess().getRule();
	}

	//SimpleDelimiter returns ecore::EString:
	//  WS;
	public SimpleDelimiterElements getSimpleDelimiterAccess() {
		return (pSimpleDelimiter != null) ? pSimpleDelimiter : (pSimpleDelimiter = new SimpleDelimiterElements());
	}
	
	public ParserRule getSimpleDelimiterRule() {
		return getSimpleDelimiterAccess().getRule();
	}

	//CompoundString:
	//  {CompoundString} LINE_TERMINATOR|parts+=CompoundStringPart ("\\" LINE_TERMINATOR WS?
	//  parts+=CompoundStringPartLeadingDelimiter)* LINE_TERMINATOR;
	public CompoundStringElements getCompoundStringAccess() {
		return (pCompoundString != null) ? pCompoundString : (pCompoundString = new CompoundStringElements());
	}
	
	public ParserRule getCompoundStringRule() {
		return getCompoundStringAccess().getRule();
	}

	//CompoundStringLeadingDelimiter returns CompoundString:
	//  {EmptyPropertyValue} LINE_TERMINATOR|parts+=CompoundStringPartLeadingDelimiter (
	//  "\\" LINE_TERMINATOR WS? parts+=CompoundStringPartLeadingDelimiter)* LINE_TERMINATOR
	//;
	public CompoundStringLeadingDelimiterElements getCompoundStringLeadingDelimiterAccess() {
		return (pCompoundStringLeadingDelimiter != null) ? pCompoundStringLeadingDelimiter : (pCompoundStringLeadingDelimiter = new CompoundStringLeadingDelimiterElements());
	}
	
	public ParserRule getCompoundStringLeadingDelimiterRule() {
		return getCompoundStringLeadingDelimiterAccess().getRule();
	}

	//CompoundStringPartLeadingDelimiter returns CompoundStringPart:
	//  value=CompoundStringPartLeadingDelimiterValue;
	public CompoundStringPartLeadingDelimiterElements getCompoundStringPartLeadingDelimiterAccess() {
		return (pCompoundStringPartLeadingDelimiter != null) ? pCompoundStringPartLeadingDelimiter : (pCompoundStringPartLeadingDelimiter = new CompoundStringPartLeadingDelimiterElements());
	}
	
	public ParserRule getCompoundStringPartLeadingDelimiterRule() {
		return getCompoundStringPartLeadingDelimiterAccess().getRule();
	}

	//CompoundStringPartLeadingDelimiterValue returns ecore::EString:
	//  NonWSConstant (WS NonWSConstant?)*;
	public CompoundStringPartLeadingDelimiterValueElements getCompoundStringPartLeadingDelimiterValueAccess() {
		return (pCompoundStringPartLeadingDelimiterValue != null) ? pCompoundStringPartLeadingDelimiterValue : (pCompoundStringPartLeadingDelimiterValue = new CompoundStringPartLeadingDelimiterValueElements());
	}
	
	public ParserRule getCompoundStringPartLeadingDelimiterValueRule() {
		return getCompoundStringPartLeadingDelimiterValueAccess().getRule();
	}

	//CompoundStringPart:
	//  value=CompoundStringPartValue;
	public CompoundStringPartElements getCompoundStringPartAccess() {
		return (pCompoundStringPart != null) ? pCompoundStringPart : (pCompoundStringPart = new CompoundStringPartElements());
	}
	
	public ParserRule getCompoundStringPartRule() {
		return getCompoundStringPartAccess().getRule();
	}

	//CompoundStringPartValue returns ecore::EString:
	//  Key (WS NonWSConstant?)*;
	public CompoundStringPartValueElements getCompoundStringPartValueAccess() {
		return (pCompoundStringPartValue != null) ? pCompoundStringPartValue : (pCompoundStringPartValue = new CompoundStringPartValueElements());
	}
	
	public ParserRule getCompoundStringPartValueRule() {
		return getCompoundStringPartValueAccess().getRule();
	}

	//NonWSConstant returns ecore::EString:
	//  NonWsNonCommentConstant|SL_COMMENT;
	public NonWSConstantElements getNonWSConstantAccess() {
		return (pNonWSConstant != null) ? pNonWSConstant : (pNonWSConstant = new NonWSConstantElements());
	}
	
	public ParserRule getNonWSConstantRule() {
		return getNonWSConstantAccess().getRule();
	}

	//NonWsNonCommentConstant returns ecore::EString:
	//  Key ((":"|"=") Key?)*;
	public NonWsNonCommentConstantElements getNonWsNonCommentConstantAccess() {
		return (pNonWsNonCommentConstant != null) ? pNonWsNonCommentConstant : (pNonWsNonCommentConstant = new NonWsNonCommentConstantElements());
	}
	
	public ParserRule getNonWsNonCommentConstantRule() {
		return getNonWsNonCommentConstantAccess().getRule();
	}

	//Key returns ecore::EString:
	//  (FQN|"\\:"|"\\="|"/")+;
	public KeyElements getKeyAccess() {
		return (pKey != null) ? pKey : (pKey = new KeyElements());
	}
	
	public ParserRule getKeyRule() {
		return getKeyAccess().getRule();
	}

	//FQN returns ecore::EString:
	//  ID ("." ID)*;
	public FQNElements getFQNAccess() {
		return (pFQN != null) ? pFQN : (pFQN = new FQNElements());
	}
	
	public ParserRule getFQNRule() {
		return getFQNAccess().getRule();
	}

	//terminal LINE_TERMINATOR:
	//  "\r" "\n"? | "\n";
	public TerminalRule getLINE_TERMINATORRule() {
		return (tLINE_TERMINATOR != null) ? tLINE_TERMINATOR : (tLINE_TERMINATOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LINE_TERMINATOR"));
	} 

	//terminal ID:
	//  "^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//terminal SL_COMMENT:
	//  ("#" | "!") !("\n" | "\r")*; 
	// 
	//        
	//
	////terminal EOF        :  "synthetic:EOF";
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	//terminal WS:
	//  (" " | "\t")+; 
	//
	////terminal EOF        :  "synthetic:EOF";
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 

	//terminal ANY_OTHER:
	//  .;
	public TerminalRule getANY_OTHERRule() {
		return (tANY_OTHER != null) ? tANY_OTHER : (tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ANY_OTHER"));
	} 
}
