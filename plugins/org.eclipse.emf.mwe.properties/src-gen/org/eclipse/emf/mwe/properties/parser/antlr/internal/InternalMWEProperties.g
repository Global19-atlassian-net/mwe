/*
* generated by Xtext
*/
grammar InternalMWEProperties;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.eclipse.emf.mwe.properties.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.emf.mwe.properties.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import org.eclipse.emf.mwe.properties.services.MWEPropertiesGrammarAccess;

}

@parser::members {

 	private MWEPropertiesGrammarAccess grammarAccess;
 	
    public InternalMWEPropertiesParser(TokenStream input, IAstFactory factory, MWEPropertiesGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("org/eclipse/emf/mwe/properties/parser/antlr/internal/InternalMWEProperties.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "PropertyFile";	
   	} 
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRulePropertyFile
entryRulePropertyFile returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPropertyFileRule(), currentNode); }
	 iv_rulePropertyFile=rulePropertyFile 
	 { $current=$iv_rulePropertyFile.current; } 
	 EOF 
;

// Rule PropertyFile
rulePropertyFile returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPropertyFileAccess().getEntriesNaturalLineParserRuleCall_0(), currentNode); 
	    }
		lv_entries_0_0=ruleNaturalLine		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPropertyFileRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"entries",
	        		lv_entries_0_0, 
	        		"NaturalLine", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*
;





// Entry rule entryRuleNaturalLine
entryRuleNaturalLine returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNaturalLineRule(), currentNode); }
	 iv_ruleNaturalLine=ruleNaturalLine 
	 { $current=$iv_ruleNaturalLine.current; } 
	 EOF 
;

// Rule NaturalLine
ruleNaturalLine returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getNaturalLineAccess().getBlankLineParserRuleCall_0(), currentNode); 
    }
    this_BlankLine_0=ruleBlankLine
    { 
        $current = $this_BlankLine_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getNaturalLineAccess().getPropertyCommentParserRuleCall_1(), currentNode); 
    }
    this_PropertyComment_1=rulePropertyComment
    { 
        $current = $this_PropertyComment_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getNaturalLineAccess().getPropertyEntryParserRuleCall_2(), currentNode); 
    }
    this_PropertyEntry_2=rulePropertyEntry
    { 
        $current = $this_PropertyEntry_2.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleBlankLine
entryRuleBlankLine returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getBlankLineRule(), currentNode); }
	 iv_ruleBlankLine=ruleBlankLine 
	 { $current=$iv_ruleBlankLine.current; } 
	 EOF 
;

// Rule BlankLine
ruleBlankLine returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getBlankLineAccess().getBlankLineAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getBlankLineAccess().getBlankLineAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(RULE_WS
    { 
    createLeafNode(grammarAccess.getBlankLineAccess().getWSTerminalRuleCall_1(), null); 
    }
)?RULE_LINE_TERMINATOR
    { 
    createLeafNode(grammarAccess.getBlankLineAccess().getLINE_TERMINATORTerminalRuleCall_2(), null); 
    }
)
;





// Entry rule entryRulePropertyComment
entryRulePropertyComment returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPropertyCommentRule(), currentNode); }
	 iv_rulePropertyComment=rulePropertyComment 
	 { $current=$iv_rulePropertyComment.current; } 
	 EOF 
;

// Rule PropertyComment
rulePropertyComment returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((RULE_WS
    { 
    createLeafNode(grammarAccess.getPropertyCommentAccess().getWSTerminalRuleCall_0(), null); 
    }
)?(
(
		lv_value_1_0=RULE_SL_COMMENT
		{
			createLeafNode(grammarAccess.getPropertyCommentAccess().getValueSL_COMMENTTerminalRuleCall_1_0(), "value"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPropertyCommentRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_1_0, 
	        		"SL_COMMENT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)RULE_LINE_TERMINATOR
    { 
    createLeafNode(grammarAccess.getPropertyCommentAccess().getLINE_TERMINATORTerminalRuleCall_2(), null); 
    }
)
;





// Entry rule entryRulePropertyEntry
entryRulePropertyEntry returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPropertyEntryRule(), currentNode); }
	 iv_rulePropertyEntry=rulePropertyEntry 
	 { $current=$iv_rulePropertyEntry.current; } 
	 EOF 
;

// Rule PropertyEntry
rulePropertyEntry returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((RULE_WS
    { 
    createLeafNode(grammarAccess.getPropertyEntryAccess().getWSTerminalRuleCall_0(), null); 
    }
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPropertyEntryAccess().getNameKeyParserRuleCall_1_0(), currentNode); 
	    }
		lv_name_1_0=ruleKey		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPropertyEntryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"Key", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPropertyEntryAccess().getDelimiterDelimiterParserRuleCall_2_0_0_0(), currentNode); 
	    }
		lv_delimiter_2_0=ruleDelimiter		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPropertyEntryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"delimiter",
	        		lv_delimiter_2_0, 
	        		"Delimiter", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPropertyEntryAccess().getValueCompoundStringLeadingDelimiterParserRuleCall_2_0_1_0(), currentNode); 
	    }
		lv_value_3_0=ruleCompoundStringLeadingDelimiter		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPropertyEntryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_3_0, 
	        		"CompoundStringLeadingDelimiter", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPropertyEntryAccess().getDelimiterSimpleDelimiterParserRuleCall_2_1_0_0(), currentNode); 
	    }
		lv_delimiter_4_0=ruleSimpleDelimiter		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPropertyEntryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"delimiter",
	        		lv_delimiter_4_0, 
	        		"SimpleDelimiter", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPropertyEntryAccess().getValueCompoundStringParserRuleCall_2_1_1_0(), currentNode); 
	    }
		lv_value_5_0=ruleCompoundString		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPropertyEntryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_5_0, 
	        		"CompoundString", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))))
;





// Entry rule entryRuleDelimiter
entryRuleDelimiter returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDelimiterRule(), currentNode); } 
	 iv_ruleDelimiter=ruleDelimiter 
	 { $current=$iv_ruleDelimiter.current.getText(); }  
	 EOF 
;

// Rule Delimiter
ruleDelimiter returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
((    this_WS_0=RULE_WS    {
		$current.merge(this_WS_0);
    }

    { 
    createLeafNode(grammarAccess.getDelimiterAccess().getWSTerminalRuleCall_0(), null); 
    }
)?(
	kw='=' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getDelimiterAccess().getEqualsSignKeyword_1_0(), null); 
    }

    |
	kw=':' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getDelimiterAccess().getColonKeyword_1_1(), null); 
    }
)(    this_WS_3=RULE_WS    {
		$current.merge(this_WS_3);
    }

    { 
    createLeafNode(grammarAccess.getDelimiterAccess().getWSTerminalRuleCall_2(), null); 
    }
)?)
    ;





// Entry rule entryRuleSimpleDelimiter
entryRuleSimpleDelimiter returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSimpleDelimiterRule(), currentNode); } 
	 iv_ruleSimpleDelimiter=ruleSimpleDelimiter 
	 { $current=$iv_ruleSimpleDelimiter.current.getText(); }  
	 EOF 
;

// Rule SimpleDelimiter
ruleSimpleDelimiter returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
    this_WS_0=RULE_WS    {
		$current.merge(this_WS_0);
    }

    { 
    createLeafNode(grammarAccess.getSimpleDelimiterAccess().getWSTerminalRuleCall(), null); 
    }

    ;





// Entry rule entryRuleCompoundString
entryRuleCompoundString returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getCompoundStringRule(), currentNode); }
	 iv_ruleCompoundString=ruleCompoundString 
	 { $current=$iv_ruleCompoundString.current; } 
	 EOF 
;

// Rule CompoundString
ruleCompoundString returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((
    { 
        temp=factory.create(grammarAccess.getCompoundStringAccess().getCompoundStringAction_0_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getCompoundStringAccess().getCompoundStringAction_0_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)RULE_LINE_TERMINATOR
    { 
    createLeafNode(grammarAccess.getCompoundStringAccess().getLINE_TERMINATORTerminalRuleCall_0_1(), null); 
    }
)
    |((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCompoundStringAccess().getPartsCompoundStringPartParserRuleCall_1_0_0(), currentNode); 
	    }
		lv_parts_2_0=ruleCompoundStringPart		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCompoundStringRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"parts",
	        		lv_parts_2_0, 
	        		"CompoundStringPart", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'\\' 
    {
        createLeafNode(grammarAccess.getCompoundStringAccess().getReverseSolidusKeyword_1_1_0(), null); 
    }
RULE_LINE_TERMINATOR
    { 
    createLeafNode(grammarAccess.getCompoundStringAccess().getLINE_TERMINATORTerminalRuleCall_1_1_1(), null); 
    }
(RULE_WS
    { 
    createLeafNode(grammarAccess.getCompoundStringAccess().getWSTerminalRuleCall_1_1_2(), null); 
    }
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCompoundStringAccess().getPartsCompoundStringPartLeadingDelimiterParserRuleCall_1_1_3_0(), currentNode); 
	    }
		lv_parts_6_0=ruleCompoundStringPartLeadingDelimiter		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCompoundStringRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"parts",
	        		lv_parts_6_0, 
	        		"CompoundStringPartLeadingDelimiter", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*RULE_LINE_TERMINATOR
    { 
    createLeafNode(grammarAccess.getCompoundStringAccess().getLINE_TERMINATORTerminalRuleCall_1_2(), null); 
    }
))
;





// Entry rule entryRuleCompoundStringLeadingDelimiter
entryRuleCompoundStringLeadingDelimiter returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getCompoundStringLeadingDelimiterRule(), currentNode); }
	 iv_ruleCompoundStringLeadingDelimiter=ruleCompoundStringLeadingDelimiter 
	 { $current=$iv_ruleCompoundStringLeadingDelimiter.current; } 
	 EOF 
;

// Rule CompoundStringLeadingDelimiter
ruleCompoundStringLeadingDelimiter returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((
    { 
        temp=factory.create(grammarAccess.getCompoundStringLeadingDelimiterAccess().getEmptyPropertyValueAction_0_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getCompoundStringLeadingDelimiterAccess().getEmptyPropertyValueAction_0_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)RULE_LINE_TERMINATOR
    { 
    createLeafNode(grammarAccess.getCompoundStringLeadingDelimiterAccess().getLINE_TERMINATORTerminalRuleCall_0_1(), null); 
    }
)
    |((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCompoundStringLeadingDelimiterAccess().getPartsCompoundStringPartLeadingDelimiterParserRuleCall_1_0_0(), currentNode); 
	    }
		lv_parts_2_0=ruleCompoundStringPartLeadingDelimiter		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCompoundStringLeadingDelimiterRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"parts",
	        		lv_parts_2_0, 
	        		"CompoundStringPartLeadingDelimiter", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'\\' 
    {
        createLeafNode(grammarAccess.getCompoundStringLeadingDelimiterAccess().getReverseSolidusKeyword_1_1_0(), null); 
    }
RULE_LINE_TERMINATOR
    { 
    createLeafNode(grammarAccess.getCompoundStringLeadingDelimiterAccess().getLINE_TERMINATORTerminalRuleCall_1_1_1(), null); 
    }
(RULE_WS
    { 
    createLeafNode(grammarAccess.getCompoundStringLeadingDelimiterAccess().getWSTerminalRuleCall_1_1_2(), null); 
    }
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCompoundStringLeadingDelimiterAccess().getPartsCompoundStringPartLeadingDelimiterParserRuleCall_1_1_3_0(), currentNode); 
	    }
		lv_parts_6_0=ruleCompoundStringPartLeadingDelimiter		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCompoundStringLeadingDelimiterRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"parts",
	        		lv_parts_6_0, 
	        		"CompoundStringPartLeadingDelimiter", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*RULE_LINE_TERMINATOR
    { 
    createLeafNode(grammarAccess.getCompoundStringLeadingDelimiterAccess().getLINE_TERMINATORTerminalRuleCall_1_2(), null); 
    }
))
;





// Entry rule entryRuleCompoundStringPartLeadingDelimiter
entryRuleCompoundStringPartLeadingDelimiter returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getCompoundStringPartLeadingDelimiterRule(), currentNode); }
	 iv_ruleCompoundStringPartLeadingDelimiter=ruleCompoundStringPartLeadingDelimiter 
	 { $current=$iv_ruleCompoundStringPartLeadingDelimiter.current; } 
	 EOF 
;

// Rule CompoundStringPartLeadingDelimiter
ruleCompoundStringPartLeadingDelimiter returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCompoundStringPartLeadingDelimiterAccess().getValueCompoundStringPartLeadingDelimiterValueParserRuleCall_0(), currentNode); 
	    }
		lv_value_0_0=ruleCompoundStringPartLeadingDelimiterValue		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCompoundStringPartLeadingDelimiterRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_0_0, 
	        		"CompoundStringPartLeadingDelimiterValue", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
;





// Entry rule entryRuleCompoundStringPartLeadingDelimiterValue
entryRuleCompoundStringPartLeadingDelimiterValue returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getCompoundStringPartLeadingDelimiterValueRule(), currentNode); } 
	 iv_ruleCompoundStringPartLeadingDelimiterValue=ruleCompoundStringPartLeadingDelimiterValue 
	 { $current=$iv_ruleCompoundStringPartLeadingDelimiterValue.current.getText(); }  
	 EOF 
;

// Rule CompoundStringPartLeadingDelimiterValue
ruleCompoundStringPartLeadingDelimiterValue returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getCompoundStringPartLeadingDelimiterValueAccess().getNonWSConstantParserRuleCall_0(), currentNode); 
    }
    this_NonWSConstant_0=ruleNonWSConstant    {
		$current.merge(this_NonWSConstant_0);
    }

    { 
        currentNode = currentNode.getParent();
    }
(    this_WS_1=RULE_WS    {
		$current.merge(this_WS_1);
    }

    { 
    createLeafNode(grammarAccess.getCompoundStringPartLeadingDelimiterValueAccess().getWSTerminalRuleCall_1_0(), null); 
    }
(
    { 
        currentNode=createCompositeNode(grammarAccess.getCompoundStringPartLeadingDelimiterValueAccess().getNonWSConstantParserRuleCall_1_1(), currentNode); 
    }
    this_NonWSConstant_2=ruleNonWSConstant    {
		$current.merge(this_NonWSConstant_2);
    }

    { 
        currentNode = currentNode.getParent();
    }
)?)*)
    ;





// Entry rule entryRuleCompoundStringPart
entryRuleCompoundStringPart returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getCompoundStringPartRule(), currentNode); }
	 iv_ruleCompoundStringPart=ruleCompoundStringPart 
	 { $current=$iv_ruleCompoundStringPart.current; } 
	 EOF 
;

// Rule CompoundStringPart
ruleCompoundStringPart returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCompoundStringPartAccess().getValueCompoundStringPartValueParserRuleCall_0(), currentNode); 
	    }
		lv_value_0_0=ruleCompoundStringPartValue		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCompoundStringPartRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_0_0, 
	        		"CompoundStringPartValue", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
;





// Entry rule entryRuleCompoundStringPartValue
entryRuleCompoundStringPartValue returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getCompoundStringPartValueRule(), currentNode); } 
	 iv_ruleCompoundStringPartValue=ruleCompoundStringPartValue 
	 { $current=$iv_ruleCompoundStringPartValue.current.getText(); }  
	 EOF 
;

// Rule CompoundStringPartValue
ruleCompoundStringPartValue returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getCompoundStringPartValueAccess().getKeyParserRuleCall_0(), currentNode); 
    }
    this_Key_0=ruleKey    {
		$current.merge(this_Key_0);
    }

    { 
        currentNode = currentNode.getParent();
    }
(    this_WS_1=RULE_WS    {
		$current.merge(this_WS_1);
    }

    { 
    createLeafNode(grammarAccess.getCompoundStringPartValueAccess().getWSTerminalRuleCall_1_0(), null); 
    }
(
    { 
        currentNode=createCompositeNode(grammarAccess.getCompoundStringPartValueAccess().getNonWSConstantParserRuleCall_1_1(), currentNode); 
    }
    this_NonWSConstant_2=ruleNonWSConstant    {
		$current.merge(this_NonWSConstant_2);
    }

    { 
        currentNode = currentNode.getParent();
    }
)?)*)
    ;





// Entry rule entryRuleNonWSConstant
entryRuleNonWSConstant returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNonWSConstantRule(), currentNode); } 
	 iv_ruleNonWSConstant=ruleNonWSConstant 
	 { $current=$iv_ruleNonWSConstant.current.getText(); }  
	 EOF 
;

// Rule NonWSConstant
ruleNonWSConstant returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getNonWSConstantAccess().getNonWsNonCommentConstantParserRuleCall_0(), currentNode); 
    }
    this_NonWsNonCommentConstant_0=ruleNonWsNonCommentConstant    {
		$current.merge(this_NonWsNonCommentConstant_0);
    }

    { 
        currentNode = currentNode.getParent();
    }

    |    this_SL_COMMENT_1=RULE_SL_COMMENT    {
		$current.merge(this_SL_COMMENT_1);
    }

    { 
    createLeafNode(grammarAccess.getNonWSConstantAccess().getSL_COMMENTTerminalRuleCall_1(), null); 
    }
)
    ;





// Entry rule entryRuleNonWsNonCommentConstant
entryRuleNonWsNonCommentConstant returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNonWsNonCommentConstantRule(), currentNode); } 
	 iv_ruleNonWsNonCommentConstant=ruleNonWsNonCommentConstant 
	 { $current=$iv_ruleNonWsNonCommentConstant.current.getText(); }  
	 EOF 
;

// Rule NonWsNonCommentConstant
ruleNonWsNonCommentConstant returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getNonWsNonCommentConstantAccess().getKeyParserRuleCall_0(), currentNode); 
    }
    this_Key_0=ruleKey    {
		$current.merge(this_Key_0);
    }

    { 
        currentNode = currentNode.getParent();
    }
((
	kw=':' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getNonWsNonCommentConstantAccess().getColonKeyword_1_0_0(), null); 
    }

    |
	kw='=' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getNonWsNonCommentConstantAccess().getEqualsSignKeyword_1_0_1(), null); 
    }
)(
    { 
        currentNode=createCompositeNode(grammarAccess.getNonWsNonCommentConstantAccess().getKeyParserRuleCall_1_1(), currentNode); 
    }
    this_Key_3=ruleKey    {
		$current.merge(this_Key_3);
    }

    { 
        currentNode = currentNode.getParent();
    }
)?)*)
    ;





// Entry rule entryRuleKey
entryRuleKey returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getKeyRule(), currentNode); } 
	 iv_ruleKey=ruleKey 
	 { $current=$iv_ruleKey.current.getText(); }  
	 EOF 
;

// Rule Key
ruleKey returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getKeyAccess().getFQNParserRuleCall_0(), currentNode); 
    }
    this_FQN_0=ruleFQN    {
		$current.merge(this_FQN_0);
    }

    { 
        currentNode = currentNode.getParent();
    }

    |
	kw='\\:' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getKeyAccess().getReverseSolidusColonKeyword_1(), null); 
    }

    |
	kw='\\=' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getKeyAccess().getReverseSolidusEqualsSignKeyword_2(), null); 
    }

    |
	kw='/' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getKeyAccess().getSolidusKeyword_3(), null); 
    }
)+
    ;





// Entry rule entryRuleFQN
entryRuleFQN returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getFQNRule(), currentNode); } 
	 iv_ruleFQN=ruleFQN 
	 { $current=$iv_ruleFQN.current.getText(); }  
	 EOF 
;

// Rule FQN
ruleFQN returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    createLeafNode(grammarAccess.getFQNAccess().getIDTerminalRuleCall_0(), null); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getFQNAccess().getFullStopKeyword_1_0(), null); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    createLeafNode(grammarAccess.getFQNAccess().getIDTerminalRuleCall_1_1(), null); 
    }
)*)
    ;





RULE_LINE_TERMINATOR : ('\r' '\n'?|'\n');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_SL_COMMENT : ('#'|'!') ~(('\n'|'\r'))*;

RULE_WS : (' '|'\t')+;

RULE_ANY_OTHER : .;


