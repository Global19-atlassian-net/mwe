/*
* generated by Xtext
*/

package org.eclipse.emf.mwe.concept.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class MWEConceptGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class MWEFileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MWEFile");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMWEFileAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cImportsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportsImportParserRuleCall_1_0 = (RuleCall)cImportsAssignment_1.eContents().get(0);
		private final Assignment cRootAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRootComponentWithTypeParserRuleCall_2_0 = (RuleCall)cRootAssignment_2.eContents().get(0);
		
		//MWEFile:
		//  {MWEFile} imports+=Import* root=ComponentWithType;
		public ParserRule getRule() { return rule; }

		//{MWEFile} imports+=Import* root=ComponentWithType
		public Group getGroup() { return cGroup; }

		//{MWEFile}
		public Action getMWEFileAction_0() { return cMWEFileAction_0; }

		//imports+=Import*
		public Assignment getImportsAssignment_1() { return cImportsAssignment_1; }

		//Import
		public RuleCall getImportsImportParserRuleCall_1_0() { return cImportsImportParserRuleCall_1_0; }

		//root=ComponentWithType
		public Assignment getRootAssignment_2() { return cRootAssignment_2; }

		//ComponentWithType
		public RuleCall getRootComponentWithTypeParserRuleCall_2_0() { return cRootComponentWithTypeParserRuleCall_2_0; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceImportedFQNParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Import:
		//  "import" importedNamespace=ImportedFQN ";";
		public ParserRule getRule() { return rule; }

		//"import" importedNamespace=ImportedFQN ";"
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importedNamespace=ImportedFQN
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }

		//ImportedFQN
		public RuleCall getImportedNamespaceImportedFQNParserRuleCall_1_0() { return cImportedNamespaceImportedFQNParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class ImportedFQNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImportedFQN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFQNParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ImportedFQN returns ecore::EString:
		//  FQN ".*"?;
		public ParserRule getRule() { return rule; }

		//FQN ".*"?
		public Group getGroup() { return cGroup; }

		//FQN
		public RuleCall getFQNParserRuleCall_0() { return cFQNParserRuleCall_0; }

		//".*"?
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}

	public class SettingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Setting");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFeatureAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cFeatureOperationCrossReference_0_0 = (CrossReference)cFeatureAssignment_0.eContents().get(0);
		private final RuleCall cFeatureOperationValidIDParserRuleCall_0_0_1 = (RuleCall)cFeatureOperationCrossReference_0_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cValueAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cValueAttributeListParserRuleCall_1_0_1_0 = (RuleCall)cValueAssignment_1_0_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cValueComponentParserRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		
		//Setting:
		//  feature=[types::Operation|ValidID] ("=" value=AttributeList|value=Component);
		public ParserRule getRule() { return rule; }

		//feature=[types::Operation|ValidID] ("=" value=AttributeList|value=Component)
		public Group getGroup() { return cGroup; }

		//feature=[types::Operation|ValidID]
		public Assignment getFeatureAssignment_0() { return cFeatureAssignment_0; }

		//[types::Operation|ValidID]
		public CrossReference getFeatureOperationCrossReference_0_0() { return cFeatureOperationCrossReference_0_0; }

		//ValidID
		public RuleCall getFeatureOperationValidIDParserRuleCall_0_0_1() { return cFeatureOperationValidIDParserRuleCall_0_0_1; }

		//"=" value=AttributeList|value=Component
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"=" value=AttributeList
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_1_0_0() { return cEqualsSignKeyword_1_0_0; }

		//value=AttributeList
		public Assignment getValueAssignment_1_0_1() { return cValueAssignment_1_0_1; }

		//AttributeList
		public RuleCall getValueAttributeListParserRuleCall_1_0_1_0() { return cValueAttributeListParserRuleCall_1_0_1_0; }

		//value=Component
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }

		//Component
		public RuleCall getValueComponentParserRuleCall_1_1_0() { return cValueComponentParserRuleCall_1_1_0; }
	}

	public class ComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Component");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cComponentAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final CrossReference cTypeTypeCrossReference_1_0_0 = (CrossReference)cTypeAssignment_1_0.eContents().get(0);
		private final RuleCall cTypeTypeFQNParserRuleCall_1_0_0_1 = (RuleCall)cTypeTypeCrossReference_1_0_0.eContents().get(1);
		private final Assignment cFileRefAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cFileRefFileRefParserRuleCall_1_1_0 = (RuleCall)cFileRefAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cAsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_2_1_0 = (RuleCall)cNameAssignment_2_1.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Keyword cSemicolonKeyword_3_0 = (Keyword)cAlternatives_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cElementsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cElementsConfigurationElementParserRuleCall_3_1_1_0 = (RuleCall)cElementsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_1_2 = (Keyword)cGroup_3_1.eContents().get(2);
		
		//Component:
		//  {Component} (type=[types::Type|FQN]|fileRef=FileRef)? ("as" name=ValidID)? (";"|"{"
		//  elements+=ConfigurationElement* "}");
		public ParserRule getRule() { return rule; }

		//{Component} (type=[types::Type|FQN]|fileRef=FileRef)? ("as" name=ValidID)? (";"|"{"
		//elements+=ConfigurationElement* "}")
		public Group getGroup() { return cGroup; }

		//{Component}
		public Action getComponentAction_0() { return cComponentAction_0; }

		//(type=[types::Type|FQN]|fileRef=FileRef)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//type=[types::Type|FQN]
		public Assignment getTypeAssignment_1_0() { return cTypeAssignment_1_0; }

		//[types::Type|FQN]
		public CrossReference getTypeTypeCrossReference_1_0_0() { return cTypeTypeCrossReference_1_0_0; }

		//FQN
		public RuleCall getTypeTypeFQNParserRuleCall_1_0_0_1() { return cTypeTypeFQNParserRuleCall_1_0_0_1; }

		//fileRef=FileRef
		public Assignment getFileRefAssignment_1_1() { return cFileRefAssignment_1_1; }

		//FileRef
		public RuleCall getFileRefFileRefParserRuleCall_1_1_0() { return cFileRefFileRefParserRuleCall_1_1_0; }

		//("as" name=ValidID)?
		public Group getGroup_2() { return cGroup_2; }

		//"as"
		public Keyword getAsKeyword_2_0() { return cAsKeyword_2_0; }

		//name=ValidID
		public Assignment getNameAssignment_2_1() { return cNameAssignment_2_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_1_0() { return cNameValidIDParserRuleCall_2_1_0; }

		//";"|"{" elements+=ConfigurationElement* "}"
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//";"
		public Keyword getSemicolonKeyword_3_0() { return cSemicolonKeyword_3_0; }

		//"{" elements+=ConfigurationElement* "}"
		public Group getGroup_3_1() { return cGroup_3_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_1_0() { return cLeftCurlyBracketKeyword_3_1_0; }

		//elements+=ConfigurationElement*
		public Assignment getElementsAssignment_3_1_1() { return cElementsAssignment_3_1_1; }

		//ConfigurationElement
		public RuleCall getElementsConfigurationElementParserRuleCall_3_1_1_0() { return cElementsConfigurationElementParserRuleCall_3_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_1_2() { return cRightCurlyBracketKeyword_3_1_2; }
	}

	public class ComponentWithTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComponentWithType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypeTypeCrossReference_0_0 = (CrossReference)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypeTypeFQNParserRuleCall_0_0_1 = (RuleCall)cTypeTypeCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAsKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cElementsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cElementsConfigurationElementParserRuleCall_2_1_1_0 = (RuleCall)cElementsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		//ComponentWithType returns Component:
		//  type=[types::Type|FQN] ("as" name=ValidID)? (";"|"{" elements+=ConfigurationElement*
		//  "}");
		public ParserRule getRule() { return rule; }

		//type=[types::Type|FQN] ("as" name=ValidID)? (";"|"{" elements+=ConfigurationElement*
		//"}")
		public Group getGroup() { return cGroup; }

		//type=[types::Type|FQN]
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//[types::Type|FQN]
		public CrossReference getTypeTypeCrossReference_0_0() { return cTypeTypeCrossReference_0_0; }

		//FQN
		public RuleCall getTypeTypeFQNParserRuleCall_0_0_1() { return cTypeTypeFQNParserRuleCall_0_0_1; }

		//("as" name=ValidID)?
		public Group getGroup_1() { return cGroup_1; }

		//"as"
		public Keyword getAsKeyword_1_0() { return cAsKeyword_1_0; }

		//name=ValidID
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_1_0() { return cNameValidIDParserRuleCall_1_1_0; }

		//";"|"{" elements+=ConfigurationElement* "}"
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//";"
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }

		//"{" elements+=ConfigurationElement* "}"
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_1_0() { return cLeftCurlyBracketKeyword_2_1_0; }

		//elements+=ConfigurationElement*
		public Assignment getElementsAssignment_2_1_1() { return cElementsAssignment_2_1_1; }

		//ConfigurationElement
		public RuleCall getElementsConfigurationElementParserRuleCall_2_1_1_0() { return cElementsConfigurationElementParserRuleCall_2_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_1_2() { return cRightCurlyBracketKeyword_2_1_2; }
	}

	public class ConfigurationElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConfigurationElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSettingParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPropertyParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ConfigurationElement:
		//  Setting|Property;
		public ParserRule getRule() { return rule; }

		//Setting|Property
		public Alternatives getAlternatives() { return cAlternatives; }

		//Setting
		public RuleCall getSettingParserRuleCall_0() { return cSettingParserRuleCall_0; }

		//Property
		public RuleCall getPropertyParserRuleCall_1() { return cPropertyParserRuleCall_1; }
	}

	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cComponentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAttributeListParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAttributeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Literal:
		//  Component|AttributeList|Attribute;
		public ParserRule getRule() { return rule; }

		//Component|AttributeList|Attribute
		public Alternatives getAlternatives() { return cAlternatives; }

		//Component
		public RuleCall getComponentParserRuleCall_0() { return cComponentParserRuleCall_0; }

		//AttributeList
		public RuleCall getAttributeListParserRuleCall_1() { return cAttributeListParserRuleCall_1; }

		//Attribute
		public RuleCall getAttributeParserRuleCall_2() { return cAttributeParserRuleCall_2; }
	}

	public class AttributeListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeList");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cSimpleAttributeParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Action cAttributeListContentAction_0_1_0 = (Action)cGroup_0_1.eContents().get(0);
		private final Group cGroup_0_1_1 = (Group)cGroup_0_1.eContents().get(1);
		private final Keyword cCommaKeyword_0_1_1_0 = (Keyword)cGroup_0_1_1.eContents().get(0);
		private final Assignment cContentAssignment_0_1_1_1 = (Assignment)cGroup_0_1_1.eContents().get(1);
		private final RuleCall cContentSimpleAttributeParserRuleCall_0_1_1_1_0 = (RuleCall)cContentAssignment_0_1_1_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cReferenceParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Action cAttributeListContentAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_1_0 = (Keyword)cGroup_1_1_1.eContents().get(0);
		private final Assignment cContentAssignment_1_1_1_1 = (Assignment)cGroup_1_1_1.eContents().get(1);
		private final RuleCall cContentReferenceParserRuleCall_1_1_1_1_0 = (RuleCall)cContentAssignment_1_1_1_1.eContents().get(0);
		
		//AttributeList returns Literal:
		//  SimpleAttribute ({AttributeList.content+=current} ("," content+=SimpleAttribute)+)?
		//  |Reference ({AttributeList.content+=current} ("," content+=Reference)+)?;
		public ParserRule getRule() { return rule; }

		//SimpleAttribute ({AttributeList.content+=current} ("," content+=SimpleAttribute)+)?
		//|Reference ({AttributeList.content+=current} ("," content+=Reference)+)?
		public Alternatives getAlternatives() { return cAlternatives; }

		//SimpleAttribute ({AttributeList.content+=current} ("," content+=SimpleAttribute)+)?
		public Group getGroup_0() { return cGroup_0; }

		//SimpleAttribute
		public RuleCall getSimpleAttributeParserRuleCall_0_0() { return cSimpleAttributeParserRuleCall_0_0; }

		//({AttributeList.content+=current} ("," content+=SimpleAttribute)+)?
		public Group getGroup_0_1() { return cGroup_0_1; }

		//{AttributeList.content+=current}
		public Action getAttributeListContentAction_0_1_0() { return cAttributeListContentAction_0_1_0; }

		//("," content+=SimpleAttribute)+
		public Group getGroup_0_1_1() { return cGroup_0_1_1; }

		//","
		public Keyword getCommaKeyword_0_1_1_0() { return cCommaKeyword_0_1_1_0; }

		//content+=SimpleAttribute
		public Assignment getContentAssignment_0_1_1_1() { return cContentAssignment_0_1_1_1; }

		//SimpleAttribute
		public RuleCall getContentSimpleAttributeParserRuleCall_0_1_1_1_0() { return cContentSimpleAttributeParserRuleCall_0_1_1_1_0; }

		//Reference ({AttributeList.content+=current} ("," content+=Reference)+)?
		public Group getGroup_1() { return cGroup_1; }

		//Reference
		public RuleCall getReferenceParserRuleCall_1_0() { return cReferenceParserRuleCall_1_0; }

		//({AttributeList.content+=current} ("," content+=Reference)+)?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//{AttributeList.content+=current}
		public Action getAttributeListContentAction_1_1_0() { return cAttributeListContentAction_1_1_0; }

		//("," content+=Reference)+
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_1_0() { return cCommaKeyword_1_1_1_0; }

		//content+=Reference
		public Assignment getContentAssignment_1_1_1_1() { return cContentAssignment_1_1_1_1; }

		//Reference
		public RuleCall getContentReferenceParserRuleCall_1_1_1_1_0() { return cContentReferenceParserRuleCall_1_1_1_1_0; }
	}

	public class PropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Property");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimplePropertyParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPropertyFileParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Property:
		//  SimpleProperty|PropertyFile;
		public ParserRule getRule() { return rule; }

		//SimpleProperty|PropertyFile
		public Alternatives getAlternatives() { return cAlternatives; }

		//SimpleProperty
		public RuleCall getSimplePropertyParserRuleCall_0() { return cSimplePropertyParserRuleCall_0; }

		//PropertyFile
		public RuleCall getPropertyFileParserRuleCall_1() { return cPropertyFileParserRuleCall_1; }
	}

	public class PropertyEntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyEntry");
		private final RuleCall cSimplePropertyParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//PropertyEntry returns properties::PropertyEntry:
		//  SimpleProperty;
		public ParserRule getRule() { return rule; }

		//SimpleProperty
		public RuleCall getSimplePropertyParserRuleCall() { return cSimplePropertyParserRuleCall; }
	}

	public class SimplePropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimpleProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPropertyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameFQNParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDelimiterAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cDelimiterEqualsSignKeyword_2_0 = (Keyword)cDelimiterAssignment_2.eContents().get(0);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueMWEStringParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//SimpleProperty returns Property:
		//  "property" name=FQN delimiter="=" value=MWEString;
		public ParserRule getRule() { return rule; }

		//"property" name=FQN delimiter="=" value=MWEString
		public Group getGroup() { return cGroup; }

		//"property"
		public Keyword getPropertyKeyword_0() { return cPropertyKeyword_0; }

		//name=FQN
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//FQN
		public RuleCall getNameFQNParserRuleCall_1_0() { return cNameFQNParserRuleCall_1_0; }

		//delimiter="="
		public Assignment getDelimiterAssignment_2() { return cDelimiterAssignment_2; }

		//"="
		public Keyword getDelimiterEqualsSignKeyword_2_0() { return cDelimiterEqualsSignKeyword_2_0; }

		//value=MWEString
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//MWEString
		public RuleCall getValueMWEStringParserRuleCall_3_0() { return cValueMWEStringParserRuleCall_3_0; }
	}

	public class PropertyFileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyFile");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPropertyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFileRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFileRefFileRefParserRuleCall_1_0 = (RuleCall)cFileRefAssignment_1.eContents().get(0);
		
		//PropertyFile:
		//  "property" fileRef=FileRef;
		public ParserRule getRule() { return rule; }

		//"property" fileRef=FileRef
		public Group getGroup() { return cGroup; }

		//"property"
		public Keyword getPropertyKeyword_0() { return cPropertyKeyword_0; }

		//fileRef=FileRef
		public Assignment getFileRefAssignment_1() { return cFileRefAssignment_1; }

		//FileRef
		public RuleCall getFileRefFileRefParserRuleCall_1_0() { return cFileRefFileRefParserRuleCall_1_0; }
	}

	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Attribute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimpleAttributeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Attribute:
		//  SimpleAttribute|Reference;
		public ParserRule getRule() { return rule; }

		//SimpleAttribute|Reference
		public Alternatives getAlternatives() { return cAlternatives; }

		//SimpleAttribute
		public RuleCall getSimpleAttributeParserRuleCall_0() { return cSimpleAttributeParserRuleCall_0; }

		//Reference
		public RuleCall getReferenceParserRuleCall_1() { return cReferenceParserRuleCall_1; }
	}

	public class SimpleAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimpleAttribute");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueMWEStringParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//SimpleAttribute:
		//  value=MWEString;
		public ParserRule getRule() { return rule; }

		//value=MWEString
		public Assignment getValueAssignment() { return cValueAssignment; }

		//MWEString
		public RuleCall getValueMWEStringParserRuleCall_0() { return cValueMWEStringParserRuleCall_0; }
	}

	public class ReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Reference");
		private final Assignment cComponentAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cComponentComponentCrossReference_0 = (CrossReference)cComponentAssignment.eContents().get(0);
		private final RuleCall cComponentComponentIDTerminalRuleCall_0_1 = (RuleCall)cComponentComponentCrossReference_0.eContents().get(1);
		
		//Reference:
		//  component=[Component];
		public ParserRule getRule() { return rule; }

		//component=[Component]
		public Assignment getComponentAssignment() { return cComponentAssignment; }

		//[Component]
		public CrossReference getComponentComponentCrossReference_0() { return cComponentComponentCrossReference_0; }

		//ID
		public RuleCall getComponentComponentIDTerminalRuleCall_0_1() { return cComponentComponentIDTerminalRuleCall_0_1; }
	}

	public class ValidIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValidID");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cPropertyKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cFileKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//ValidID returns ecore::EString:
		//  ID|"property"|"file";
		public ParserRule getRule() { return rule; }

		//ID|"property"|"file"
		public Alternatives getAlternatives() { return cAlternatives; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//"property"
		public Keyword getPropertyKeyword_1() { return cPropertyKeyword_1; }

		//"file"
		public Keyword getFileKeyword_2() { return cFileKeyword_2; }
	}

	public class FQNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FQN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cValidIDParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cValidIDParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//FQN returns ecore::EString:
		//  ValidID ("." ValidID)*;
		public ParserRule getRule() { return rule; }

		//ValidID ("." ValidID)*
		public Group getGroup() { return cGroup; }

		//ValidID
		public RuleCall getValidIDParserRuleCall_0() { return cValidIDParserRuleCall_0; }

		//("." ValidID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ValidID
		public RuleCall getValidIDParserRuleCall_1_1() { return cValidIDParserRuleCall_1_1; }
	}

	public class CompoundStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompoundString");
		private final RuleCall cMWEStringParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//CompoundString returns properties::CompoundString:
		//  MWEString;
		public ParserRule getRule() { return rule; }

		//MWEString
		public RuleCall getMWEStringParserRuleCall() { return cMWEStringParserRuleCall; }
	}

	public class MWEStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MWEString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cPartsAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cPartsBooleanParserRuleCall_0_0 = (RuleCall)cPartsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cBeginAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cBeginSingleQuoteParserRuleCall_1_0_0 = (RuleCall)cBeginAssignment_1_0.eContents().get(0);
		private final Assignment cPartsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPartsMWEStringPartParserRuleCall_1_1_0 = (RuleCall)cPartsAssignment_1_1.eContents().get(0);
		private final Assignment cEndAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cEndSingleQuoteParserRuleCall_1_2_0 = (RuleCall)cEndAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cBeginAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cBeginDoubleQuoteParserRuleCall_2_0_0 = (RuleCall)cBeginAssignment_2_0.eContents().get(0);
		private final Assignment cPartsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPartsMWEStringPartParserRuleCall_2_1_0 = (RuleCall)cPartsAssignment_2_1.eContents().get(0);
		private final Assignment cEndAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cEndDoubleQuoteParserRuleCall_2_2_0 = (RuleCall)cEndAssignment_2_2.eContents().get(0);
		
		//MWEString hidden ( ):
		//  parts+=Boolean|begin=SingleQuote parts+=MWEStringPart* end=SingleQuote|begin=
		//  DoubleQuote parts+=MWEStringPart* end=DoubleQuote;
		public ParserRule getRule() { return rule; }

		//parts+=Boolean|begin=SingleQuote parts+=MWEStringPart* end=SingleQuote|begin=
		//DoubleQuote parts+=MWEStringPart* end=DoubleQuote
		public Alternatives getAlternatives() { return cAlternatives; }

		//parts+=Boolean
		public Assignment getPartsAssignment_0() { return cPartsAssignment_0; }

		//Boolean
		public RuleCall getPartsBooleanParserRuleCall_0_0() { return cPartsBooleanParserRuleCall_0_0; }

		//begin=SingleQuote parts+=MWEStringPart* end=SingleQuote
		public Group getGroup_1() { return cGroup_1; }

		//begin=SingleQuote
		public Assignment getBeginAssignment_1_0() { return cBeginAssignment_1_0; }

		//SingleQuote
		public RuleCall getBeginSingleQuoteParserRuleCall_1_0_0() { return cBeginSingleQuoteParserRuleCall_1_0_0; }

		//parts+=MWEStringPart*
		public Assignment getPartsAssignment_1_1() { return cPartsAssignment_1_1; }

		//MWEStringPart
		public RuleCall getPartsMWEStringPartParserRuleCall_1_1_0() { return cPartsMWEStringPartParserRuleCall_1_1_0; }

		//end=SingleQuote
		public Assignment getEndAssignment_1_2() { return cEndAssignment_1_2; }

		//SingleQuote
		public RuleCall getEndSingleQuoteParserRuleCall_1_2_0() { return cEndSingleQuoteParserRuleCall_1_2_0; }

		//begin=DoubleQuote parts+=MWEStringPart* end=DoubleQuote
		public Group getGroup_2() { return cGroup_2; }

		//begin=DoubleQuote
		public Assignment getBeginAssignment_2_0() { return cBeginAssignment_2_0; }

		//DoubleQuote
		public RuleCall getBeginDoubleQuoteParserRuleCall_2_0_0() { return cBeginDoubleQuoteParserRuleCall_2_0_0; }

		//parts+=MWEStringPart*
		public Assignment getPartsAssignment_2_1() { return cPartsAssignment_2_1; }

		//MWEStringPart
		public RuleCall getPartsMWEStringPartParserRuleCall_2_1_0() { return cPartsMWEStringPartParserRuleCall_2_1_0; }

		//end=DoubleQuote
		public Assignment getEndAssignment_2_2() { return cEndAssignment_2_2; }

		//DoubleQuote
		public RuleCall getEndDoubleQuoteParserRuleCall_2_2_0() { return cEndDoubleQuoteParserRuleCall_2_2_0; }
	}

	public class CompoundStringPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompoundStringPart");
		private final RuleCall cMWEStringPartParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//CompoundStringPart returns properties::CompoundStringPart:
		//  MWEStringPart;
		public ParserRule getRule() { return rule; }

		//MWEStringPart
		public RuleCall getMWEStringPartParserRuleCall() { return cMWEStringPartParserRuleCall; }
	}

	public class MWEStringPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MWEStringPart");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cReplaceableStringParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPlainStringParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//MWEStringPart:
		//  ReplaceableString|PlainString;
		public ParserRule getRule() { return rule; }

		//ReplaceableString|PlainString
		public Alternatives getAlternatives() { return cAlternatives; }

		//ReplaceableString
		public RuleCall getReplaceableStringParserRuleCall_0() { return cReplaceableStringParserRuleCall_0; }

		//PlainString
		public RuleCall getPlainStringParserRuleCall_1() { return cPlainStringParserRuleCall_1; }
	}

	public class BooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Boolean");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBooleanStringPartAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cValueAlternatives_1_0 = (Alternatives)cValueAssignment_1.eContents().get(0);
		private final Keyword cValueTrueKeyword_1_0_0 = (Keyword)cValueAlternatives_1_0.eContents().get(0);
		private final Keyword cValueFalseKeyword_1_0_1 = (Keyword)cValueAlternatives_1_0.eContents().get(1);
		
		//Boolean returns MWEStringPart:
		//  {BooleanStringPart} value=( "true" | "false" );
		public ParserRule getRule() { return rule; }

		//{BooleanStringPart} value=( "true" | "false" )
		public Group getGroup() { return cGroup; }

		//{BooleanStringPart}
		public Action getBooleanStringPartAction_0() { return cBooleanStringPartAction_0; }

		//value=( "true" | "false" )
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//"true"|"false"
		public Alternatives getValueAlternatives_1_0() { return cValueAlternatives_1_0; }

		//"true"
		public Keyword getValueTrueKeyword_1_0_0() { return cValueTrueKeyword_1_0_0; }

		//"false"
		public Keyword getValueFalseKeyword_1_0_1() { return cValueFalseKeyword_1_0_1; }
	}

	public class ReplaceableStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReplaceableString");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDollarSignLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPropertyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPropertyPropertyReferenceParserRuleCall_1_0 = (RuleCall)cPropertyAssignment_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ReplaceableString:
		//  "${" property=PropertyReference "}";
		public ParserRule getRule() { return rule; }

		//"${" property=PropertyReference "}"
		public Group getGroup() { return cGroup; }

		//"${"
		public Keyword getDollarSignLeftCurlyBracketKeyword_0() { return cDollarSignLeftCurlyBracketKeyword_0; }

		//property=PropertyReference
		public Assignment getPropertyAssignment_1() { return cPropertyAssignment_1; }

		//PropertyReference
		public RuleCall getPropertyPropertyReferenceParserRuleCall_1_0() { return cPropertyPropertyReferenceParserRuleCall_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}

	public class PropertyReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyReference");
		private final Assignment cPropertyAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cPropertyPropertyEntryCrossReference_0 = (CrossReference)cPropertyAssignment.eContents().get(0);
		private final RuleCall cPropertyPropertyEntryFQNParserRuleCall_0_1 = (RuleCall)cPropertyPropertyEntryCrossReference_0.eContents().get(1);
		
		//PropertyReference hidden ( WS ):
		//  property=[properties::PropertyEntry|FQN];
		public ParserRule getRule() { return rule; }

		//property=[properties::PropertyEntry|FQN]
		public Assignment getPropertyAssignment() { return cPropertyAssignment; }

		//[properties::PropertyEntry|FQN]
		public CrossReference getPropertyPropertyEntryCrossReference_0() { return cPropertyPropertyEntryCrossReference_0; }

		//FQN
		public RuleCall getPropertyPropertyEntryFQNParserRuleCall_0_1() { return cPropertyPropertyEntryFQNParserRuleCall_0_1; }
	}

	public class PlainStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PlainString");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueConstantValueParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//PlainString:
		//  value=ConstantValue;
		public ParserRule getRule() { return rule; }

		//value=ConstantValue
		public Assignment getValueAssignment() { return cValueAssignment; }

		//ConstantValue
		public RuleCall getValueConstantValueParserRuleCall_0() { return cValueConstantValueParserRuleCall_0; }
	}

	public class FileRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FileRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFilePathAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFilePathMWEStringParserRuleCall_1_0 = (RuleCall)cFilePathAssignment_1.eContents().get(0);
		
		//FileRef hidden ( WS ):
		//  "file" filePath=MWEString;
		public ParserRule getRule() { return rule; }

		//"file" filePath=MWEString
		public Group getGroup() { return cGroup; }

		//"file"
		public Keyword getFileKeyword_0() { return cFileKeyword_0; }

		//filePath=MWEString
		public Assignment getFilePathAssignment_1() { return cFilePathAssignment_1; }

		//MWEString
		public RuleCall getFilePathMWEStringParserRuleCall_1_0() { return cFilePathMWEStringParserRuleCall_1_0; }
	}

	public class ConstantValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstantValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cColonParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cOpeningBraceParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cClosingBraceParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cEscapedDoubleQuoteParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cEscapedSingleQuoteParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cANY_OTHERTerminalRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cEscapedBackslashParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cValidIDParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final Keyword cTrueKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cFalseKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cEqualsSignKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cImportKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final RuleCall cDotParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		
		//ConstantValue returns ecore::EString:
		//  WS|Colon|OpeningBrace|ClosingBrace|EscapedDoubleQuote|EscapedSingleQuote|
		//  ANY_OTHER|EscapedBackslash|ValidID|"true"|"false"|"="|"import"|Dot;
		public ParserRule getRule() { return rule; }

		//WS|Colon|OpeningBrace|ClosingBrace|EscapedDoubleQuote|EscapedSingleQuote|
		//ANY_OTHER|EscapedBackslash|ValidID|"true"|"false"|"="|"import"|Dot
		public Alternatives getAlternatives() { return cAlternatives; }

		//WS
		public RuleCall getWSTerminalRuleCall_0() { return cWSTerminalRuleCall_0; }

		//Colon
		public RuleCall getColonParserRuleCall_1() { return cColonParserRuleCall_1; }

		//OpeningBrace
		public RuleCall getOpeningBraceParserRuleCall_2() { return cOpeningBraceParserRuleCall_2; }

		//ClosingBrace
		public RuleCall getClosingBraceParserRuleCall_3() { return cClosingBraceParserRuleCall_3; }

		//EscapedDoubleQuote
		public RuleCall getEscapedDoubleQuoteParserRuleCall_4() { return cEscapedDoubleQuoteParserRuleCall_4; }

		//EscapedSingleQuote
		public RuleCall getEscapedSingleQuoteParserRuleCall_5() { return cEscapedSingleQuoteParserRuleCall_5; }

		//ANY_OTHER
		public RuleCall getANY_OTHERTerminalRuleCall_6() { return cANY_OTHERTerminalRuleCall_6; }

		//EscapedBackslash
		public RuleCall getEscapedBackslashParserRuleCall_7() { return cEscapedBackslashParserRuleCall_7; }

		//ValidID
		public RuleCall getValidIDParserRuleCall_8() { return cValidIDParserRuleCall_8; }

		//"true"
		public Keyword getTrueKeyword_9() { return cTrueKeyword_9; }

		//"false"
		public Keyword getFalseKeyword_10() { return cFalseKeyword_10; }

		//"="
		public Keyword getEqualsSignKeyword_11() { return cEqualsSignKeyword_11; }

		//"import"
		public Keyword getImportKeyword_12() { return cImportKeyword_12; }

		//Dot
		public RuleCall getDotParserRuleCall_13() { return cDotParserRuleCall_13; }
	}

	public class ColonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Colon");
		private final Keyword cColonKeyword = (Keyword)rule.eContents().get(1);
		
		//Colon returns ecore::EString:
		//  ":";
		public ParserRule getRule() { return rule; }

		//":"
		public Keyword getColonKeyword() { return cColonKeyword; }
	}

	public class DotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Dot");
		private final Keyword cFullStopKeyword = (Keyword)rule.eContents().get(1);
		
		//Dot returns ecore::EString:
		//  ".";
		public ParserRule getRule() { return rule; }

		//"."
		public Keyword getFullStopKeyword() { return cFullStopKeyword; }
	}

	public class SingleQuoteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SingleQuote");
		private final Keyword cApostropheKeyword = (Keyword)rule.eContents().get(1);
		
		//SingleQuote returns ecore::EString:
		//  "\'";
		public ParserRule getRule() { return rule; }

		//"\'"
		public Keyword getApostropheKeyword() { return cApostropheKeyword; }
	}

	public class EscapedSingleQuoteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EscapedSingleQuote");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBackslashParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cSingleQuoteParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EscapedSingleQuote returns ecore::EString hidden ( ):
		//  Backslash SingleQuote;
		public ParserRule getRule() { return rule; }

		//Backslash SingleQuote
		public Group getGroup() { return cGroup; }

		//Backslash
		public RuleCall getBackslashParserRuleCall_0() { return cBackslashParserRuleCall_0; }

		//SingleQuote
		public RuleCall getSingleQuoteParserRuleCall_1() { return cSingleQuoteParserRuleCall_1; }
	}

	public class DoubleQuoteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DoubleQuote");
		private final Keyword cQuotationMarkKeyword = (Keyword)rule.eContents().get(1);
		
		//DoubleQuote returns ecore::EString:
		//  "\"";
		public ParserRule getRule() { return rule; }

		//"\""
		public Keyword getQuotationMarkKeyword() { return cQuotationMarkKeyword; }
	}

	public class EscapedDoubleQuoteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EscapedDoubleQuote");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBackslashParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cDoubleQuoteParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EscapedDoubleQuote returns ecore::EString hidden ( ):
		//  Backslash DoubleQuote;
		public ParserRule getRule() { return rule; }

		//Backslash DoubleQuote
		public Group getGroup() { return cGroup; }

		//Backslash
		public RuleCall getBackslashParserRuleCall_0() { return cBackslashParserRuleCall_0; }

		//DoubleQuote
		public RuleCall getDoubleQuoteParserRuleCall_1() { return cDoubleQuoteParserRuleCall_1; }
	}

	public class BackslashElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Backslash");
		private final Keyword cReverseSolidusKeyword = (Keyword)rule.eContents().get(1);
		
		//Backslash returns ecore::EString:
		//  "\\";
		public ParserRule getRule() { return rule; }

		//"\\"
		public Keyword getReverseSolidusKeyword() { return cReverseSolidusKeyword; }
	}

	public class EscapedBackslashElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EscapedBackslash");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBackslashParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cBackslashParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EscapedBackslash returns ecore::EString hidden ( ):
		//  Backslash Backslash;
		public ParserRule getRule() { return rule; }

		//Backslash Backslash
		public Group getGroup() { return cGroup; }

		//Backslash
		public RuleCall getBackslashParserRuleCall_0() { return cBackslashParserRuleCall_0; }

		//Backslash
		public RuleCall getBackslashParserRuleCall_1() { return cBackslashParserRuleCall_1; }
	}

	public class OpeningBraceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpeningBrace");
		private final Keyword cLeftCurlyBracketKeyword = (Keyword)rule.eContents().get(1);
		
		//OpeningBrace returns ecore::EString:
		//  "{";
		public ParserRule getRule() { return rule; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword() { return cLeftCurlyBracketKeyword; }
	}

	public class ClosingBraceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClosingBrace");
		private final Keyword cRightCurlyBracketKeyword = (Keyword)rule.eContents().get(1);
		
		//ClosingBrace returns ecore::EString:
		//  "}";
		public ParserRule getRule() { return rule; }

		//"}"
		public Keyword getRightCurlyBracketKeyword() { return cRightCurlyBracketKeyword; }
	}
	
	
	private MWEFileElements pMWEFile;
	private ImportElements pImport;
	private ImportedFQNElements pImportedFQN;
	private SettingElements pSetting;
	private ComponentElements pComponent;
	private ComponentWithTypeElements pComponentWithType;
	private ConfigurationElementElements pConfigurationElement;
	private LiteralElements pLiteral;
	private AttributeListElements pAttributeList;
	private PropertyElements pProperty;
	private PropertyEntryElements pPropertyEntry;
	private SimplePropertyElements pSimpleProperty;
	private PropertyFileElements pPropertyFile;
	private AttributeElements pAttribute;
	private SimpleAttributeElements pSimpleAttribute;
	private ReferenceElements pReference;
	private ValidIDElements pValidID;
	private FQNElements pFQN;
	private CompoundStringElements pCompoundString;
	private MWEStringElements pMWEString;
	private CompoundStringPartElements pCompoundStringPart;
	private MWEStringPartElements pMWEStringPart;
	private BooleanElements pBoolean;
	private ReplaceableStringElements pReplaceableString;
	private PropertyReferenceElements pPropertyReference;
	private PlainStringElements pPlainString;
	private FileRefElements pFileRef;
	private ConstantValueElements pConstantValue;
	private ColonElements pColon;
	private DotElements pDot;
	private SingleQuoteElements pSingleQuote;
	private EscapedSingleQuoteElements pEscapedSingleQuote;
	private DoubleQuoteElements pDoubleQuote;
	private EscapedDoubleQuoteElements pEscapedDoubleQuote;
	private BackslashElements pBackslash;
	private EscapedBackslashElements pEscapedBackslash;
	private OpeningBraceElements pOpeningBrace;
	private ClosingBraceElements pClosingBrace;
	private TerminalRule tID;
	private TerminalRule tML_COMMENT;
	private TerminalRule tSL_COMMENT;
	private TerminalRule tWS;
	private TerminalRule tANY_OTHER;
	
	private final GrammarProvider grammarProvider;

	@Inject
	public MWEConceptGrammarAccess(GrammarProvider grammarProvider) {
		this.grammarProvider = grammarProvider;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	
	//MWEFile:
	//  {MWEFile} imports+=Import* root=ComponentWithType;
	public MWEFileElements getMWEFileAccess() {
		return (pMWEFile != null) ? pMWEFile : (pMWEFile = new MWEFileElements());
	}
	
	public ParserRule getMWEFileRule() {
		return getMWEFileAccess().getRule();
	}

	//Import:
	//  "import" importedNamespace=ImportedFQN ";";
	public ImportElements getImportAccess() {
		return (pImport != null) ? pImport : (pImport = new ImportElements());
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//ImportedFQN returns ecore::EString:
	//  FQN ".*"?;
	public ImportedFQNElements getImportedFQNAccess() {
		return (pImportedFQN != null) ? pImportedFQN : (pImportedFQN = new ImportedFQNElements());
	}
	
	public ParserRule getImportedFQNRule() {
		return getImportedFQNAccess().getRule();
	}

	//Setting:
	//  feature=[types::Operation|ValidID] ("=" value=AttributeList|value=Component);
	public SettingElements getSettingAccess() {
		return (pSetting != null) ? pSetting : (pSetting = new SettingElements());
	}
	
	public ParserRule getSettingRule() {
		return getSettingAccess().getRule();
	}

	//Component:
	//  {Component} (type=[types::Type|FQN]|fileRef=FileRef)? ("as" name=ValidID)? (";"|"{"
	//  elements+=ConfigurationElement* "}");
	public ComponentElements getComponentAccess() {
		return (pComponent != null) ? pComponent : (pComponent = new ComponentElements());
	}
	
	public ParserRule getComponentRule() {
		return getComponentAccess().getRule();
	}

	//ComponentWithType returns Component:
	//  type=[types::Type|FQN] ("as" name=ValidID)? (";"|"{" elements+=ConfigurationElement*
	//  "}");
	public ComponentWithTypeElements getComponentWithTypeAccess() {
		return (pComponentWithType != null) ? pComponentWithType : (pComponentWithType = new ComponentWithTypeElements());
	}
	
	public ParserRule getComponentWithTypeRule() {
		return getComponentWithTypeAccess().getRule();
	}

	//ConfigurationElement:
	//  Setting|Property;
	public ConfigurationElementElements getConfigurationElementAccess() {
		return (pConfigurationElement != null) ? pConfigurationElement : (pConfigurationElement = new ConfigurationElementElements());
	}
	
	public ParserRule getConfigurationElementRule() {
		return getConfigurationElementAccess().getRule();
	}

	//Literal:
	//  Component|AttributeList|Attribute;
	public LiteralElements getLiteralAccess() {
		return (pLiteral != null) ? pLiteral : (pLiteral = new LiteralElements());
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}

	//AttributeList returns Literal:
	//  SimpleAttribute ({AttributeList.content+=current} ("," content+=SimpleAttribute)+)?
	//  |Reference ({AttributeList.content+=current} ("," content+=Reference)+)?;
	public AttributeListElements getAttributeListAccess() {
		return (pAttributeList != null) ? pAttributeList : (pAttributeList = new AttributeListElements());
	}
	
	public ParserRule getAttributeListRule() {
		return getAttributeListAccess().getRule();
	}

	//Property:
	//  SimpleProperty|PropertyFile;
	public PropertyElements getPropertyAccess() {
		return (pProperty != null) ? pProperty : (pProperty = new PropertyElements());
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}

	//PropertyEntry returns properties::PropertyEntry:
	//  SimpleProperty;
	public PropertyEntryElements getPropertyEntryAccess() {
		return (pPropertyEntry != null) ? pPropertyEntry : (pPropertyEntry = new PropertyEntryElements());
	}
	
	public ParserRule getPropertyEntryRule() {
		return getPropertyEntryAccess().getRule();
	}

	//SimpleProperty returns Property:
	//  "property" name=FQN delimiter="=" value=MWEString;
	public SimplePropertyElements getSimplePropertyAccess() {
		return (pSimpleProperty != null) ? pSimpleProperty : (pSimpleProperty = new SimplePropertyElements());
	}
	
	public ParserRule getSimplePropertyRule() {
		return getSimplePropertyAccess().getRule();
	}

	//PropertyFile:
	//  "property" fileRef=FileRef;
	public PropertyFileElements getPropertyFileAccess() {
		return (pPropertyFile != null) ? pPropertyFile : (pPropertyFile = new PropertyFileElements());
	}
	
	public ParserRule getPropertyFileRule() {
		return getPropertyFileAccess().getRule();
	}

	//Attribute:
	//  SimpleAttribute|Reference;
	public AttributeElements getAttributeAccess() {
		return (pAttribute != null) ? pAttribute : (pAttribute = new AttributeElements());
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}

	//SimpleAttribute:
	//  value=MWEString;
	public SimpleAttributeElements getSimpleAttributeAccess() {
		return (pSimpleAttribute != null) ? pSimpleAttribute : (pSimpleAttribute = new SimpleAttributeElements());
	}
	
	public ParserRule getSimpleAttributeRule() {
		return getSimpleAttributeAccess().getRule();
	}

	//Reference:
	//  component=[Component];
	public ReferenceElements getReferenceAccess() {
		return (pReference != null) ? pReference : (pReference = new ReferenceElements());
	}
	
	public ParserRule getReferenceRule() {
		return getReferenceAccess().getRule();
	}

	//ValidID returns ecore::EString:
	//  ID|"property"|"file";
	public ValidIDElements getValidIDAccess() {
		return (pValidID != null) ? pValidID : (pValidID = new ValidIDElements());
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	//FQN returns ecore::EString:
	//  ValidID ("." ValidID)*;
	public FQNElements getFQNAccess() {
		return (pFQN != null) ? pFQN : (pFQN = new FQNElements());
	}
	
	public ParserRule getFQNRule() {
		return getFQNAccess().getRule();
	}

	//CompoundString returns properties::CompoundString:
	//  MWEString;
	public CompoundStringElements getCompoundStringAccess() {
		return (pCompoundString != null) ? pCompoundString : (pCompoundString = new CompoundStringElements());
	}
	
	public ParserRule getCompoundStringRule() {
		return getCompoundStringAccess().getRule();
	}

	//MWEString hidden ( ):
	//  parts+=Boolean|begin=SingleQuote parts+=MWEStringPart* end=SingleQuote|begin=
	//  DoubleQuote parts+=MWEStringPart* end=DoubleQuote;
	public MWEStringElements getMWEStringAccess() {
		return (pMWEString != null) ? pMWEString : (pMWEString = new MWEStringElements());
	}
	
	public ParserRule getMWEStringRule() {
		return getMWEStringAccess().getRule();
	}

	//CompoundStringPart returns properties::CompoundStringPart:
	//  MWEStringPart;
	public CompoundStringPartElements getCompoundStringPartAccess() {
		return (pCompoundStringPart != null) ? pCompoundStringPart : (pCompoundStringPart = new CompoundStringPartElements());
	}
	
	public ParserRule getCompoundStringPartRule() {
		return getCompoundStringPartAccess().getRule();
	}

	//MWEStringPart:
	//  ReplaceableString|PlainString;
	public MWEStringPartElements getMWEStringPartAccess() {
		return (pMWEStringPart != null) ? pMWEStringPart : (pMWEStringPart = new MWEStringPartElements());
	}
	
	public ParserRule getMWEStringPartRule() {
		return getMWEStringPartAccess().getRule();
	}

	//Boolean returns MWEStringPart:
	//  {BooleanStringPart} value=( "true" | "false" );
	public BooleanElements getBooleanAccess() {
		return (pBoolean != null) ? pBoolean : (pBoolean = new BooleanElements());
	}
	
	public ParserRule getBooleanRule() {
		return getBooleanAccess().getRule();
	}

	//ReplaceableString:
	//  "${" property=PropertyReference "}";
	public ReplaceableStringElements getReplaceableStringAccess() {
		return (pReplaceableString != null) ? pReplaceableString : (pReplaceableString = new ReplaceableStringElements());
	}
	
	public ParserRule getReplaceableStringRule() {
		return getReplaceableStringAccess().getRule();
	}

	//PropertyReference hidden ( WS ):
	//  property=[properties::PropertyEntry|FQN];
	public PropertyReferenceElements getPropertyReferenceAccess() {
		return (pPropertyReference != null) ? pPropertyReference : (pPropertyReference = new PropertyReferenceElements());
	}
	
	public ParserRule getPropertyReferenceRule() {
		return getPropertyReferenceAccess().getRule();
	}

	//PlainString:
	//  value=ConstantValue;
	public PlainStringElements getPlainStringAccess() {
		return (pPlainString != null) ? pPlainString : (pPlainString = new PlainStringElements());
	}
	
	public ParserRule getPlainStringRule() {
		return getPlainStringAccess().getRule();
	}

	//FileRef hidden ( WS ):
	//  "file" filePath=MWEString;
	public FileRefElements getFileRefAccess() {
		return (pFileRef != null) ? pFileRef : (pFileRef = new FileRefElements());
	}
	
	public ParserRule getFileRefRule() {
		return getFileRefAccess().getRule();
	}

	//ConstantValue returns ecore::EString:
	//  WS|Colon|OpeningBrace|ClosingBrace|EscapedDoubleQuote|EscapedSingleQuote|
	//  ANY_OTHER|EscapedBackslash|ValidID|"true"|"false"|"="|"import"|Dot;
	public ConstantValueElements getConstantValueAccess() {
		return (pConstantValue != null) ? pConstantValue : (pConstantValue = new ConstantValueElements());
	}
	
	public ParserRule getConstantValueRule() {
		return getConstantValueAccess().getRule();
	}

	//Colon returns ecore::EString:
	//  ":";
	public ColonElements getColonAccess() {
		return (pColon != null) ? pColon : (pColon = new ColonElements());
	}
	
	public ParserRule getColonRule() {
		return getColonAccess().getRule();
	}

	//Dot returns ecore::EString:
	//  ".";
	public DotElements getDotAccess() {
		return (pDot != null) ? pDot : (pDot = new DotElements());
	}
	
	public ParserRule getDotRule() {
		return getDotAccess().getRule();
	}

	//SingleQuote returns ecore::EString:
	//  "\'";
	public SingleQuoteElements getSingleQuoteAccess() {
		return (pSingleQuote != null) ? pSingleQuote : (pSingleQuote = new SingleQuoteElements());
	}
	
	public ParserRule getSingleQuoteRule() {
		return getSingleQuoteAccess().getRule();
	}

	//EscapedSingleQuote returns ecore::EString hidden ( ):
	//  Backslash SingleQuote;
	public EscapedSingleQuoteElements getEscapedSingleQuoteAccess() {
		return (pEscapedSingleQuote != null) ? pEscapedSingleQuote : (pEscapedSingleQuote = new EscapedSingleQuoteElements());
	}
	
	public ParserRule getEscapedSingleQuoteRule() {
		return getEscapedSingleQuoteAccess().getRule();
	}

	//DoubleQuote returns ecore::EString:
	//  "\"";
	public DoubleQuoteElements getDoubleQuoteAccess() {
		return (pDoubleQuote != null) ? pDoubleQuote : (pDoubleQuote = new DoubleQuoteElements());
	}
	
	public ParserRule getDoubleQuoteRule() {
		return getDoubleQuoteAccess().getRule();
	}

	//EscapedDoubleQuote returns ecore::EString hidden ( ):
	//  Backslash DoubleQuote;
	public EscapedDoubleQuoteElements getEscapedDoubleQuoteAccess() {
		return (pEscapedDoubleQuote != null) ? pEscapedDoubleQuote : (pEscapedDoubleQuote = new EscapedDoubleQuoteElements());
	}
	
	public ParserRule getEscapedDoubleQuoteRule() {
		return getEscapedDoubleQuoteAccess().getRule();
	}

	//Backslash returns ecore::EString:
	//  "\\";
	public BackslashElements getBackslashAccess() {
		return (pBackslash != null) ? pBackslash : (pBackslash = new BackslashElements());
	}
	
	public ParserRule getBackslashRule() {
		return getBackslashAccess().getRule();
	}

	//EscapedBackslash returns ecore::EString hidden ( ):
	//  Backslash Backslash;
	public EscapedBackslashElements getEscapedBackslashAccess() {
		return (pEscapedBackslash != null) ? pEscapedBackslash : (pEscapedBackslash = new EscapedBackslashElements());
	}
	
	public ParserRule getEscapedBackslashRule() {
		return getEscapedBackslashAccess().getRule();
	}

	//OpeningBrace returns ecore::EString:
	//  "{";
	public OpeningBraceElements getOpeningBraceAccess() {
		return (pOpeningBrace != null) ? pOpeningBrace : (pOpeningBrace = new OpeningBraceElements());
	}
	
	public ParserRule getOpeningBraceRule() {
		return getOpeningBraceAccess().getRule();
	}

	//ClosingBrace returns ecore::EString:
	//  "}";
	public ClosingBraceElements getClosingBraceAccess() {
		return (pClosingBrace != null) ? pClosingBrace : (pClosingBrace = new ClosingBraceElements());
	}
	
	public ParserRule getClosingBraceRule() {
		return getClosingBraceAccess().getRule();
	}

	//terminal ID:
	//  "^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//terminal ML_COMMENT:
	//  "/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return (tML_COMMENT != null) ? tML_COMMENT : (tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT"));
	} 

	//terminal SL_COMMENT:
	//  "//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	//terminal WS:
	//  (" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 

	//terminal ANY_OTHER:
	//  .;
	public TerminalRule getANY_OTHERRule() {
		return (tANY_OTHER != null) ? tANY_OTHER : (tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ANY_OTHER"));
	} 
}
