/*
* generated by Xtext
*/
package org.eclipse.emf.mwe.concept.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IInstanceDescription;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;

import org.eclipse.emf.mwe.concept.services.MWEConceptGrammarAccess;

import com.google.inject.Inject;

public class MWEConceptParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private MWEConceptGrammarAccess grammarAccess;
	
	@Override	
	public MWEConceptGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}

	@Override
	protected AbstractToken getRootToken(IInstanceDescription inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IInstanceDescription inst) {
		super(inst);
	}
	
	@Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MWEFile_Group(this, this, 0, inst);
			case 1: return new Import_Group(this, this, 1, inst);
			case 2: return new Setting_Group(this, this, 2, inst);
			case 3: return new Component_Group(this, this, 3, inst);
			case 4: return new ComponentWithType_Group(this, this, 4, inst);
			case 5: return new ConfigurationElement_Alternatives(this, this, 5, inst);
			case 6: return new Literal_Alternatives(this, this, 6, inst);
			case 7: return new AttributeList_Alternatives(this, this, 7, inst);
			case 8: return new Property_Alternatives(this, this, 8, inst);
			case 9: return new PropertyEntry_SimplePropertyParserRuleCall(this, this, 9, inst);
			case 10: return new SimpleProperty_Group(this, this, 10, inst);
			case 11: return new PropertyFile_Group(this, this, 11, inst);
			case 12: return new Attribute_Alternatives(this, this, 12, inst);
			case 13: return new SimpleAttribute_ValueAssignment(this, this, 13, inst);
			case 14: return new Reference_ComponentAssignment(this, this, 14, inst);
			case 15: return new CompoundString_MWEStringParserRuleCall(this, this, 15, inst);
			case 16: return new MWEString_Alternatives(this, this, 16, inst);
			case 17: return new CompoundStringPart_MWEStringPartParserRuleCall(this, this, 17, inst);
			case 18: return new MWEStringPart_Alternatives(this, this, 18, inst);
			case 19: return new Boolean_Group(this, this, 19, inst);
			case 20: return new ReplaceableString_Group(this, this, 20, inst);
			case 21: return new PropertyReference_PropertyAssignment(this, this, 21, inst);
			case 22: return new PlainString_ValueAssignment(this, this, 22, inst);
			case 23: return new FileRef_Group(this, this, 23, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule MWEFile ****************
 *
 * MWEFile:
 *   {MWEFile} imports+=Import* root=ComponentWithType;
 *
 **/

// {MWEFile} imports+=Import* root=ComponentWithType
protected class MWEFile_Group extends GroupToken {
	
	public MWEFile_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getMWEFileAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MWEFile_RootAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getMWEFileRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {MWEFile}
protected class MWEFile_MWEFileAction_0 extends ActionToken  {

	public MWEFile_MWEFileAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getMWEFileAccess().getMWEFileAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getMWEFileAccess().getMWEFileAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// imports+=Import*
protected class MWEFile_ImportsAssignment_1 extends AssignmentToken  {
	
	public MWEFile_ImportsAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMWEFileAccess().getImportsAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Import_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("imports",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("imports");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getImportRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getMWEFileAccess().getImportsImportParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new MWEFile_ImportsAssignment_1(parent, next, actIndex, consumed);
			case 1: return new MWEFile_MWEFileAction_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// root=ComponentWithType
protected class MWEFile_RootAssignment_2 extends AssignmentToken  {
	
	public MWEFile_RootAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMWEFileAccess().getRootAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ComponentWithType_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("root",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("root");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getComponentWithTypeRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getMWEFileAccess().getRootComponentWithTypeParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new MWEFile_ImportsAssignment_1(parent, next, actIndex, consumed);
			case 1: return new MWEFile_MWEFileAction_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule MWEFile ****************/


/************ begin Rule Import ****************
 *
 * Import:
 *   "import" importedNamespace=ImportedFQN ";";
 *
 **/

// "import" importedNamespace=ImportedFQN ";"
protected class Import_Group extends GroupToken {
	
	public Import_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getImportAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Import_SemicolonKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getImportRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "import"
protected class Import_ImportKeyword_0 extends KeywordToken  {
	
	public Import_ImportKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getImportAccess().getImportKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// importedNamespace=ImportedFQN
protected class Import_ImportedNamespaceAssignment_1 extends AssignmentToken  {
	
	public Import_ImportedNamespaceAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getImportAccess().getImportedNamespaceAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Import_ImportKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("importedNamespace",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("importedNamespace");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.DRC;
			element = grammarAccess.getImportAccess().getImportedNamespaceImportedFQNParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class Import_SemicolonKeyword_2 extends KeywordToken  {
	
	public Import_SemicolonKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getImportAccess().getSemicolonKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Import_ImportedNamespaceAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule Import ****************/



/************ begin Rule Setting ****************
 *
 * Setting:
 *   feature=[types::Operation|ValidID] ("=" value=AttributeList|value=Component);
 *
 **/

// feature=[types::Operation|ValidID] ("=" value=AttributeList|value=Component)
protected class Setting_Group extends GroupToken {
	
	public Setting_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSettingAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Setting_Alternatives_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getSettingRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// feature=[types::Operation|ValidID]
protected class Setting_FeatureAssignment_0 extends AssignmentToken  {
	
	public Setting_FeatureAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSettingAccess().getFeatureAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("feature",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("feature");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSettingAccess().getFeatureOperationCrossReference_0_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getSettingAccess().getFeatureOperationCrossReference_0_0(); 
				return obj;
			}
		}
		return null;
	}

}

// "=" value=AttributeList|value=Component
protected class Setting_Alternatives_1 extends AlternativesToken {

	public Setting_Alternatives_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getSettingAccess().getAlternatives_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Setting_Group_1_0(parent, this, 0, inst);
			case 1: return new Setting_ValueAssignment_1_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "=" value=AttributeList
protected class Setting_Group_1_0 extends GroupToken {
	
	public Setting_Group_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSettingAccess().getGroup_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Setting_ValueAssignment_1_0_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "="
protected class Setting_EqualsSignKeyword_1_0_0 extends KeywordToken  {
	
	public Setting_EqualsSignKeyword_1_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSettingAccess().getEqualsSignKeyword_1_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Setting_FeatureAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// value=AttributeList
protected class Setting_ValueAssignment_1_0_1 extends AssignmentToken  {
	
	public Setting_ValueAssignment_1_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSettingAccess().getValueAssignment_1_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AttributeList_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("value",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("value");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAttributeListRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getSettingAccess().getValueAttributeListParserRuleCall_1_0_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Setting_EqualsSignKeyword_1_0_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// value=Component
protected class Setting_ValueAssignment_1_1 extends AssignmentToken  {
	
	public Setting_ValueAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSettingAccess().getValueAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Component_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("value",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("value");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getComponentRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getSettingAccess().getValueComponentParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Setting_FeatureAssignment_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule Setting ****************/


/************ begin Rule Component ****************
 *
 * Component:
 *   {Component} (type=[types::Type|FQN]|fileRef=FileRef)? ("as" name=ValidID)? (";"|"{"
 *   elements+=ConfigurationElement* "}");
 *
 **/

// {Component} (type=[types::Type|FQN]|fileRef=FileRef)? ("as" name=ValidID)? (";"|"{"
// elements+=ConfigurationElement* "}")
protected class Component_Group extends GroupToken {
	
	public Component_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getComponentAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Component_Alternatives_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getComponentRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {Component}
protected class Component_ComponentAction_0 extends ActionToken  {

	public Component_ComponentAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getComponentAccess().getComponentAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getComponentAccess().getComponentAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// (type=[types::Type|FQN]|fileRef=FileRef)?
protected class Component_Alternatives_1 extends AlternativesToken {

	public Component_Alternatives_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getComponentAccess().getAlternatives_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Component_TypeAssignment_1_0(parent, this, 0, inst);
			case 1: return new Component_FileRefAssignment_1_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// type=[types::Type|FQN]
protected class Component_TypeAssignment_1_0 extends AssignmentToken  {
	
	public Component_TypeAssignment_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getComponentAccess().getTypeAssignment_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Component_ComponentAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getComponentAccess().getTypeTypeCrossReference_1_0_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getComponentAccess().getTypeTypeCrossReference_1_0_0(); 
				return obj;
			}
		}
		return null;
	}

}

// fileRef=FileRef
protected class Component_FileRefAssignment_1_1 extends AssignmentToken  {
	
	public Component_FileRefAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getComponentAccess().getFileRefAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FileRef_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("fileRef",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("fileRef");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFileRefRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getComponentAccess().getFileRefFileRefParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Component_ComponentAction_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ("as" name=ValidID)?
protected class Component_Group_2 extends GroupToken {
	
	public Component_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getComponentAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Component_NameAssignment_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "as"
protected class Component_AsKeyword_2_0 extends KeywordToken  {
	
	public Component_AsKeyword_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getComponentAccess().getAsKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Component_Alternatives_1(parent, this, 0, inst);
			case 1: return new Component_ComponentAction_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// name=ValidID
protected class Component_NameAssignment_2_1 extends AssignmentToken  {
	
	public Component_NameAssignment_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getComponentAccess().getNameAssignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Component_AsKeyword_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.DRC;
			element = grammarAccess.getComponentAccess().getNameValidIDParserRuleCall_2_1_0();
			return obj;
		}
		return null;
	}

}


// ";"|"{" elements+=ConfigurationElement* "}"
protected class Component_Alternatives_3 extends AlternativesToken {

	public Component_Alternatives_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getComponentAccess().getAlternatives_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Component_SemicolonKeyword_3_0(parent, this, 0, inst);
			case 1: return new Component_Group_3_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// ";"
protected class Component_SemicolonKeyword_3_0 extends KeywordToken  {
	
	public Component_SemicolonKeyword_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getComponentAccess().getSemicolonKeyword_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Component_Group_2(parent, this, 0, inst);
			case 1: return new Component_Alternatives_1(parent, this, 1, inst);
			case 2: return new Component_ComponentAction_0(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// "{" elements+=ConfigurationElement* "}"
protected class Component_Group_3_1 extends GroupToken {
	
	public Component_Group_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getComponentAccess().getGroup_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Component_RightCurlyBracketKeyword_3_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "{"
protected class Component_LeftCurlyBracketKeyword_3_1_0 extends KeywordToken  {
	
	public Component_LeftCurlyBracketKeyword_3_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getComponentAccess().getLeftCurlyBracketKeyword_3_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Component_Group_2(parent, this, 0, inst);
			case 1: return new Component_Alternatives_1(parent, this, 1, inst);
			case 2: return new Component_ComponentAction_0(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// elements+=ConfigurationElement*
protected class Component_ElementsAssignment_3_1_1 extends AssignmentToken  {
	
	public Component_ElementsAssignment_3_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getComponentAccess().getElementsAssignment_3_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ConfigurationElement_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("elements",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("elements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getConfigurationElementRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getComponentAccess().getElementsConfigurationElementParserRuleCall_3_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Component_ElementsAssignment_3_1_1(parent, next, actIndex, consumed);
			case 1: return new Component_LeftCurlyBracketKeyword_3_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class Component_RightCurlyBracketKeyword_3_1_2 extends KeywordToken  {
	
	public Component_RightCurlyBracketKeyword_3_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getComponentAccess().getRightCurlyBracketKeyword_3_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Component_ElementsAssignment_3_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}




/************ end Rule Component ****************/


/************ begin Rule ComponentWithType ****************
 *
 * ComponentWithType returns Component:
 *   type=[types::Type|FQN] ("as" name=ValidID)? (";"|"{" elements+=ConfigurationElement*
 *   "}");
 *
 **/

// type=[types::Type|FQN] ("as" name=ValidID)? (";"|"{" elements+=ConfigurationElement*
// "}")
protected class ComponentWithType_Group extends GroupToken {
	
	public ComponentWithType_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getComponentWithTypeAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ComponentWithType_Alternatives_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getComponentWithTypeRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// type=[types::Type|FQN]
protected class ComponentWithType_TypeAssignment_0 extends AssignmentToken  {
	
	public ComponentWithType_TypeAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getComponentWithTypeAccess().getTypeAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getComponentWithTypeAccess().getTypeTypeCrossReference_0_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getComponentWithTypeAccess().getTypeTypeCrossReference_0_0(); 
				return obj;
			}
		}
		return null;
	}

}

// ("as" name=ValidID)?
protected class ComponentWithType_Group_1 extends GroupToken {
	
	public ComponentWithType_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getComponentWithTypeAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ComponentWithType_NameAssignment_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "as"
protected class ComponentWithType_AsKeyword_1_0 extends KeywordToken  {
	
	public ComponentWithType_AsKeyword_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getComponentWithTypeAccess().getAsKeyword_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ComponentWithType_TypeAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// name=ValidID
protected class ComponentWithType_NameAssignment_1_1 extends AssignmentToken  {
	
	public ComponentWithType_NameAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getComponentWithTypeAccess().getNameAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ComponentWithType_AsKeyword_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.DRC;
			element = grammarAccess.getComponentWithTypeAccess().getNameValidIDParserRuleCall_1_1_0();
			return obj;
		}
		return null;
	}

}


// ";"|"{" elements+=ConfigurationElement* "}"
protected class ComponentWithType_Alternatives_2 extends AlternativesToken {

	public ComponentWithType_Alternatives_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getComponentWithTypeAccess().getAlternatives_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ComponentWithType_SemicolonKeyword_2_0(parent, this, 0, inst);
			case 1: return new ComponentWithType_Group_2_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// ";"
protected class ComponentWithType_SemicolonKeyword_2_0 extends KeywordToken  {
	
	public ComponentWithType_SemicolonKeyword_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getComponentWithTypeAccess().getSemicolonKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ComponentWithType_Group_1(parent, this, 0, inst);
			case 1: return new ComponentWithType_TypeAssignment_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "{" elements+=ConfigurationElement* "}"
protected class ComponentWithType_Group_2_1 extends GroupToken {
	
	public ComponentWithType_Group_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getComponentWithTypeAccess().getGroup_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ComponentWithType_RightCurlyBracketKeyword_2_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "{"
protected class ComponentWithType_LeftCurlyBracketKeyword_2_1_0 extends KeywordToken  {
	
	public ComponentWithType_LeftCurlyBracketKeyword_2_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getComponentWithTypeAccess().getLeftCurlyBracketKeyword_2_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ComponentWithType_Group_1(parent, this, 0, inst);
			case 1: return new ComponentWithType_TypeAssignment_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// elements+=ConfigurationElement*
protected class ComponentWithType_ElementsAssignment_2_1_1 extends AssignmentToken  {
	
	public ComponentWithType_ElementsAssignment_2_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getComponentWithTypeAccess().getElementsAssignment_2_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ConfigurationElement_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("elements",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("elements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getConfigurationElementRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getComponentWithTypeAccess().getElementsConfigurationElementParserRuleCall_2_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ComponentWithType_ElementsAssignment_2_1_1(parent, next, actIndex, consumed);
			case 1: return new ComponentWithType_LeftCurlyBracketKeyword_2_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class ComponentWithType_RightCurlyBracketKeyword_2_1_2 extends KeywordToken  {
	
	public ComponentWithType_RightCurlyBracketKeyword_2_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getComponentWithTypeAccess().getRightCurlyBracketKeyword_2_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ComponentWithType_ElementsAssignment_2_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}




/************ end Rule ComponentWithType ****************/


/************ begin Rule ConfigurationElement ****************
 *
 * ConfigurationElement:
 *   Setting|Property;
 *
 **/

// Setting|Property
protected class ConfigurationElement_Alternatives extends AlternativesToken {

	public ConfigurationElement_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getConfigurationElementAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ConfigurationElement_SettingParserRuleCall_0(parent, this, 0, inst);
			case 1: return new ConfigurationElement_PropertyParserRuleCall_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getConfigurationElementRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// Setting
protected class ConfigurationElement_SettingParserRuleCall_0 extends RuleCallToken {
	
	public ConfigurationElement_SettingParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getConfigurationElementAccess().getSettingParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Setting_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Setting_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getSettingRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// Property
protected class ConfigurationElement_PropertyParserRuleCall_1 extends RuleCallToken {
	
	public ConfigurationElement_PropertyParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getConfigurationElementAccess().getPropertyParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Property_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Property_Alternatives.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getPropertyRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule ConfigurationElement ****************/


/************ begin Rule Literal ****************
 *
 * Literal:
 *   Component|AttributeList|Attribute;
 *
 **/

// Component|AttributeList|Attribute
protected class Literal_Alternatives extends AlternativesToken {

	public Literal_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getLiteralAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Literal_ComponentParserRuleCall_0(parent, this, 0, inst);
			case 1: return new Literal_AttributeListParserRuleCall_1(parent, this, 1, inst);
			case 2: return new Literal_AttributeParserRuleCall_2(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getLiteralRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// Component
protected class Literal_ComponentParserRuleCall_0 extends RuleCallToken {
	
	public Literal_ComponentParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getLiteralAccess().getComponentParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Component_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Component_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getComponentRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// AttributeList
protected class Literal_AttributeListParserRuleCall_1 extends RuleCallToken {
	
	public Literal_AttributeListParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getLiteralAccess().getAttributeListParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AttributeList_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(AttributeList_Alternatives.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getAttributeListRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// Attribute
protected class Literal_AttributeParserRuleCall_2 extends RuleCallToken {
	
	public Literal_AttributeParserRuleCall_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getLiteralAccess().getAttributeParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Attribute_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Attribute_Alternatives.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getAttributeRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Literal ****************/


/************ begin Rule AttributeList ****************
 *
 * AttributeList returns Literal:
 *   SimpleAttribute ({AttributeList.content+=current} ("," content+=SimpleAttribute)+)?
 *   |Reference ({AttributeList.content+=current} ("," content+=Reference)+)?;
 *
 **/

// SimpleAttribute ({AttributeList.content+=current} ("," content+=SimpleAttribute)+)?
// |Reference ({AttributeList.content+=current} ("," content+=Reference)+)?
protected class AttributeList_Alternatives extends AlternativesToken {

	public AttributeList_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getAttributeListAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AttributeList_Group_0(parent, this, 0, inst);
			case 1: return new AttributeList_Group_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAttributeListRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// SimpleAttribute ({AttributeList.content+=current} ("," content+=SimpleAttribute)+)?
protected class AttributeList_Group_0 extends GroupToken {
	
	public AttributeList_Group_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAttributeListAccess().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AttributeList_Group_0_1(parent, this, 0, inst);
			case 1: return new AttributeList_SimpleAttributeParserRuleCall_0_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// SimpleAttribute
protected class AttributeList_SimpleAttributeParserRuleCall_0_0 extends RuleCallToken {
	
	public AttributeList_SimpleAttributeParserRuleCall_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAttributeListAccess().getSimpleAttributeParserRuleCall_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SimpleAttribute_ValueAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(SimpleAttribute_ValueAssignment.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getSimpleAttributeRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ({AttributeList.content+=current} ("," content+=SimpleAttribute)+)?
protected class AttributeList_Group_0_1 extends GroupToken {
	
	public AttributeList_Group_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAttributeListAccess().getGroup_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AttributeList_Group_0_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// {AttributeList.content+=current}
protected class AttributeList_AttributeListContentAction_0_1_0 extends ActionToken  {

	public AttributeList_AttributeListContentAction_0_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getAttributeListAccess().getAttributeListContentAction_0_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AttributeList_SimpleAttributeParserRuleCall_0_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getAttributeListAccess().getAttributeListContentAction_0_1_0().getType().getClassifier())) return null;
		Object val = current.getConsumable("content", false);
		if(val == null) return null;
		if(!current.isConsumedWithLastConsumtion("content")) return null;
		return getDescr((EObject) val);
	}
}

// ("," content+=SimpleAttribute)+
protected class AttributeList_Group_0_1_1 extends GroupToken {
	
	public AttributeList_Group_0_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAttributeListAccess().getGroup_0_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AttributeList_ContentAssignment_0_1_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class AttributeList_CommaKeyword_0_1_1_0 extends KeywordToken  {
	
	public AttributeList_CommaKeyword_0_1_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAttributeListAccess().getCommaKeyword_0_1_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AttributeList_Group_0_1_1(parent, this, 0, inst);
			case 1: return new AttributeList_AttributeListContentAction_0_1_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// content+=SimpleAttribute
protected class AttributeList_ContentAssignment_0_1_1_1 extends AssignmentToken  {
	
	public AttributeList_ContentAssignment_0_1_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAttributeListAccess().getContentAssignment_0_1_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SimpleAttribute_ValueAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("content",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("content");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSimpleAttributeRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getAttributeListAccess().getContentSimpleAttributeParserRuleCall_0_1_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AttributeList_CommaKeyword_0_1_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}




// Reference ({AttributeList.content+=current} ("," content+=Reference)+)?
protected class AttributeList_Group_1 extends GroupToken {
	
	public AttributeList_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAttributeListAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AttributeList_Group_1_1(parent, this, 0, inst);
			case 1: return new AttributeList_ReferenceParserRuleCall_1_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// Reference
protected class AttributeList_ReferenceParserRuleCall_1_0 extends RuleCallToken {
	
	public AttributeList_ReferenceParserRuleCall_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAttributeListAccess().getReferenceParserRuleCall_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Reference_ComponentAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Reference_ComponentAssignment.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getReferenceRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ({AttributeList.content+=current} ("," content+=Reference)+)?
protected class AttributeList_Group_1_1 extends GroupToken {
	
	public AttributeList_Group_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAttributeListAccess().getGroup_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AttributeList_Group_1_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// {AttributeList.content+=current}
protected class AttributeList_AttributeListContentAction_1_1_0 extends ActionToken  {

	public AttributeList_AttributeListContentAction_1_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getAttributeListAccess().getAttributeListContentAction_1_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AttributeList_ReferenceParserRuleCall_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getAttributeListAccess().getAttributeListContentAction_1_1_0().getType().getClassifier())) return null;
		Object val = current.getConsumable("content", false);
		if(val == null) return null;
		if(!current.isConsumedWithLastConsumtion("content")) return null;
		return getDescr((EObject) val);
	}
}

// ("," content+=Reference)+
protected class AttributeList_Group_1_1_1 extends GroupToken {
	
	public AttributeList_Group_1_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAttributeListAccess().getGroup_1_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AttributeList_ContentAssignment_1_1_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class AttributeList_CommaKeyword_1_1_1_0 extends KeywordToken  {
	
	public AttributeList_CommaKeyword_1_1_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAttributeListAccess().getCommaKeyword_1_1_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AttributeList_Group_1_1_1(parent, this, 0, inst);
			case 1: return new AttributeList_AttributeListContentAction_1_1_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// content+=Reference
protected class AttributeList_ContentAssignment_1_1_1_1 extends AssignmentToken  {
	
	public AttributeList_ContentAssignment_1_1_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAttributeListAccess().getContentAssignment_1_1_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Reference_ComponentAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("content",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("content");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getReferenceRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getAttributeListAccess().getContentReferenceParserRuleCall_1_1_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AttributeList_CommaKeyword_1_1_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}





/************ end Rule AttributeList ****************/


/************ begin Rule Property ****************
 *
 * Property:
 *   SimpleProperty|PropertyFile;
 *
 **/

// SimpleProperty|PropertyFile
protected class Property_Alternatives extends AlternativesToken {

	public Property_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getPropertyAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Property_SimplePropertyParserRuleCall_0(parent, this, 0, inst);
			case 1: return new Property_PropertyFileParserRuleCall_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPropertyRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// SimpleProperty
protected class Property_SimplePropertyParserRuleCall_0 extends RuleCallToken {
	
	public Property_SimplePropertyParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPropertyAccess().getSimplePropertyParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SimpleProperty_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(SimpleProperty_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getSimplePropertyRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// PropertyFile
protected class Property_PropertyFileParserRuleCall_1 extends RuleCallToken {
	
	public Property_PropertyFileParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPropertyAccess().getPropertyFileParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PropertyFile_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(PropertyFile_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getPropertyFileRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Property ****************/


/************ begin Rule PropertyEntry ****************
 *
 * PropertyEntry returns properties::PropertyEntry:
 *   SimpleProperty;
 *
 **/

// SimpleProperty
protected class PropertyEntry_SimplePropertyParserRuleCall extends RuleCallToken {
	
	public PropertyEntry_SimplePropertyParserRuleCall(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPropertyEntryAccess().getSimplePropertyParserRuleCall();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SimpleProperty_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPropertyEntryRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(SimpleProperty_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getSimplePropertyRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

/************ end Rule PropertyEntry ****************/


/************ begin Rule SimpleProperty ****************
 *
 * SimpleProperty returns Property:
 *   "property" name=FQN delimiter="=" value=MWEString;
 *
 **/

// "property" name=FQN delimiter="=" value=MWEString
protected class SimpleProperty_Group extends GroupToken {
	
	public SimpleProperty_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSimplePropertyAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SimpleProperty_ValueAssignment_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getSimplePropertyRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "property"
protected class SimpleProperty_PropertyKeyword_0 extends KeywordToken  {
	
	public SimpleProperty_PropertyKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSimplePropertyAccess().getPropertyKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// name=FQN
protected class SimpleProperty_NameAssignment_1 extends AssignmentToken  {
	
	public SimpleProperty_NameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSimplePropertyAccess().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SimpleProperty_PropertyKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.DRC;
			element = grammarAccess.getSimplePropertyAccess().getNameFQNParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// delimiter="="
protected class SimpleProperty_DelimiterAssignment_2 extends AssignmentToken  {
	
	public SimpleProperty_DelimiterAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSimplePropertyAccess().getDelimiterAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SimpleProperty_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("delimiter",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("delimiter");
		if("=".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getSimplePropertyAccess().getDelimiterEqualsSignKeyword_2_0();
			return obj;
		}
		return null;
	}

}

// value=MWEString
protected class SimpleProperty_ValueAssignment_3 extends AssignmentToken  {
	
	public SimpleProperty_ValueAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSimplePropertyAccess().getValueAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MWEString_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("value",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("value");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getMWEStringRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getSimplePropertyAccess().getValueMWEStringParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SimpleProperty_DelimiterAssignment_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule SimpleProperty ****************/


/************ begin Rule PropertyFile ****************
 *
 * PropertyFile:
 *   "property" fileRef=FileRef;
 *
 **/

// "property" fileRef=FileRef
protected class PropertyFile_Group extends GroupToken {
	
	public PropertyFile_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPropertyFileAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PropertyFile_FileRefAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPropertyFileRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "property"
protected class PropertyFile_PropertyKeyword_0 extends KeywordToken  {
	
	public PropertyFile_PropertyKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPropertyFileAccess().getPropertyKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// fileRef=FileRef
protected class PropertyFile_FileRefAssignment_1 extends AssignmentToken  {
	
	public PropertyFile_FileRefAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPropertyFileAccess().getFileRefAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FileRef_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("fileRef",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("fileRef");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFileRefRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPropertyFileAccess().getFileRefFileRefParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PropertyFile_PropertyKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule PropertyFile ****************/


/************ begin Rule Attribute ****************
 *
 * Attribute:
 *   SimpleAttribute|Reference;
 *
 **/

// SimpleAttribute|Reference
protected class Attribute_Alternatives extends AlternativesToken {

	public Attribute_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getAttributeAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Attribute_SimpleAttributeParserRuleCall_0(parent, this, 0, inst);
			case 1: return new Attribute_ReferenceParserRuleCall_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAttributeRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// SimpleAttribute
protected class Attribute_SimpleAttributeParserRuleCall_0 extends RuleCallToken {
	
	public Attribute_SimpleAttributeParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAttributeAccess().getSimpleAttributeParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SimpleAttribute_ValueAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(SimpleAttribute_ValueAssignment.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getSimpleAttributeRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// Reference
protected class Attribute_ReferenceParserRuleCall_1 extends RuleCallToken {
	
	public Attribute_ReferenceParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAttributeAccess().getReferenceParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Reference_ComponentAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Reference_ComponentAssignment.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getReferenceRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Attribute ****************/


/************ begin Rule SimpleAttribute ****************
 *
 * SimpleAttribute:
 *   value=MWEString;
 *
 **/

// value=MWEString
protected class SimpleAttribute_ValueAssignment extends AssignmentToken  {
	
	public SimpleAttribute_ValueAssignment(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSimpleAttributeAccess().getValueAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MWEString_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getSimpleAttributeRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("value",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("value");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getMWEStringRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getSimpleAttributeAccess().getValueMWEStringParserRuleCall_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

/************ end Rule SimpleAttribute ****************/


/************ begin Rule Reference ****************
 *
 * Reference:
 *   component=[Component];
 *
 **/

// component=[Component]
protected class Reference_ComponentAssignment extends AssignmentToken  {
	
	public Reference_ComponentAssignment(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getReferenceAccess().getComponentAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getReferenceRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("component",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("component");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getReferenceAccess().getComponentComponentCrossReference_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getReferenceAccess().getComponentComponentCrossReference_0(); 
				return obj;
			}
		}
		return null;
	}

}

/************ end Rule Reference ****************/




/************ begin Rule CompoundString ****************
 *
 * CompoundString returns properties::CompoundString:
 *   MWEString;
 *
 **/

// MWEString
protected class CompoundString_MWEStringParserRuleCall extends RuleCallToken {
	
	public CompoundString_MWEStringParserRuleCall(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getCompoundStringAccess().getMWEStringParserRuleCall();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MWEString_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getCompoundStringRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(MWEString_Alternatives.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getMWEStringRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

/************ end Rule CompoundString ****************/


/************ begin Rule MWEString ****************
 *
 * MWEString hidden ( ):
 *   parts+=Boolean|begin=SingleQuote parts+=MWEStringPart* end=SingleQuote|begin=
 *   DoubleQuote parts+=MWEStringPart* end=DoubleQuote;
 *
 **/

// parts+=Boolean|begin=SingleQuote parts+=MWEStringPart* end=SingleQuote|begin=
// DoubleQuote parts+=MWEStringPart* end=DoubleQuote
protected class MWEString_Alternatives extends AlternativesToken {

	public MWEString_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getMWEStringAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MWEString_PartsAssignment_0(parent, this, 0, inst);
			case 1: return new MWEString_Group_1(parent, this, 1, inst);
			case 2: return new MWEString_Group_2(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getMWEStringRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// parts+=Boolean
protected class MWEString_PartsAssignment_0 extends AssignmentToken  {
	
	public MWEString_PartsAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMWEStringAccess().getPartsAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Boolean_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("parts",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("parts");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getBooleanRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getMWEStringAccess().getPartsBooleanParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

// begin=SingleQuote parts+=MWEStringPart* end=SingleQuote
protected class MWEString_Group_1 extends GroupToken {
	
	public MWEString_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getMWEStringAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MWEString_EndAssignment_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// begin=SingleQuote
protected class MWEString_BeginAssignment_1_0 extends AssignmentToken  {
	
	public MWEString_BeginAssignment_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMWEStringAccess().getBeginAssignment_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("begin",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("begin");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.DRC;
			element = grammarAccess.getMWEStringAccess().getBeginSingleQuoteParserRuleCall_1_0_0();
			return obj;
		}
		return null;
	}

}

// parts+=MWEStringPart*
protected class MWEString_PartsAssignment_1_1 extends AssignmentToken  {
	
	public MWEString_PartsAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMWEStringAccess().getPartsAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MWEStringPart_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("parts",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("parts");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getMWEStringPartRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getMWEStringAccess().getPartsMWEStringPartParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new MWEString_PartsAssignment_1_1(parent, next, actIndex, consumed);
			case 1: return new MWEString_BeginAssignment_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// end=SingleQuote
protected class MWEString_EndAssignment_1_2 extends AssignmentToken  {
	
	public MWEString_EndAssignment_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMWEStringAccess().getEndAssignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MWEString_PartsAssignment_1_1(parent, this, 0, inst);
			case 1: return new MWEString_BeginAssignment_1_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("end",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("end");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.DRC;
			element = grammarAccess.getMWEStringAccess().getEndSingleQuoteParserRuleCall_1_2_0();
			return obj;
		}
		return null;
	}

}


// begin=DoubleQuote parts+=MWEStringPart* end=DoubleQuote
protected class MWEString_Group_2 extends GroupToken {
	
	public MWEString_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getMWEStringAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MWEString_EndAssignment_2_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// begin=DoubleQuote
protected class MWEString_BeginAssignment_2_0 extends AssignmentToken  {
	
	public MWEString_BeginAssignment_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMWEStringAccess().getBeginAssignment_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("begin",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("begin");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.DRC;
			element = grammarAccess.getMWEStringAccess().getBeginDoubleQuoteParserRuleCall_2_0_0();
			return obj;
		}
		return null;
	}

}

// parts+=MWEStringPart*
protected class MWEString_PartsAssignment_2_1 extends AssignmentToken  {
	
	public MWEString_PartsAssignment_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMWEStringAccess().getPartsAssignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MWEStringPart_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("parts",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("parts");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getMWEStringPartRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getMWEStringAccess().getPartsMWEStringPartParserRuleCall_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new MWEString_PartsAssignment_2_1(parent, next, actIndex, consumed);
			case 1: return new MWEString_BeginAssignment_2_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// end=DoubleQuote
protected class MWEString_EndAssignment_2_2 extends AssignmentToken  {
	
	public MWEString_EndAssignment_2_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMWEStringAccess().getEndAssignment_2_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MWEString_PartsAssignment_2_1(parent, this, 0, inst);
			case 1: return new MWEString_BeginAssignment_2_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("end",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("end");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.DRC;
			element = grammarAccess.getMWEStringAccess().getEndDoubleQuoteParserRuleCall_2_2_0();
			return obj;
		}
		return null;
	}

}



/************ end Rule MWEString ****************/


/************ begin Rule CompoundStringPart ****************
 *
 * CompoundStringPart returns properties::CompoundStringPart:
 *   MWEStringPart;
 *
 **/

// MWEStringPart
protected class CompoundStringPart_MWEStringPartParserRuleCall extends RuleCallToken {
	
	public CompoundStringPart_MWEStringPartParserRuleCall(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getCompoundStringPartAccess().getMWEStringPartParserRuleCall();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MWEStringPart_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getCompoundStringPartRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(MWEStringPart_Alternatives.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getMWEStringPartRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

/************ end Rule CompoundStringPart ****************/


/************ begin Rule MWEStringPart ****************
 *
 * MWEStringPart:
 *   ReplaceableString|PlainString;
 *
 **/

// ReplaceableString|PlainString
protected class MWEStringPart_Alternatives extends AlternativesToken {

	public MWEStringPart_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getMWEStringPartAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MWEStringPart_ReplaceableStringParserRuleCall_0(parent, this, 0, inst);
			case 1: return new MWEStringPart_PlainStringParserRuleCall_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getMWEStringPartRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// ReplaceableString
protected class MWEStringPart_ReplaceableStringParserRuleCall_0 extends RuleCallToken {
	
	public MWEStringPart_ReplaceableStringParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getMWEStringPartAccess().getReplaceableStringParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ReplaceableString_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(ReplaceableString_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getReplaceableStringRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// PlainString
protected class MWEStringPart_PlainStringParserRuleCall_1 extends RuleCallToken {
	
	public MWEStringPart_PlainStringParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getMWEStringPartAccess().getPlainStringParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PlainString_ValueAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(PlainString_ValueAssignment.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getPlainStringRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule MWEStringPart ****************/


/************ begin Rule Boolean ****************
 *
 * Boolean returns MWEStringPart:
 *   {BooleanStringPart} value=( "true" | "false" );
 *
 **/

// {BooleanStringPart} value=( "true" | "false" )
protected class Boolean_Group extends GroupToken {
	
	public Boolean_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getBooleanAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Boolean_ValueAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getBooleanRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {BooleanStringPart}
protected class Boolean_BooleanStringPartAction_0 extends ActionToken  {

	public Boolean_BooleanStringPartAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getBooleanAccess().getBooleanStringPartAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getBooleanAccess().getBooleanStringPartAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// value=( "true" | "false" )
protected class Boolean_ValueAssignment_1 extends AssignmentToken  {
	
	public Boolean_ValueAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBooleanAccess().getValueAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Boolean_BooleanStringPartAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("value",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("value");
		if("true".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getBooleanAccess().getValueTrueKeyword_1_0_0();
			return obj;
		}
		if("false".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getBooleanAccess().getValueFalseKeyword_1_0_1();
			return obj;
		}
		return null;
	}

}


/************ end Rule Boolean ****************/


/************ begin Rule ReplaceableString ****************
 *
 * ReplaceableString:
 *   "${" property=PropertyReference "}";
 *
 **/

// "${" property=PropertyReference "}"
protected class ReplaceableString_Group extends GroupToken {
	
	public ReplaceableString_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getReplaceableStringAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ReplaceableString_RightCurlyBracketKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getReplaceableStringRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "${"
protected class ReplaceableString_DollarSignLeftCurlyBracketKeyword_0 extends KeywordToken  {
	
	public ReplaceableString_DollarSignLeftCurlyBracketKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getReplaceableStringAccess().getDollarSignLeftCurlyBracketKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// property=PropertyReference
protected class ReplaceableString_PropertyAssignment_1 extends AssignmentToken  {
	
	public ReplaceableString_PropertyAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getReplaceableStringAccess().getPropertyAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PropertyReference_PropertyAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("property",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("property");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPropertyReferenceRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getReplaceableStringAccess().getPropertyPropertyReferenceParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ReplaceableString_DollarSignLeftCurlyBracketKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class ReplaceableString_RightCurlyBracketKeyword_2 extends KeywordToken  {
	
	public ReplaceableString_RightCurlyBracketKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getReplaceableStringAccess().getRightCurlyBracketKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ReplaceableString_PropertyAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule ReplaceableString ****************/


/************ begin Rule PropertyReference ****************
 *
 * PropertyReference hidden ( WS ):
 *   property=[properties::PropertyEntry|FQN];
 *
 **/

// property=[properties::PropertyEntry|FQN]
protected class PropertyReference_PropertyAssignment extends AssignmentToken  {
	
	public PropertyReference_PropertyAssignment(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPropertyReferenceAccess().getPropertyAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPropertyReferenceRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("property",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("property");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPropertyReferenceAccess().getPropertyPropertyEntryCrossReference_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getPropertyReferenceAccess().getPropertyPropertyEntryCrossReference_0(); 
				return obj;
			}
		}
		return null;
	}

}

/************ end Rule PropertyReference ****************/


/************ begin Rule PlainString ****************
 *
 * PlainString:
 *   value=ConstantValue;
 *
 **/

// value=ConstantValue
protected class PlainString_ValueAssignment extends AssignmentToken  {
	
	public PlainString_ValueAssignment(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPlainStringAccess().getValueAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPlainStringRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("value",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("value");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.DRC;
			element = grammarAccess.getPlainStringAccess().getValueConstantValueParserRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule PlainString ****************/


/************ begin Rule FileRef ****************
 *
 * FileRef hidden ( WS ):
 *   "file" filePath=MWEString;
 *
 **/

// "file" filePath=MWEString
protected class FileRef_Group extends GroupToken {
	
	public FileRef_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFileRefAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FileRef_FilePathAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getFileRefRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "file"
protected class FileRef_FileKeyword_0 extends KeywordToken  {
	
	public FileRef_FileKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFileRefAccess().getFileKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// filePath=MWEString
protected class FileRef_FilePathAssignment_1 extends AssignmentToken  {
	
	public FileRef_FilePathAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFileRefAccess().getFilePathAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MWEString_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("filePath",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("filePath");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getMWEStringRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getFileRefAccess().getFilePathMWEStringParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new FileRef_FileKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule FileRef ****************/












}
