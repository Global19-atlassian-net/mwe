/*
* generated by Xtext
*/
grammar InternalMWEConcept;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.eclipse.emf.mwe.concept.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.emf.mwe.concept.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import org.eclipse.emf.mwe.concept.services.MWEConceptGrammarAccess;

}

@parser::members {

 	private MWEConceptGrammarAccess grammarAccess;
 	
    public InternalMWEConceptParser(TokenStream input, IAstFactory factory, MWEConceptGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("org/eclipse/emf/mwe/concept/parser/antlr/internal/InternalMWEConcept.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "MWEFile";	
   	} 
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleMWEFile
entryRuleMWEFile returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getMWEFileRule(), currentNode); }
	 iv_ruleMWEFile=ruleMWEFile 
	 { $current=$iv_ruleMWEFile.current; } 
	 EOF 
;

// Rule MWEFile
ruleMWEFile returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getMWEFileAccess().getMWEFileAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getMWEFileAccess().getMWEFileAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMWEFileAccess().getImportsImportParserRuleCall_1_0(), currentNode); 
	    }
		lv_imports_1_0=ruleImport		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMWEFileRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"imports",
	        		lv_imports_1_0, 
	        		"Import", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMWEFileAccess().getRootComponentWithTypeParserRuleCall_2_0(), currentNode); 
	    }
		lv_root_2_0=ruleComponentWithType		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMWEFileRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"root",
	        		lv_root_2_0, 
	        		"ComponentWithType", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getImportRule(), currentNode); }
	 iv_ruleImport=ruleImport 
	 { $current=$iv_ruleImport.current; } 
	 EOF 
;

// Rule Import
ruleImport returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'import' 
    {
        createLeafNode(grammarAccess.getImportAccess().getImportKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getImportAccess().getImportedNamespaceImportedFQNParserRuleCall_1_0(), currentNode); 
	    }
		lv_importedNamespace_1_0=ruleImportedFQN		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getImportRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"importedNamespace",
	        		lv_importedNamespace_1_0, 
	        		"ImportedFQN", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getImportAccess().getSemicolonKeyword_2(), null); 
    }
)
;





// Entry rule entryRuleImportedFQN
entryRuleImportedFQN returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getImportedFQNRule(), currentNode); } 
	 iv_ruleImportedFQN=ruleImportedFQN 
	 { $current=$iv_ruleImportedFQN.current.getText(); }  
	 EOF 
;

// Rule ImportedFQN
ruleImportedFQN returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getImportedFQNAccess().getFQNParserRuleCall_0(), currentNode); 
    }
    this_FQN_0=ruleFQN    {
		$current.merge(this_FQN_0);
    }

    { 
        currentNode = currentNode.getParent();
    }
(
	kw='.*' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getImportedFQNAccess().getFullStopAsteriskKeyword_1(), null); 
    }
)?)
    ;





// Entry rule entryRuleSetting
entryRuleSetting returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSettingRule(), currentNode); }
	 iv_ruleSetting=ruleSetting 
	 { $current=$iv_ruleSetting.current; } 
	 EOF 
;

// Rule Setting
ruleSetting returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getSettingRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSettingAccess().getFeatureOperationCrossReference_0_0(), currentNode); 
	    }
		ruleValidID		{ 
	        currentNode = currentNode.getParent();
	    }

)
)((	'=' 
    {
        createLeafNode(grammarAccess.getSettingAccess().getEqualsSignKeyword_1_0_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSettingAccess().getValueAttributeListParserRuleCall_1_0_1_0(), currentNode); 
	    }
		lv_value_2_0=ruleAttributeList		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSettingRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_2_0, 
	        		"AttributeList", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSettingAccess().getValueComponentParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_value_3_0=ruleComponent		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSettingRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_3_0, 
	        		"Component", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)))
;





// Entry rule entryRuleComponent
entryRuleComponent returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getComponentRule(), currentNode); }
	 iv_ruleComponent=ruleComponent 
	 { $current=$iv_ruleComponent.current; } 
	 EOF 
;

// Rule Component
ruleComponent returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getComponentAccess().getComponentAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getComponentAccess().getComponentAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)((
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getComponentRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
		{ 
	        currentNode=createCompositeNode(grammarAccess.getComponentAccess().getTypeTypeCrossReference_1_0_0(), currentNode); 
	    }
		ruleFQN		{ 
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getComponentAccess().getFileRefFileRefParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_fileRef_2_0=ruleFileRef		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getComponentRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"fileRef",
	        		lv_fileRef_2_0, 
	        		"FileRef", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?(	'as' 
    {
        createLeafNode(grammarAccess.getComponentAccess().getAsKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getComponentAccess().getNameValidIDParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_name_4_0=ruleValidID		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getComponentRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_4_0, 
	        		"ValidID", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?(	';' 
    {
        createLeafNode(grammarAccess.getComponentAccess().getSemicolonKeyword_3_0(), null); 
    }

    |(	'{' 
    {
        createLeafNode(grammarAccess.getComponentAccess().getLeftCurlyBracketKeyword_3_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getComponentAccess().getElementsConfigurationElementParserRuleCall_3_1_1_0(), currentNode); 
	    }
		lv_elements_7_0=ruleConfigurationElement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getComponentRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"elements",
	        		lv_elements_7_0, 
	        		"ConfigurationElement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	'}' 
    {
        createLeafNode(grammarAccess.getComponentAccess().getRightCurlyBracketKeyword_3_1_2(), null); 
    }
)))
;





// Entry rule entryRuleComponentWithType
entryRuleComponentWithType returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getComponentWithTypeRule(), currentNode); }
	 iv_ruleComponentWithType=ruleComponentWithType 
	 { $current=$iv_ruleComponentWithType.current; } 
	 EOF 
;

// Rule ComponentWithType
ruleComponentWithType returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getComponentWithTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
		{ 
	        currentNode=createCompositeNode(grammarAccess.getComponentWithTypeAccess().getTypeTypeCrossReference_0_0(), currentNode); 
	    }
		ruleFQN		{ 
	        currentNode = currentNode.getParent();
	    }

)
)(	'as' 
    {
        createLeafNode(grammarAccess.getComponentWithTypeAccess().getAsKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getComponentWithTypeAccess().getNameValidIDParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_name_2_0=ruleValidID		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getComponentWithTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_2_0, 
	        		"ValidID", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?(	';' 
    {
        createLeafNode(grammarAccess.getComponentWithTypeAccess().getSemicolonKeyword_2_0(), null); 
    }

    |(	'{' 
    {
        createLeafNode(grammarAccess.getComponentWithTypeAccess().getLeftCurlyBracketKeyword_2_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getComponentWithTypeAccess().getElementsConfigurationElementParserRuleCall_2_1_1_0(), currentNode); 
	    }
		lv_elements_5_0=ruleConfigurationElement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getComponentWithTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"elements",
	        		lv_elements_5_0, 
	        		"ConfigurationElement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	'}' 
    {
        createLeafNode(grammarAccess.getComponentWithTypeAccess().getRightCurlyBracketKeyword_2_1_2(), null); 
    }
)))
;





// Entry rule entryRuleConfigurationElement
entryRuleConfigurationElement returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getConfigurationElementRule(), currentNode); }
	 iv_ruleConfigurationElement=ruleConfigurationElement 
	 { $current=$iv_ruleConfigurationElement.current; } 
	 EOF 
;

// Rule ConfigurationElement
ruleConfigurationElement returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getConfigurationElementAccess().getSettingParserRuleCall_0(), currentNode); 
    }
    this_Setting_0=ruleSetting
    { 
        $current = $this_Setting_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getConfigurationElementAccess().getPropertyParserRuleCall_1(), currentNode); 
    }
    this_Property_1=ruleProperty
    { 
        $current = $this_Property_1.current; 
        currentNode = currentNode.getParent();
    }
)
;







// Entry rule entryRuleAttributeList
entryRuleAttributeList returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAttributeListRule(), currentNode); }
	 iv_ruleAttributeList=ruleAttributeList 
	 { $current=$iv_ruleAttributeList.current; } 
	 EOF 
;

// Rule AttributeList
ruleAttributeList returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        currentNode=createCompositeNode(grammarAccess.getAttributeListAccess().getSimpleAttributeParserRuleCall_0_0(), currentNode); 
    }
    this_SimpleAttribute_0=ruleSimpleAttribute
    { 
        $current = $this_SimpleAttribute_0.current; 
        currentNode = currentNode.getParent();
    }
((
    { 
        temp=factory.create(grammarAccess.getAttributeListAccess().getAttributeListContentAction_0_1_0().getType().getClassifier());
        try {
        	factory.add(temp, "content", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getAttributeListAccess().getAttributeListContentAction_0_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	',' 
    {
        createLeafNode(grammarAccess.getAttributeListAccess().getCommaKeyword_0_1_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAttributeListAccess().getContentSimpleAttributeParserRuleCall_0_1_1_1_0(), currentNode); 
	    }
		lv_content_3_0=ruleSimpleAttribute		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"content",
	        		lv_content_3_0, 
	        		"SimpleAttribute", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))+)?)
    |(
    { 
        currentNode=createCompositeNode(grammarAccess.getAttributeListAccess().getReferenceParserRuleCall_1_0(), currentNode); 
    }
    this_Reference_4=ruleReference
    { 
        $current = $this_Reference_4.current; 
        currentNode = currentNode.getParent();
    }
((
    { 
        temp=factory.create(grammarAccess.getAttributeListAccess().getAttributeListContentAction_1_1_0().getType().getClassifier());
        try {
        	factory.add(temp, "content", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getAttributeListAccess().getAttributeListContentAction_1_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	',' 
    {
        createLeafNode(grammarAccess.getAttributeListAccess().getCommaKeyword_1_1_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAttributeListAccess().getContentReferenceParserRuleCall_1_1_1_1_0(), currentNode); 
	    }
		lv_content_7_0=ruleReference		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"content",
	        		lv_content_7_0, 
	        		"Reference", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))+)?))
;





// Entry rule entryRuleProperty
entryRuleProperty returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPropertyRule(), currentNode); }
	 iv_ruleProperty=ruleProperty 
	 { $current=$iv_ruleProperty.current; } 
	 EOF 
;

// Rule Property
ruleProperty returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getPropertyAccess().getSimplePropertyParserRuleCall_0(), currentNode); 
    }
    this_SimpleProperty_0=ruleSimpleProperty
    { 
        $current = $this_SimpleProperty_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getPropertyAccess().getPropertyFileParserRuleCall_1(), currentNode); 
    }
    this_PropertyFile_1=rulePropertyFile
    { 
        $current = $this_PropertyFile_1.current; 
        currentNode = currentNode.getParent();
    }
)
;







// Entry rule entryRuleSimpleProperty
entryRuleSimpleProperty returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSimplePropertyRule(), currentNode); }
	 iv_ruleSimpleProperty=ruleSimpleProperty 
	 { $current=$iv_ruleSimpleProperty.current; } 
	 EOF 
;

// Rule SimpleProperty
ruleSimpleProperty returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'property' 
    {
        createLeafNode(grammarAccess.getSimplePropertyAccess().getPropertyKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSimplePropertyAccess().getNameFQNParserRuleCall_1_0(), currentNode); 
	    }
		lv_name_1_0=ruleFQN		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSimplePropertyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"FQN", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		lv_delimiter_2_0=	'=' 
    {
        createLeafNode(grammarAccess.getSimplePropertyAccess().getDelimiterEqualsSignKeyword_2_0(), "delimiter"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSimplePropertyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "delimiter", lv_delimiter_2_0, "=", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSimplePropertyAccess().getValueMWEStringParserRuleCall_3_0(), currentNode); 
	    }
		lv_value_3_0=ruleMWEString		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSimplePropertyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_3_0, 
	        		"MWEString", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRulePropertyFile
entryRulePropertyFile returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPropertyFileRule(), currentNode); }
	 iv_rulePropertyFile=rulePropertyFile 
	 { $current=$iv_rulePropertyFile.current; } 
	 EOF 
;

// Rule PropertyFile
rulePropertyFile returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'property' 
    {
        createLeafNode(grammarAccess.getPropertyFileAccess().getPropertyKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPropertyFileAccess().getFileRefFileRefParserRuleCall_1_0(), currentNode); 
	    }
		lv_fileRef_1_0=ruleFileRef		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPropertyFileRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"fileRef",
	        		lv_fileRef_1_0, 
	        		"FileRef", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleAttribute
entryRuleAttribute returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAttributeRule(), currentNode); }
	 iv_ruleAttribute=ruleAttribute 
	 { $current=$iv_ruleAttribute.current; } 
	 EOF 
;

// Rule Attribute
ruleAttribute returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getAttributeAccess().getSimpleAttributeParserRuleCall_0(), currentNode); 
    }
    this_SimpleAttribute_0=ruleSimpleAttribute
    { 
        $current = $this_SimpleAttribute_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAttributeAccess().getReferenceParserRuleCall_1(), currentNode); 
    }
    this_Reference_1=ruleReference
    { 
        $current = $this_Reference_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleSimpleAttribute
entryRuleSimpleAttribute returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSimpleAttributeRule(), currentNode); }
	 iv_ruleSimpleAttribute=ruleSimpleAttribute 
	 { $current=$iv_ruleSimpleAttribute.current; } 
	 EOF 
;

// Rule SimpleAttribute
ruleSimpleAttribute returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSimpleAttributeAccess().getValueMWEStringParserRuleCall_0(), currentNode); 
	    }
		lv_value_0_0=ruleMWEString		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSimpleAttributeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_0_0, 
	        		"MWEString", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
;





// Entry rule entryRuleReference
entryRuleReference returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getReferenceRule(), currentNode); }
	 iv_ruleReference=ruleReference 
	 { $current=$iv_ruleReference.current; } 
	 EOF 
;

// Rule Reference
ruleReference returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getReferenceAccess().getComponentComponentCrossReference_0(), "component"); 
	}

)
)
;





// Entry rule entryRuleValidID
entryRuleValidID returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getValidIDRule(), currentNode); } 
	 iv_ruleValidID=ruleValidID 
	 { $current=$iv_ruleValidID.current.getText(); }  
	 EOF 
;

// Rule ValidID
ruleValidID returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    createLeafNode(grammarAccess.getValidIDAccess().getIDTerminalRuleCall_0(), null); 
    }

    |
	kw='property' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getValidIDAccess().getPropertyKeyword_1(), null); 
    }

    |
	kw='file' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getValidIDAccess().getFileKeyword_2(), null); 
    }
)
    ;





// Entry rule entryRuleFQN
entryRuleFQN returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getFQNRule(), currentNode); } 
	 iv_ruleFQN=ruleFQN 
	 { $current=$iv_ruleFQN.current.getText(); }  
	 EOF 
;

// Rule FQN
ruleFQN returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getFQNAccess().getValidIDParserRuleCall_0(), currentNode); 
    }
    this_ValidID_0=ruleValidID    {
		$current.merge(this_ValidID_0);
    }

    { 
        currentNode = currentNode.getParent();
    }
(
	kw='.' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getFQNAccess().getFullStopKeyword_1_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getFQNAccess().getValidIDParserRuleCall_1_1(), currentNode); 
    }
    this_ValidID_2=ruleValidID    {
		$current.merge(this_ValidID_2);
    }

    { 
        currentNode = currentNode.getParent();
    }
)*)
    ;







// Entry rule entryRuleMWEString
entryRuleMWEString returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
	:
	{ currentNode = createCompositeNode(grammarAccess.getMWEStringRule(), currentNode); }
	 iv_ruleMWEString=ruleMWEString 
	 { $current=$iv_ruleMWEString.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule MWEString
ruleMWEString returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMWEStringAccess().getPartsBooleanParserRuleCall_0_0(), currentNode); 
	    }
		lv_parts_0_0=ruleBoolean		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMWEStringRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"parts",
	        		lv_parts_0_0, 
	        		"Boolean", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMWEStringAccess().getBeginSingleQuoteParserRuleCall_1_0_0(), currentNode); 
	    }
		lv_begin_1_0=ruleSingleQuote		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMWEStringRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"begin",
	        		lv_begin_1_0, 
	        		"SingleQuote", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMWEStringAccess().getPartsMWEStringPartParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_parts_2_0=ruleMWEStringPart		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMWEStringRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"parts",
	        		lv_parts_2_0, 
	        		"MWEStringPart", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMWEStringAccess().getEndSingleQuoteParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_end_3_0=ruleSingleQuote		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMWEStringRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"end",
	        		lv_end_3_0, 
	        		"SingleQuote", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMWEStringAccess().getBeginDoubleQuoteParserRuleCall_2_0_0(), currentNode); 
	    }
		lv_begin_4_0=ruleDoubleQuote		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMWEStringRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"begin",
	        		lv_begin_4_0, 
	        		"DoubleQuote", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMWEStringAccess().getPartsMWEStringPartParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_parts_5_0=ruleMWEStringPart		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMWEStringRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"parts",
	        		lv_parts_5_0, 
	        		"MWEStringPart", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMWEStringAccess().getEndDoubleQuoteParserRuleCall_2_2_0(), currentNode); 
	    }
		lv_end_6_0=ruleDoubleQuote		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMWEStringRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"end",
	        		lv_end_6_0, 
	        		"DoubleQuote", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)))
;
finally {
	myHiddenTokenState.restore();
}







// Entry rule entryRuleMWEStringPart
entryRuleMWEStringPart returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getMWEStringPartRule(), currentNode); }
	 iv_ruleMWEStringPart=ruleMWEStringPart 
	 { $current=$iv_ruleMWEStringPart.current; } 
	 EOF 
;

// Rule MWEStringPart
ruleMWEStringPart returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getMWEStringPartAccess().getReplaceableStringParserRuleCall_0(), currentNode); 
    }
    this_ReplaceableString_0=ruleReplaceableString
    { 
        $current = $this_ReplaceableString_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getMWEStringPartAccess().getPlainStringParserRuleCall_1(), currentNode); 
    }
    this_PlainString_1=rulePlainString
    { 
        $current = $this_PlainString_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleBoolean
entryRuleBoolean returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getBooleanRule(), currentNode); }
	 iv_ruleBoolean=ruleBoolean 
	 { $current=$iv_ruleBoolean.current; } 
	 EOF 
;

// Rule Boolean
ruleBoolean returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getBooleanAccess().getBooleanStringPartAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getBooleanAccess().getBooleanStringPartAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
(
		lv_value_1_1=	'true' 
    {
        createLeafNode(grammarAccess.getBooleanAccess().getValueTrueKeyword_1_0_0(), "value"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBooleanRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_1_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_value_1_2=	'false' 
    {
        createLeafNode(grammarAccess.getBooleanAccess().getValueFalseKeyword_1_0_1(), "value"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBooleanRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_1_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
))
;





// Entry rule entryRuleReplaceableString
entryRuleReplaceableString returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getReplaceableStringRule(), currentNode); }
	 iv_ruleReplaceableString=ruleReplaceableString 
	 { $current=$iv_ruleReplaceableString.current; } 
	 EOF 
;

// Rule ReplaceableString
ruleReplaceableString returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'${' 
    {
        createLeafNode(grammarAccess.getReplaceableStringAccess().getDollarSignLeftCurlyBracketKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getReplaceableStringAccess().getPropertyPropertyReferenceParserRuleCall_1_0(), currentNode); 
	    }
		lv_property_1_0=rulePropertyReference		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReplaceableStringRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"property",
	        		lv_property_1_0, 
	        		"PropertyReference", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'}' 
    {
        createLeafNode(grammarAccess.getReplaceableStringAccess().getRightCurlyBracketKeyword_2(), null); 
    }
)
;





// Entry rule entryRulePropertyReference
entryRulePropertyReference returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
	}
	:
	{ currentNode = createCompositeNode(grammarAccess.getPropertyReferenceRule(), currentNode); }
	 iv_rulePropertyReference=rulePropertyReference 
	 { $current=$iv_rulePropertyReference.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule PropertyReference
rulePropertyReference returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getPropertyReferenceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPropertyReferenceAccess().getPropertyPropertyEntryCrossReference_0(), currentNode); 
	    }
		ruleFQN		{ 
	        currentNode = currentNode.getParent();
	    }

)
)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRulePlainString
entryRulePlainString returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPlainStringRule(), currentNode); }
	 iv_rulePlainString=rulePlainString 
	 { $current=$iv_rulePlainString.current; } 
	 EOF 
;

// Rule PlainString
rulePlainString returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPlainStringAccess().getValueConstantValueParserRuleCall_0(), currentNode); 
	    }
		lv_value_0_0=ruleConstantValue		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPlainStringRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_0_0, 
	        		"ConstantValue", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
;





// Entry rule entryRuleFileRef
entryRuleFileRef returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
	}
	:
	{ currentNode = createCompositeNode(grammarAccess.getFileRefRule(), currentNode); }
	 iv_ruleFileRef=ruleFileRef 
	 { $current=$iv_ruleFileRef.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule FileRef
ruleFileRef returns [EObject current=null] 
    @init { @SuppressWarnings("unused") EObject temp=null; setCurrentLookahead(); resetLookahead(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'file' 
    {
        createLeafNode(grammarAccess.getFileRefAccess().getFileKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFileRefAccess().getFilePathMWEStringParserRuleCall_1_0(), currentNode); 
	    }
		lv_filePath_1_0=ruleMWEString		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFileRefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"filePath",
	        		lv_filePath_1_0, 
	        		"MWEString", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleConstantValue
entryRuleConstantValue returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getConstantValueRule(), currentNode); } 
	 iv_ruleConstantValue=ruleConstantValue 
	 { $current=$iv_ruleConstantValue.current.getText(); }  
	 EOF 
;

// Rule ConstantValue
ruleConstantValue returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(    this_WS_0=RULE_WS    {
		$current.merge(this_WS_0);
    }

    { 
    createLeafNode(grammarAccess.getConstantValueAccess().getWSTerminalRuleCall_0(), null); 
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getConstantValueAccess().getColonParserRuleCall_1(), currentNode); 
    }
    this_Colon_1=ruleColon    {
		$current.merge(this_Colon_1);
    }

    { 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getConstantValueAccess().getOpeningBraceParserRuleCall_2(), currentNode); 
    }
    this_OpeningBrace_2=ruleOpeningBrace    {
		$current.merge(this_OpeningBrace_2);
    }

    { 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getConstantValueAccess().getClosingBraceParserRuleCall_3(), currentNode); 
    }
    this_ClosingBrace_3=ruleClosingBrace    {
		$current.merge(this_ClosingBrace_3);
    }

    { 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getConstantValueAccess().getEscapedDoubleQuoteParserRuleCall_4(), currentNode); 
    }
    this_EscapedDoubleQuote_4=ruleEscapedDoubleQuote    {
		$current.merge(this_EscapedDoubleQuote_4);
    }

    { 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getConstantValueAccess().getEscapedSingleQuoteParserRuleCall_5(), currentNode); 
    }
    this_EscapedSingleQuote_5=ruleEscapedSingleQuote    {
		$current.merge(this_EscapedSingleQuote_5);
    }

    { 
        currentNode = currentNode.getParent();
    }

    |    this_ANY_OTHER_6=RULE_ANY_OTHER    {
		$current.merge(this_ANY_OTHER_6);
    }

    { 
    createLeafNode(grammarAccess.getConstantValueAccess().getANY_OTHERTerminalRuleCall_6(), null); 
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getConstantValueAccess().getEscapedBackslashParserRuleCall_7(), currentNode); 
    }
    this_EscapedBackslash_7=ruleEscapedBackslash    {
		$current.merge(this_EscapedBackslash_7);
    }

    { 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getConstantValueAccess().getValidIDParserRuleCall_8(), currentNode); 
    }
    this_ValidID_8=ruleValidID    {
		$current.merge(this_ValidID_8);
    }

    { 
        currentNode = currentNode.getParent();
    }

    |
	kw='true' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getConstantValueAccess().getTrueKeyword_9(), null); 
    }

    |
	kw='false' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getConstantValueAccess().getFalseKeyword_10(), null); 
    }

    |
	kw='=' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getConstantValueAccess().getEqualsSignKeyword_11(), null); 
    }

    |
	kw='import' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getConstantValueAccess().getImportKeyword_12(), null); 
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getConstantValueAccess().getDotParserRuleCall_13(), currentNode); 
    }
    this_Dot_13=ruleDot    {
		$current.merge(this_Dot_13);
    }

    { 
        currentNode = currentNode.getParent();
    }
)
    ;





// Entry rule entryRuleColon
entryRuleColon returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getColonRule(), currentNode); } 
	 iv_ruleColon=ruleColon 
	 { $current=$iv_ruleColon.current.getText(); }  
	 EOF 
;

// Rule Colon
ruleColon returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:

	kw=':' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getColonAccess().getColonKeyword(), null); 
    }

    ;





// Entry rule entryRuleDot
entryRuleDot returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDotRule(), currentNode); } 
	 iv_ruleDot=ruleDot 
	 { $current=$iv_ruleDot.current.getText(); }  
	 EOF 
;

// Rule Dot
ruleDot returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:

	kw='.' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getDotAccess().getFullStopKeyword(), null); 
    }

    ;





// Entry rule entryRuleSingleQuote
entryRuleSingleQuote returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSingleQuoteRule(), currentNode); } 
	 iv_ruleSingleQuote=ruleSingleQuote 
	 { $current=$iv_ruleSingleQuote.current.getText(); }  
	 EOF 
;

// Rule SingleQuote
ruleSingleQuote returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:

	kw='\'' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getSingleQuoteAccess().getApostropheKeyword(), null); 
    }

    ;





// Entry rule entryRuleEscapedSingleQuote
entryRuleEscapedSingleQuote returns [String current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
	:
	{ currentNode = createCompositeNode(grammarAccess.getEscapedSingleQuoteRule(), currentNode); } 
	 iv_ruleEscapedSingleQuote=ruleEscapedSingleQuote 
	 { $current=$iv_ruleEscapedSingleQuote.current.getText(); }  
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule EscapedSingleQuote
ruleEscapedSingleQuote returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getEscapedSingleQuoteAccess().getBackslashParserRuleCall_0(), currentNode); 
    }
    this_Backslash_0=ruleBackslash    {
		$current.merge(this_Backslash_0);
    }

    { 
        currentNode = currentNode.getParent();
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getEscapedSingleQuoteAccess().getSingleQuoteParserRuleCall_1(), currentNode); 
    }
    this_SingleQuote_1=ruleSingleQuote    {
		$current.merge(this_SingleQuote_1);
    }

    { 
        currentNode = currentNode.getParent();
    }
)
    ;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleDoubleQuote
entryRuleDoubleQuote returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDoubleQuoteRule(), currentNode); } 
	 iv_ruleDoubleQuote=ruleDoubleQuote 
	 { $current=$iv_ruleDoubleQuote.current.getText(); }  
	 EOF 
;

// Rule DoubleQuote
ruleDoubleQuote returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:

	kw='"' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getDoubleQuoteAccess().getQuotationMarkKeyword(), null); 
    }

    ;





// Entry rule entryRuleEscapedDoubleQuote
entryRuleEscapedDoubleQuote returns [String current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
	:
	{ currentNode = createCompositeNode(grammarAccess.getEscapedDoubleQuoteRule(), currentNode); } 
	 iv_ruleEscapedDoubleQuote=ruleEscapedDoubleQuote 
	 { $current=$iv_ruleEscapedDoubleQuote.current.getText(); }  
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule EscapedDoubleQuote
ruleEscapedDoubleQuote returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getEscapedDoubleQuoteAccess().getBackslashParserRuleCall_0(), currentNode); 
    }
    this_Backslash_0=ruleBackslash    {
		$current.merge(this_Backslash_0);
    }

    { 
        currentNode = currentNode.getParent();
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getEscapedDoubleQuoteAccess().getDoubleQuoteParserRuleCall_1(), currentNode); 
    }
    this_DoubleQuote_1=ruleDoubleQuote    {
		$current.merge(this_DoubleQuote_1);
    }

    { 
        currentNode = currentNode.getParent();
    }
)
    ;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleBackslash
entryRuleBackslash returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getBackslashRule(), currentNode); } 
	 iv_ruleBackslash=ruleBackslash 
	 { $current=$iv_ruleBackslash.current.getText(); }  
	 EOF 
;

// Rule Backslash
ruleBackslash returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:

	kw='\\' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getBackslashAccess().getReverseSolidusKeyword(), null); 
    }

    ;





// Entry rule entryRuleEscapedBackslash
entryRuleEscapedBackslash returns [String current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
	:
	{ currentNode = createCompositeNode(grammarAccess.getEscapedBackslashRule(), currentNode); } 
	 iv_ruleEscapedBackslash=ruleEscapedBackslash 
	 { $current=$iv_ruleEscapedBackslash.current.getText(); }  
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule EscapedBackslash
ruleEscapedBackslash returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getEscapedBackslashAccess().getBackslashParserRuleCall_0(), currentNode); 
    }
    this_Backslash_0=ruleBackslash    {
		$current.merge(this_Backslash_0);
    }

    { 
        currentNode = currentNode.getParent();
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getEscapedBackslashAccess().getBackslashParserRuleCall_1(), currentNode); 
    }
    this_Backslash_1=ruleBackslash    {
		$current.merge(this_Backslash_1);
    }

    { 
        currentNode = currentNode.getParent();
    }
)
    ;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleOpeningBrace
entryRuleOpeningBrace returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getOpeningBraceRule(), currentNode); } 
	 iv_ruleOpeningBrace=ruleOpeningBrace 
	 { $current=$iv_ruleOpeningBrace.current.getText(); }  
	 EOF 
;

// Rule OpeningBrace
ruleOpeningBrace returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:

	kw='{' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getOpeningBraceAccess().getLeftCurlyBracketKeyword(), null); 
    }

    ;





// Entry rule entryRuleClosingBrace
entryRuleClosingBrace returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getClosingBraceRule(), currentNode); } 
	 iv_ruleClosingBrace=ruleClosingBrace 
	 { $current=$iv_ruleClosingBrace.current.getText(); }  
	 EOF 
;

// Rule ClosingBrace
ruleClosingBrace returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:

	kw='}' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getClosingBraceAccess().getRightCurlyBracketKeyword(), null); 
    }

    ;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


