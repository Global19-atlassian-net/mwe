/**
 * <copyright>
 * </copyright>
 *
 * $Id: RuntimeItemProviderAdapterFactory.java,v 1.1 2009/02/15 20:02:55 bhunt Exp $
 */
package org.eclipse.emf.mwe.ewm.workflow.runtime.provider;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.common.util.ResourceLocator;
import org.eclipse.emf.edit.domain.EditingDomain;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ChildCreationExtenderManager;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IChildCreationExtender;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;
import org.eclipse.emf.mwe.ewm.workflow.provider.WorkflowEditPlugin;
import org.eclipse.emf.mwe.ewm.workflow.runtime.RuntimePackage;
import org.eclipse.emf.mwe.ewm.workflow.runtime.util.RuntimeAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class RuntimeItemProviderAdapterFactory extends RuntimeAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable, IChildCreationExtender
{
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This helps manage the child creation extenders.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChildCreationExtenderManager childCreationExtenderManager = new ChildCreationExtenderManager(WorkflowEditPlugin.INSTANCE, RuntimePackage.eNS_URI);

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public RuntimeItemProviderAdapterFactory()
	{
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.emf.mwe.ewm.workflow.runtime.WorkflowContext} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WorkflowContextItemProvider workflowContextItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.emf.mwe.ewm.workflow.runtime.WorkflowContext}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWorkflowContextAdapter()
	{
		if (workflowContextItemProvider == null)
		{
			workflowContextItemProvider = new WorkflowContextItemProvider(this);
		}

		return workflowContextItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.emf.mwe.ewm.workflow.runtime.WorkflowEngine} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WorkflowEngineItemProvider workflowEngineItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.emf.mwe.ewm.workflow.runtime.WorkflowEngine}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWorkflowEngineAdapter()
	{
		if (workflowEngineItemProvider == null)
		{
			workflowEngineItemProvider = new WorkflowEngineItemProvider(this);
		}

		return workflowEngineItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link java.util.Map.Entry} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WorkflowStateMapItemProvider workflowStateMapItemProvider;

	/**
	 * This creates an adapter for a {@link java.util.Map.Entry}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWorkflowStateMapAdapter()
	{
		if (workflowStateMapItemProvider == null)
		{
			workflowStateMapItemProvider = new WorkflowStateMapItemProvider(this);
		}

		return workflowStateMapItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link java.util.Map.Entry} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WorkflowParameterMapItemProvider workflowParameterMapItemProvider;

	/**
	 * This creates an adapter for a {@link java.util.Map.Entry}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWorkflowParameterMapAdapter()
	{
		if (workflowParameterMapItemProvider == null)
		{
			workflowParameterMapItemProvider = new WorkflowParameterMapItemProvider(this);
		}

		return workflowParameterMapItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.emf.mwe.ewm.workflow.runtime.WorkflowStateResolutionStrategy} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WorkflowStateResolutionStrategyItemProvider workflowStateResolutionStrategyItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.emf.mwe.ewm.workflow.runtime.WorkflowStateResolutionStrategy}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWorkflowStateResolutionStrategyAdapter()
	{
		if (workflowStateResolutionStrategyItemProvider == null)
		{
			workflowStateResolutionStrategyItemProvider = new WorkflowStateResolutionStrategyItemProvider(this);
		}

		return workflowStateResolutionStrategyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link java.lang.Runnable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WorkflowRunnableItemProvider workflowRunnableItemProvider;

	/**
	 * This creates an adapter for a {@link java.lang.Runnable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWorkflowRunnableAdapter()
	{
		if (workflowRunnableItemProvider == null)
		{
			workflowRunnableItemProvider = new WorkflowRunnableItemProvider(this);
		}

		return workflowRunnableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.emf.mwe.ewm.workflow.runtime.WorkflowRunner} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WorkflowRunnerItemProvider workflowRunnerItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.emf.mwe.ewm.workflow.runtime.WorkflowRunner}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWorkflowRunnerAdapter()
	{
		if (workflowRunnerItemProvider == null)
		{
			workflowRunnerItemProvider = new WorkflowRunnerItemProvider(this);
		}

		return workflowRunnerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.emf.mwe.ewm.workflow.runtime.WorkflowStateResetter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WorkflowStateResetterItemProvider workflowStateResetterItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.emf.mwe.ewm.workflow.runtime.WorkflowStateResetter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWorkflowStateResetterAdapter()
	{
		if (workflowStateResetterItemProvider == null)
		{
			workflowStateResetterItemProvider = new WorkflowStateResetterItemProvider(this);
		}

		return workflowStateResetterItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory()
	{
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory)
	{
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type)
	{
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type)
	{
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type)
	{
		if (isFactoryForType(type))
		{
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class) || (((Class<?>)type).isInstance(adapter)))
			{
				return adapter;
			}
		}

		return null;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public List<IChildCreationExtender> getChildCreationExtenders()
	{
		return childCreationExtenderManager.getChildCreationExtenders();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Collection<?> getNewChildDescriptors(Object object, EditingDomain editingDomain)
	{
		return childCreationExtenderManager.getNewChildDescriptors(object, editingDomain);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ResourceLocator getResourceLocator()
	{
		return childCreationExtenderManager;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener)
	{
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener)
	{
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification)
	{
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null)
		{
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose()
	{
		if (workflowContextItemProvider != null) workflowContextItemProvider.dispose();
		if (workflowEngineItemProvider != null) workflowEngineItemProvider.dispose();
		if (workflowStateMapItemProvider != null) workflowStateMapItemProvider.dispose();
		if (workflowParameterMapItemProvider != null) workflowParameterMapItemProvider.dispose();
		if (workflowStateResolutionStrategyItemProvider != null) workflowStateResolutionStrategyItemProvider.dispose();
		if (workflowRunnableItemProvider != null) workflowRunnableItemProvider.dispose();
		if (workflowRunnerItemProvider != null) workflowRunnerItemProvider.dispose();
		if (workflowStateResetterItemProvider != null) workflowStateResetterItemProvider.dispose();
	}

}
