/*
* generated by Xtext
*/
package org.eclipse.emf.mwe.properties.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.eclipse.emf.mwe.properties.services.MWEPropertiesGrammarAccess;

public class MWEPropertiesParser extends AbstractContentAssistParser {
	
	@Inject
	private MWEPropertiesGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.eclipse.emf.mwe.properties.contentassist.antlr.internal.InternalMWEPropertiesParser createParser() {
		org.eclipse.emf.mwe.properties.contentassist.antlr.internal.InternalMWEPropertiesParser result = new org.eclipse.emf.mwe.properties.contentassist.antlr.internal.InternalMWEPropertiesParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getNaturalLineAccess().getAlternatives(), "rule__NaturalLine__Alternatives");
					put(grammarAccess.getPropertyEntryAccess().getAlternatives_2(), "rule__PropertyEntry__Alternatives_2");
					put(grammarAccess.getDelimiterAccess().getAlternatives_1(), "rule__Delimiter__Alternatives_1");
					put(grammarAccess.getCompoundStringAccess().getAlternatives(), "rule__CompoundString__Alternatives");
					put(grammarAccess.getCompoundStringLeadingDelimiterAccess().getAlternatives(), "rule__CompoundStringLeadingDelimiter__Alternatives");
					put(grammarAccess.getNonWSConstantAccess().getAlternatives(), "rule__NonWSConstant__Alternatives");
					put(grammarAccess.getNonWsNonCommentConstantAccess().getAlternatives_1_0(), "rule__NonWsNonCommentConstant__Alternatives_1_0");
					put(grammarAccess.getKeyAccess().getAlternatives(), "rule__Key__Alternatives");
					put(grammarAccess.getBlankLineAccess().getGroup(), "rule__BlankLine__Group__0");
					put(grammarAccess.getPropertyCommentAccess().getGroup(), "rule__PropertyComment__Group__0");
					put(grammarAccess.getPropertyEntryAccess().getGroup(), "rule__PropertyEntry__Group__0");
					put(grammarAccess.getPropertyEntryAccess().getGroup_2_0(), "rule__PropertyEntry__Group_2_0__0");
					put(grammarAccess.getPropertyEntryAccess().getGroup_2_1(), "rule__PropertyEntry__Group_2_1__0");
					put(grammarAccess.getDelimiterAccess().getGroup(), "rule__Delimiter__Group__0");
					put(grammarAccess.getCompoundStringAccess().getGroup_0(), "rule__CompoundString__Group_0__0");
					put(grammarAccess.getCompoundStringAccess().getGroup_1(), "rule__CompoundString__Group_1__0");
					put(grammarAccess.getCompoundStringAccess().getGroup_1_1(), "rule__CompoundString__Group_1_1__0");
					put(grammarAccess.getCompoundStringLeadingDelimiterAccess().getGroup_0(), "rule__CompoundStringLeadingDelimiter__Group_0__0");
					put(grammarAccess.getCompoundStringLeadingDelimiterAccess().getGroup_1(), "rule__CompoundStringLeadingDelimiter__Group_1__0");
					put(grammarAccess.getCompoundStringLeadingDelimiterAccess().getGroup_1_1(), "rule__CompoundStringLeadingDelimiter__Group_1_1__0");
					put(grammarAccess.getCompoundStringPartLeadingDelimiterValueAccess().getGroup(), "rule__CompoundStringPartLeadingDelimiterValue__Group__0");
					put(grammarAccess.getCompoundStringPartLeadingDelimiterValueAccess().getGroup_1(), "rule__CompoundStringPartLeadingDelimiterValue__Group_1__0");
					put(grammarAccess.getCompoundStringPartValueAccess().getGroup(), "rule__CompoundStringPartValue__Group__0");
					put(grammarAccess.getCompoundStringPartValueAccess().getGroup_1(), "rule__CompoundStringPartValue__Group_1__0");
					put(grammarAccess.getNonWsNonCommentConstantAccess().getGroup(), "rule__NonWsNonCommentConstant__Group__0");
					put(grammarAccess.getNonWsNonCommentConstantAccess().getGroup_1(), "rule__NonWsNonCommentConstant__Group_1__0");
					put(grammarAccess.getFQNAccess().getGroup(), "rule__FQN__Group__0");
					put(grammarAccess.getFQNAccess().getGroup_1(), "rule__FQN__Group_1__0");
					put(grammarAccess.getPropertyFileAccess().getEntriesAssignment(), "rule__PropertyFile__EntriesAssignment");
					put(grammarAccess.getPropertyCommentAccess().getValueAssignment_1(), "rule__PropertyComment__ValueAssignment_1");
					put(grammarAccess.getPropertyEntryAccess().getNameAssignment_1(), "rule__PropertyEntry__NameAssignment_1");
					put(grammarAccess.getPropertyEntryAccess().getDelimiterAssignment_2_0_0(), "rule__PropertyEntry__DelimiterAssignment_2_0_0");
					put(grammarAccess.getPropertyEntryAccess().getValueAssignment_2_0_1(), "rule__PropertyEntry__ValueAssignment_2_0_1");
					put(grammarAccess.getPropertyEntryAccess().getDelimiterAssignment_2_1_0(), "rule__PropertyEntry__DelimiterAssignment_2_1_0");
					put(grammarAccess.getPropertyEntryAccess().getValueAssignment_2_1_1(), "rule__PropertyEntry__ValueAssignment_2_1_1");
					put(grammarAccess.getCompoundStringAccess().getPartsAssignment_1_0(), "rule__CompoundString__PartsAssignment_1_0");
					put(grammarAccess.getCompoundStringAccess().getPartsAssignment_1_1_3(), "rule__CompoundString__PartsAssignment_1_1_3");
					put(grammarAccess.getCompoundStringLeadingDelimiterAccess().getPartsAssignment_1_0(), "rule__CompoundStringLeadingDelimiter__PartsAssignment_1_0");
					put(grammarAccess.getCompoundStringLeadingDelimiterAccess().getPartsAssignment_1_1_3(), "rule__CompoundStringLeadingDelimiter__PartsAssignment_1_1_3");
					put(grammarAccess.getCompoundStringPartLeadingDelimiterAccess().getValueAssignment(), "rule__CompoundStringPartLeadingDelimiter__ValueAssignment");
					put(grammarAccess.getCompoundStringPartAccess().getValueAssignment(), "rule__CompoundStringPart__ValueAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.eclipse.emf.mwe.properties.contentassist.antlr.internal.InternalMWEPropertiesParser typedParser = (org.eclipse.emf.mwe.properties.contentassist.antlr.internal.InternalMWEPropertiesParser) parser;
			typedParser.entryRulePropertyFile();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] {  };
	}
	
	public MWEPropertiesGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(MWEPropertiesGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
