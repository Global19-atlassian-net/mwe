/*
* generated by Xtext
*/
grammar InternalMWEProperties;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.eclipse.emf.mwe.properties.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.common.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.eclipse.emf.mwe.properties.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.common.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.emf.mwe.properties.services.MWEPropertiesGrammarAccess;

}

@parser::members {
 
 	private MWEPropertiesGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(MWEPropertiesGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRulePropertyFile
entryRulePropertyFile 
:
{ before(grammarAccess.getPropertyFileRule()); }
	 rulePropertyFile
{ after(grammarAccess.getPropertyFileRule()); } 
	 EOF 
;

// Rule PropertyFile
rulePropertyFile 
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPropertyFileAccess().getEntriesAssignment()); }
(rule__PropertyFile__EntriesAssignment)*
{ after(grammarAccess.getPropertyFileAccess().getEntriesAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNaturalLine
entryRuleNaturalLine 
:
{ before(grammarAccess.getNaturalLineRule()); }
	 ruleNaturalLine
{ after(grammarAccess.getNaturalLineRule()); } 
	 EOF 
;

// Rule NaturalLine
ruleNaturalLine 
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNaturalLineAccess().getAlternatives()); }
(rule__NaturalLine__Alternatives)
{ after(grammarAccess.getNaturalLineAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBlankLine
entryRuleBlankLine 
:
{ before(grammarAccess.getBlankLineRule()); }
	 ruleBlankLine
{ after(grammarAccess.getBlankLineRule()); } 
	 EOF 
;

// Rule BlankLine
ruleBlankLine 
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBlankLineAccess().getGroup()); }
(rule__BlankLine__Group__0)
{ after(grammarAccess.getBlankLineAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePropertyComment
entryRulePropertyComment 
:
{ before(grammarAccess.getPropertyCommentRule()); }
	 rulePropertyComment
{ after(grammarAccess.getPropertyCommentRule()); } 
	 EOF 
;

// Rule PropertyComment
rulePropertyComment 
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPropertyCommentAccess().getGroup()); }
(rule__PropertyComment__Group__0)
{ after(grammarAccess.getPropertyCommentAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePropertyEntry
entryRulePropertyEntry 
:
{ before(grammarAccess.getPropertyEntryRule()); }
	 rulePropertyEntry
{ after(grammarAccess.getPropertyEntryRule()); } 
	 EOF 
;

// Rule PropertyEntry
rulePropertyEntry 
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPropertyEntryAccess().getGroup()); }
(rule__PropertyEntry__Group__0)
{ after(grammarAccess.getPropertyEntryAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDelimiter
entryRuleDelimiter 
:
{ before(grammarAccess.getDelimiterRule()); }
	 ruleDelimiter
{ after(grammarAccess.getDelimiterRule()); } 
	 EOF 
;

// Rule Delimiter
ruleDelimiter 
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDelimiterAccess().getGroup()); }
(rule__Delimiter__Group__0)
{ after(grammarAccess.getDelimiterAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSimpleDelimiter
entryRuleSimpleDelimiter 
:
{ before(grammarAccess.getSimpleDelimiterRule()); }
	 ruleSimpleDelimiter
{ after(grammarAccess.getSimpleDelimiterRule()); } 
	 EOF 
;

// Rule SimpleDelimiter
ruleSimpleDelimiter 
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSimpleDelimiterAccess().getWSTerminalRuleCall()); }
	RULE_WS
{ after(grammarAccess.getSimpleDelimiterAccess().getWSTerminalRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCompoundString
entryRuleCompoundString 
:
{ before(grammarAccess.getCompoundStringRule()); }
	 ruleCompoundString
{ after(grammarAccess.getCompoundStringRule()); } 
	 EOF 
;

// Rule CompoundString
ruleCompoundString 
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCompoundStringAccess().getAlternatives()); }
(rule__CompoundString__Alternatives)
{ after(grammarAccess.getCompoundStringAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCompoundStringLeadingDelimiter
entryRuleCompoundStringLeadingDelimiter 
:
{ before(grammarAccess.getCompoundStringLeadingDelimiterRule()); }
	 ruleCompoundStringLeadingDelimiter
{ after(grammarAccess.getCompoundStringLeadingDelimiterRule()); } 
	 EOF 
;

// Rule CompoundStringLeadingDelimiter
ruleCompoundStringLeadingDelimiter 
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCompoundStringLeadingDelimiterAccess().getAlternatives()); }
(rule__CompoundStringLeadingDelimiter__Alternatives)
{ after(grammarAccess.getCompoundStringLeadingDelimiterAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCompoundStringPartLeadingDelimiter
entryRuleCompoundStringPartLeadingDelimiter 
:
{ before(grammarAccess.getCompoundStringPartLeadingDelimiterRule()); }
	 ruleCompoundStringPartLeadingDelimiter
{ after(grammarAccess.getCompoundStringPartLeadingDelimiterRule()); } 
	 EOF 
;

// Rule CompoundStringPartLeadingDelimiter
ruleCompoundStringPartLeadingDelimiter 
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCompoundStringPartLeadingDelimiterAccess().getValueAssignment()); }
(rule__CompoundStringPartLeadingDelimiter__ValueAssignment)
{ after(grammarAccess.getCompoundStringPartLeadingDelimiterAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCompoundStringPartLeadingDelimiterValue
entryRuleCompoundStringPartLeadingDelimiterValue 
:
{ before(grammarAccess.getCompoundStringPartLeadingDelimiterValueRule()); }
	 ruleCompoundStringPartLeadingDelimiterValue
{ after(grammarAccess.getCompoundStringPartLeadingDelimiterValueRule()); } 
	 EOF 
;

// Rule CompoundStringPartLeadingDelimiterValue
ruleCompoundStringPartLeadingDelimiterValue 
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCompoundStringPartLeadingDelimiterValueAccess().getGroup()); }
(rule__CompoundStringPartLeadingDelimiterValue__Group__0)
{ after(grammarAccess.getCompoundStringPartLeadingDelimiterValueAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCompoundStringPart
entryRuleCompoundStringPart 
:
{ before(grammarAccess.getCompoundStringPartRule()); }
	 ruleCompoundStringPart
{ after(grammarAccess.getCompoundStringPartRule()); } 
	 EOF 
;

// Rule CompoundStringPart
ruleCompoundStringPart 
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCompoundStringPartAccess().getValueAssignment()); }
(rule__CompoundStringPart__ValueAssignment)
{ after(grammarAccess.getCompoundStringPartAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCompoundStringPartValue
entryRuleCompoundStringPartValue 
:
{ before(grammarAccess.getCompoundStringPartValueRule()); }
	 ruleCompoundStringPartValue
{ after(grammarAccess.getCompoundStringPartValueRule()); } 
	 EOF 
;

// Rule CompoundStringPartValue
ruleCompoundStringPartValue 
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCompoundStringPartValueAccess().getGroup()); }
(rule__CompoundStringPartValue__Group__0)
{ after(grammarAccess.getCompoundStringPartValueAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNonWSConstant
entryRuleNonWSConstant 
:
{ before(grammarAccess.getNonWSConstantRule()); }
	 ruleNonWSConstant
{ after(grammarAccess.getNonWSConstantRule()); } 
	 EOF 
;

// Rule NonWSConstant
ruleNonWSConstant 
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNonWSConstantAccess().getAlternatives()); }
(rule__NonWSConstant__Alternatives)
{ after(grammarAccess.getNonWSConstantAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNonWsNonCommentConstant
entryRuleNonWsNonCommentConstant 
:
{ before(grammarAccess.getNonWsNonCommentConstantRule()); }
	 ruleNonWsNonCommentConstant
{ after(grammarAccess.getNonWsNonCommentConstantRule()); } 
	 EOF 
;

// Rule NonWsNonCommentConstant
ruleNonWsNonCommentConstant 
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNonWsNonCommentConstantAccess().getGroup()); }
(rule__NonWsNonCommentConstant__Group__0)
{ after(grammarAccess.getNonWsNonCommentConstantAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleKey
entryRuleKey 
:
{ before(grammarAccess.getKeyRule()); }
	 ruleKey
{ after(grammarAccess.getKeyRule()); } 
	 EOF 
;

// Rule Key
ruleKey 
    @init {
		int stackSize = keepStackSize();
    }
	:
(
(
{ before(grammarAccess.getKeyAccess().getAlternatives()); }
(rule__Key__Alternatives)
{ after(grammarAccess.getKeyAccess().getAlternatives()); }
)
(
{ before(grammarAccess.getKeyAccess().getAlternatives()); }
(rule__Key__Alternatives)*
{ after(grammarAccess.getKeyAccess().getAlternatives()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFQN
entryRuleFQN 
:
{ before(grammarAccess.getFQNRule()); }
	 ruleFQN
{ after(grammarAccess.getFQNRule()); } 
	 EOF 
;

// Rule FQN
ruleFQN 
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFQNAccess().getGroup()); }
(rule__FQN__Group__0)
{ after(grammarAccess.getFQNAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__NaturalLine__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNaturalLineAccess().getBlankLineParserRuleCall_0()); }
	ruleBlankLine
{ after(grammarAccess.getNaturalLineAccess().getBlankLineParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getNaturalLineAccess().getPropertyCommentParserRuleCall_1()); }
	rulePropertyComment
{ after(grammarAccess.getNaturalLineAccess().getPropertyCommentParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getNaturalLineAccess().getPropertyEntryParserRuleCall_2()); }
	rulePropertyEntry
{ after(grammarAccess.getNaturalLineAccess().getPropertyEntryParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyEntry__Alternatives_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyEntryAccess().getGroup_2_0()); }
(rule__PropertyEntry__Group_2_0__0)
{ after(grammarAccess.getPropertyEntryAccess().getGroup_2_0()); }
)

    |(
{ before(grammarAccess.getPropertyEntryAccess().getGroup_2_1()); }
(rule__PropertyEntry__Group_2_1__0)
{ after(grammarAccess.getPropertyEntryAccess().getGroup_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Delimiter__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDelimiterAccess().getEqualsSignKeyword_1_0()); }

	'=' 

{ after(grammarAccess.getDelimiterAccess().getEqualsSignKeyword_1_0()); }
)

    |(
{ before(grammarAccess.getDelimiterAccess().getColonKeyword_1_1()); }

	':' 

{ after(grammarAccess.getDelimiterAccess().getColonKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CompoundString__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompoundStringAccess().getGroup_0()); }
(rule__CompoundString__Group_0__0)
{ after(grammarAccess.getCompoundStringAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getCompoundStringAccess().getGroup_1()); }
(rule__CompoundString__Group_1__0)
{ after(grammarAccess.getCompoundStringAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CompoundStringLeadingDelimiter__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompoundStringLeadingDelimiterAccess().getGroup_0()); }
(rule__CompoundStringLeadingDelimiter__Group_0__0)
{ after(grammarAccess.getCompoundStringLeadingDelimiterAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getCompoundStringLeadingDelimiterAccess().getGroup_1()); }
(rule__CompoundStringLeadingDelimiter__Group_1__0)
{ after(grammarAccess.getCompoundStringLeadingDelimiterAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NonWSConstant__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNonWSConstantAccess().getNonWsNonCommentConstantParserRuleCall_0()); }
	ruleNonWsNonCommentConstant
{ after(grammarAccess.getNonWSConstantAccess().getNonWsNonCommentConstantParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getNonWSConstantAccess().getSL_COMMENTTerminalRuleCall_1()); }
	RULE_SL_COMMENT
{ after(grammarAccess.getNonWSConstantAccess().getSL_COMMENTTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NonWsNonCommentConstant__Alternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNonWsNonCommentConstantAccess().getColonKeyword_1_0_0()); }

	':' 

{ after(grammarAccess.getNonWsNonCommentConstantAccess().getColonKeyword_1_0_0()); }
)

    |(
{ before(grammarAccess.getNonWsNonCommentConstantAccess().getEqualsSignKeyword_1_0_1()); }

	'=' 

{ after(grammarAccess.getNonWsNonCommentConstantAccess().getEqualsSignKeyword_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Key__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKeyAccess().getFQNParserRuleCall_0()); }
	ruleFQN
{ after(grammarAccess.getKeyAccess().getFQNParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getKeyAccess().getReverseSolidusColonKeyword_1()); }

	'\\:' 

{ after(grammarAccess.getKeyAccess().getReverseSolidusColonKeyword_1()); }
)

    |(
{ before(grammarAccess.getKeyAccess().getReverseSolidusEqualsSignKeyword_2()); }

	'\\=' 

{ after(grammarAccess.getKeyAccess().getReverseSolidusEqualsSignKeyword_2()); }
)

    |(
{ before(grammarAccess.getKeyAccess().getSolidusKeyword_3()); }

	'/' 

{ after(grammarAccess.getKeyAccess().getSolidusKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__BlankLine__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlankLineAccess().getBlankLineAction_0()); }
(

)
{ after(grammarAccess.getBlankLineAccess().getBlankLineAction_0()); }
)

	rule__BlankLine__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__BlankLine__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlankLineAccess().getWSTerminalRuleCall_1()); }
(	RULE_WS)?
{ after(grammarAccess.getBlankLineAccess().getWSTerminalRuleCall_1()); }
)

	rule__BlankLine__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__BlankLine__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlankLineAccess().getLINE_TERMINATORTerminalRuleCall_2()); }
	RULE_LINE_TERMINATOR
{ after(grammarAccess.getBlankLineAccess().getLINE_TERMINATORTerminalRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__PropertyComment__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyCommentAccess().getWSTerminalRuleCall_0()); }
(	RULE_WS)?
{ after(grammarAccess.getPropertyCommentAccess().getWSTerminalRuleCall_0()); }
)

	rule__PropertyComment__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__PropertyComment__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyCommentAccess().getValueAssignment_1()); }
(rule__PropertyComment__ValueAssignment_1)
{ after(grammarAccess.getPropertyCommentAccess().getValueAssignment_1()); }
)

	rule__PropertyComment__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__PropertyComment__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyCommentAccess().getLINE_TERMINATORTerminalRuleCall_2()); }
	RULE_LINE_TERMINATOR
{ after(grammarAccess.getPropertyCommentAccess().getLINE_TERMINATORTerminalRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__PropertyEntry__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyEntryAccess().getWSTerminalRuleCall_0()); }
(	RULE_WS)?
{ after(grammarAccess.getPropertyEntryAccess().getWSTerminalRuleCall_0()); }
)

	rule__PropertyEntry__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__PropertyEntry__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyEntryAccess().getNameAssignment_1()); }
(rule__PropertyEntry__NameAssignment_1)
{ after(grammarAccess.getPropertyEntryAccess().getNameAssignment_1()); }
)

	rule__PropertyEntry__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__PropertyEntry__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyEntryAccess().getAlternatives_2()); }
(rule__PropertyEntry__Alternatives_2)
{ after(grammarAccess.getPropertyEntryAccess().getAlternatives_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__PropertyEntry__Group_2_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyEntryAccess().getDelimiterAssignment_2_0_0()); }
(rule__PropertyEntry__DelimiterAssignment_2_0_0)
{ after(grammarAccess.getPropertyEntryAccess().getDelimiterAssignment_2_0_0()); }
)

	rule__PropertyEntry__Group_2_0__1
;
finally {
	restoreStackSize(stackSize);
}


rule__PropertyEntry__Group_2_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyEntryAccess().getValueAssignment_2_0_1()); }
(rule__PropertyEntry__ValueAssignment_2_0_1)
{ after(grammarAccess.getPropertyEntryAccess().getValueAssignment_2_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PropertyEntry__Group_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyEntryAccess().getDelimiterAssignment_2_1_0()); }
(rule__PropertyEntry__DelimiterAssignment_2_1_0)
{ after(grammarAccess.getPropertyEntryAccess().getDelimiterAssignment_2_1_0()); }
)

	rule__PropertyEntry__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__PropertyEntry__Group_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyEntryAccess().getValueAssignment_2_1_1()); }
(rule__PropertyEntry__ValueAssignment_2_1_1)
{ after(grammarAccess.getPropertyEntryAccess().getValueAssignment_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Delimiter__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDelimiterAccess().getWSTerminalRuleCall_0()); }
(	RULE_WS)?
{ after(grammarAccess.getDelimiterAccess().getWSTerminalRuleCall_0()); }
)

	rule__Delimiter__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Delimiter__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDelimiterAccess().getAlternatives_1()); }
(rule__Delimiter__Alternatives_1)
{ after(grammarAccess.getDelimiterAccess().getAlternatives_1()); }
)

	rule__Delimiter__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__Delimiter__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDelimiterAccess().getWSTerminalRuleCall_2()); }
(	RULE_WS)?
{ after(grammarAccess.getDelimiterAccess().getWSTerminalRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__CompoundString__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompoundStringAccess().getCompoundStringAction_0_0()); }
(

)
{ after(grammarAccess.getCompoundStringAccess().getCompoundStringAction_0_0()); }
)

	rule__CompoundString__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}


rule__CompoundString__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompoundStringAccess().getLINE_TERMINATORTerminalRuleCall_0_1()); }
	RULE_LINE_TERMINATOR
{ after(grammarAccess.getCompoundStringAccess().getLINE_TERMINATORTerminalRuleCall_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__CompoundString__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompoundStringAccess().getPartsAssignment_1_0()); }
(rule__CompoundString__PartsAssignment_1_0)
{ after(grammarAccess.getCompoundStringAccess().getPartsAssignment_1_0()); }
)

	rule__CompoundString__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__CompoundString__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompoundStringAccess().getGroup_1_1()); }
(rule__CompoundString__Group_1_1__0)*
{ after(grammarAccess.getCompoundStringAccess().getGroup_1_1()); }
)

	rule__CompoundString__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}


rule__CompoundString__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompoundStringAccess().getLINE_TERMINATORTerminalRuleCall_1_2()); }
	RULE_LINE_TERMINATOR
{ after(grammarAccess.getCompoundStringAccess().getLINE_TERMINATORTerminalRuleCall_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__CompoundString__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompoundStringAccess().getReverseSolidusKeyword_1_1_0()); }

	'\\' 

{ after(grammarAccess.getCompoundStringAccess().getReverseSolidusKeyword_1_1_0()); }
)

	rule__CompoundString__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__CompoundString__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompoundStringAccess().getLINE_TERMINATORTerminalRuleCall_1_1_1()); }
	RULE_LINE_TERMINATOR
{ after(grammarAccess.getCompoundStringAccess().getLINE_TERMINATORTerminalRuleCall_1_1_1()); }
)

	rule__CompoundString__Group_1_1__2
;
finally {
	restoreStackSize(stackSize);
}


rule__CompoundString__Group_1_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompoundStringAccess().getWSTerminalRuleCall_1_1_2()); }
(	RULE_WS)?
{ after(grammarAccess.getCompoundStringAccess().getWSTerminalRuleCall_1_1_2()); }
)

	rule__CompoundString__Group_1_1__3
;
finally {
	restoreStackSize(stackSize);
}


rule__CompoundString__Group_1_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompoundStringAccess().getPartsAssignment_1_1_3()); }
(rule__CompoundString__PartsAssignment_1_1_3)
{ after(grammarAccess.getCompoundStringAccess().getPartsAssignment_1_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__CompoundStringLeadingDelimiter__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompoundStringLeadingDelimiterAccess().getEmptyPropertyValueAction_0_0()); }
(

)
{ after(grammarAccess.getCompoundStringLeadingDelimiterAccess().getEmptyPropertyValueAction_0_0()); }
)

	rule__CompoundStringLeadingDelimiter__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}


rule__CompoundStringLeadingDelimiter__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompoundStringLeadingDelimiterAccess().getLINE_TERMINATORTerminalRuleCall_0_1()); }
	RULE_LINE_TERMINATOR
{ after(grammarAccess.getCompoundStringLeadingDelimiterAccess().getLINE_TERMINATORTerminalRuleCall_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__CompoundStringLeadingDelimiter__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompoundStringLeadingDelimiterAccess().getPartsAssignment_1_0()); }
(rule__CompoundStringLeadingDelimiter__PartsAssignment_1_0)
{ after(grammarAccess.getCompoundStringLeadingDelimiterAccess().getPartsAssignment_1_0()); }
)

	rule__CompoundStringLeadingDelimiter__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__CompoundStringLeadingDelimiter__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompoundStringLeadingDelimiterAccess().getGroup_1_1()); }
(rule__CompoundStringLeadingDelimiter__Group_1_1__0)*
{ after(grammarAccess.getCompoundStringLeadingDelimiterAccess().getGroup_1_1()); }
)

	rule__CompoundStringLeadingDelimiter__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}


rule__CompoundStringLeadingDelimiter__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompoundStringLeadingDelimiterAccess().getLINE_TERMINATORTerminalRuleCall_1_2()); }
	RULE_LINE_TERMINATOR
{ after(grammarAccess.getCompoundStringLeadingDelimiterAccess().getLINE_TERMINATORTerminalRuleCall_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__CompoundStringLeadingDelimiter__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompoundStringLeadingDelimiterAccess().getReverseSolidusKeyword_1_1_0()); }

	'\\' 

{ after(grammarAccess.getCompoundStringLeadingDelimiterAccess().getReverseSolidusKeyword_1_1_0()); }
)

	rule__CompoundStringLeadingDelimiter__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__CompoundStringLeadingDelimiter__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompoundStringLeadingDelimiterAccess().getLINE_TERMINATORTerminalRuleCall_1_1_1()); }
	RULE_LINE_TERMINATOR
{ after(grammarAccess.getCompoundStringLeadingDelimiterAccess().getLINE_TERMINATORTerminalRuleCall_1_1_1()); }
)

	rule__CompoundStringLeadingDelimiter__Group_1_1__2
;
finally {
	restoreStackSize(stackSize);
}


rule__CompoundStringLeadingDelimiter__Group_1_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompoundStringLeadingDelimiterAccess().getWSTerminalRuleCall_1_1_2()); }
(	RULE_WS)?
{ after(grammarAccess.getCompoundStringLeadingDelimiterAccess().getWSTerminalRuleCall_1_1_2()); }
)

	rule__CompoundStringLeadingDelimiter__Group_1_1__3
;
finally {
	restoreStackSize(stackSize);
}


rule__CompoundStringLeadingDelimiter__Group_1_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompoundStringLeadingDelimiterAccess().getPartsAssignment_1_1_3()); }
(rule__CompoundStringLeadingDelimiter__PartsAssignment_1_1_3)
{ after(grammarAccess.getCompoundStringLeadingDelimiterAccess().getPartsAssignment_1_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__CompoundStringPartLeadingDelimiterValue__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompoundStringPartLeadingDelimiterValueAccess().getNonWSConstantParserRuleCall_0()); }
	ruleNonWSConstant
{ after(grammarAccess.getCompoundStringPartLeadingDelimiterValueAccess().getNonWSConstantParserRuleCall_0()); }
)

	rule__CompoundStringPartLeadingDelimiterValue__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__CompoundStringPartLeadingDelimiterValue__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompoundStringPartLeadingDelimiterValueAccess().getGroup_1()); }
(rule__CompoundStringPartLeadingDelimiterValue__Group_1__0)*
{ after(grammarAccess.getCompoundStringPartLeadingDelimiterValueAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__CompoundStringPartLeadingDelimiterValue__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompoundStringPartLeadingDelimiterValueAccess().getWSTerminalRuleCall_1_0()); }
	RULE_WS
{ after(grammarAccess.getCompoundStringPartLeadingDelimiterValueAccess().getWSTerminalRuleCall_1_0()); }
)

	rule__CompoundStringPartLeadingDelimiterValue__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__CompoundStringPartLeadingDelimiterValue__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompoundStringPartLeadingDelimiterValueAccess().getNonWSConstantParserRuleCall_1_1()); }
(	ruleNonWSConstant)?
{ after(grammarAccess.getCompoundStringPartLeadingDelimiterValueAccess().getNonWSConstantParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__CompoundStringPartValue__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompoundStringPartValueAccess().getKeyParserRuleCall_0()); }
	ruleKey
{ after(grammarAccess.getCompoundStringPartValueAccess().getKeyParserRuleCall_0()); }
)

	rule__CompoundStringPartValue__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__CompoundStringPartValue__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompoundStringPartValueAccess().getGroup_1()); }
(rule__CompoundStringPartValue__Group_1__0)*
{ after(grammarAccess.getCompoundStringPartValueAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__CompoundStringPartValue__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompoundStringPartValueAccess().getWSTerminalRuleCall_1_0()); }
	RULE_WS
{ after(grammarAccess.getCompoundStringPartValueAccess().getWSTerminalRuleCall_1_0()); }
)

	rule__CompoundStringPartValue__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__CompoundStringPartValue__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompoundStringPartValueAccess().getNonWSConstantParserRuleCall_1_1()); }
(	ruleNonWSConstant)?
{ after(grammarAccess.getCompoundStringPartValueAccess().getNonWSConstantParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NonWsNonCommentConstant__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNonWsNonCommentConstantAccess().getKeyParserRuleCall_0()); }
	ruleKey
{ after(grammarAccess.getNonWsNonCommentConstantAccess().getKeyParserRuleCall_0()); }
)

	rule__NonWsNonCommentConstant__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__NonWsNonCommentConstant__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNonWsNonCommentConstantAccess().getGroup_1()); }
(rule__NonWsNonCommentConstant__Group_1__0)*
{ after(grammarAccess.getNonWsNonCommentConstantAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NonWsNonCommentConstant__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNonWsNonCommentConstantAccess().getAlternatives_1_0()); }
(rule__NonWsNonCommentConstant__Alternatives_1_0)
{ after(grammarAccess.getNonWsNonCommentConstantAccess().getAlternatives_1_0()); }
)

	rule__NonWsNonCommentConstant__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__NonWsNonCommentConstant__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNonWsNonCommentConstantAccess().getKeyParserRuleCall_1_1()); }
(	ruleKey)?
{ after(grammarAccess.getNonWsNonCommentConstantAccess().getKeyParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FQN__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFQNAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getFQNAccess().getIDTerminalRuleCall_0()); }
)

	rule__FQN__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__FQN__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFQNAccess().getGroup_1()); }
(rule__FQN__Group_1__0)*
{ after(grammarAccess.getFQNAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FQN__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFQNAccess().getFullStopKeyword_1_0()); }

	'.' 

{ after(grammarAccess.getFQNAccess().getFullStopKeyword_1_0()); }
)

	rule__FQN__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__FQN__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFQNAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
{ after(grammarAccess.getFQNAccess().getIDTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PropertyFile__EntriesAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyFileAccess().getEntriesNaturalLineParserRuleCall_0()); }
	ruleNaturalLine{ after(grammarAccess.getPropertyFileAccess().getEntriesNaturalLineParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyComment__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyCommentAccess().getValueSL_COMMENTTerminalRuleCall_1_0()); }
	RULE_SL_COMMENT{ after(grammarAccess.getPropertyCommentAccess().getValueSL_COMMENTTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyEntry__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyEntryAccess().getNameKeyParserRuleCall_1_0()); }
	ruleKey{ after(grammarAccess.getPropertyEntryAccess().getNameKeyParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyEntry__DelimiterAssignment_2_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyEntryAccess().getDelimiterDelimiterParserRuleCall_2_0_0_0()); }
	ruleDelimiter{ after(grammarAccess.getPropertyEntryAccess().getDelimiterDelimiterParserRuleCall_2_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyEntry__ValueAssignment_2_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyEntryAccess().getValueCompoundStringLeadingDelimiterParserRuleCall_2_0_1_0()); }
	ruleCompoundStringLeadingDelimiter{ after(grammarAccess.getPropertyEntryAccess().getValueCompoundStringLeadingDelimiterParserRuleCall_2_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyEntry__DelimiterAssignment_2_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyEntryAccess().getDelimiterSimpleDelimiterParserRuleCall_2_1_0_0()); }
	ruleSimpleDelimiter{ after(grammarAccess.getPropertyEntryAccess().getDelimiterSimpleDelimiterParserRuleCall_2_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyEntry__ValueAssignment_2_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyEntryAccess().getValueCompoundStringParserRuleCall_2_1_1_0()); }
	ruleCompoundString{ after(grammarAccess.getPropertyEntryAccess().getValueCompoundStringParserRuleCall_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CompoundString__PartsAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompoundStringAccess().getPartsCompoundStringPartParserRuleCall_1_0_0()); }
	ruleCompoundStringPart{ after(grammarAccess.getCompoundStringAccess().getPartsCompoundStringPartParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CompoundString__PartsAssignment_1_1_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompoundStringAccess().getPartsCompoundStringPartLeadingDelimiterParserRuleCall_1_1_3_0()); }
	ruleCompoundStringPartLeadingDelimiter{ after(grammarAccess.getCompoundStringAccess().getPartsCompoundStringPartLeadingDelimiterParserRuleCall_1_1_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CompoundStringLeadingDelimiter__PartsAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompoundStringLeadingDelimiterAccess().getPartsCompoundStringPartLeadingDelimiterParserRuleCall_1_0_0()); }
	ruleCompoundStringPartLeadingDelimiter{ after(grammarAccess.getCompoundStringLeadingDelimiterAccess().getPartsCompoundStringPartLeadingDelimiterParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CompoundStringLeadingDelimiter__PartsAssignment_1_1_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompoundStringLeadingDelimiterAccess().getPartsCompoundStringPartLeadingDelimiterParserRuleCall_1_1_3_0()); }
	ruleCompoundStringPartLeadingDelimiter{ after(grammarAccess.getCompoundStringLeadingDelimiterAccess().getPartsCompoundStringPartLeadingDelimiterParserRuleCall_1_1_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CompoundStringPartLeadingDelimiter__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompoundStringPartLeadingDelimiterAccess().getValueCompoundStringPartLeadingDelimiterValueParserRuleCall_0()); }
	ruleCompoundStringPartLeadingDelimiterValue{ after(grammarAccess.getCompoundStringPartLeadingDelimiterAccess().getValueCompoundStringPartLeadingDelimiterValueParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CompoundStringPart__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompoundStringPartAccess().getValueCompoundStringPartValueParserRuleCall_0()); }
	ruleCompoundStringPartValue{ after(grammarAccess.getCompoundStringPartAccess().getValueCompoundStringPartValueParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_LINE_TERMINATOR : ('\r' '\n'?|'\n');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_SL_COMMENT : ('#'|'!') ~(('\n'|'\r'))*;

RULE_WS : (' '|'\t')+;

RULE_ANY_OTHER : .;


