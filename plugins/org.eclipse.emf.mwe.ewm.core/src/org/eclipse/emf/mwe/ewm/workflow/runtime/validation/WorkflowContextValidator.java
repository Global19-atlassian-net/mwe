/*******************************************************************************
 * Copyright (c) 2008 Bryan Hunt.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Bryan Hunt - initial API and implementation
 *******************************************************************************/
package org.eclipse.emf.mwe.ewm.workflow.runtime.validation;

import java.util.concurrent.ExecutorService;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.EMap;
import org.eclipse.emf.mwe.ewm.workflow.WorkflowComponent;
import org.eclipse.emf.mwe.ewm.workflow.WorkflowParameter;
import org.eclipse.emf.mwe.ewm.workflow.runtime.WorkflowLog;
import org.eclipse.emf.mwe.ewm.workflow.runtime.WorkflowLogEntryType;
import org.eclipse.emf.mwe.ewm.workflow.runtime.state.WorkflowState;

/**
 * A sample validator interface for {@link org.eclipse.emf.mwe.ewm.workflow.runtime.WorkflowContext}.
 * This doesn't really do anything, and it's not a real EMF artifact.
 * It was generated by the org.eclipse.emf.examples.generator.validator plug-in to illustrate how EMF's code generator can be extended.
 * This can be disabled with -vmargs -Dorg.eclipse.emf.examples.generator.validator=false.
 */
public interface WorkflowContextValidator
{
	boolean validate();

	boolean validateParameters(EMap<WorkflowParameter, Object> value);
	boolean validateThreadPool(ExecutorService value);
	boolean validateStates(EMap<WorkflowComponent, WorkflowState> value);

	boolean validateLog(EMap<WorkflowComponent, WorkflowLog> value);

	boolean validateLogLevel(WorkflowLogEntryType value);

	boolean validateWorkflow(WorkflowComponent value);

	boolean validateActiveComponents(EList<WorkflowComponent> value);
}
