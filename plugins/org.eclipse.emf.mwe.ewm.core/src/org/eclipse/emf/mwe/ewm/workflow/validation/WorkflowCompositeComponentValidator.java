/*******************************************************************************
 * Copyright (c) 2008 Bryan Hunt.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Bryan Hunt - initial API and implementation
 *******************************************************************************/
package org.eclipse.emf.mwe.ewm.workflow.validation;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.mwe.ewm.workflow.WorkflowComponent;
import org.eclipse.emf.mwe.ewm.workflow.WorkflowParameter;
import org.eclipse.emf.mwe.ewm.workflow.WorkflowParameterConnection;
import org.eclipse.emf.mwe.ewm.workflow.orchestration.WorkflowCompositeOrchestrationStrategy;
import org.eclipse.emf.mwe.ewm.workflow.runtime.WorkflowStateResolutionStrategy;

/**
 * A sample validator interface for {@link org.eclipse.emf.mwe.ewm.workflow.WorkflowCompositeComponent}.
 * This doesn't really do anything, and it's not a real EMF artifact.
 * It was generated by the org.eclipse.emf.examples.generator.validator plug-in to illustrate how EMF's code generator can be extended.
 * This can be disabled with -vmargs -Dorg.eclipse.emf.examples.generator.validator=false.
 */
public interface WorkflowCompositeComponentValidator
{
	boolean validate();

	boolean validateComponents(EList<WorkflowComponent> value);
	boolean validateParameters(EList<WorkflowParameter> value);
	boolean validateCompositeOrchestrationStrategy(WorkflowCompositeOrchestrationStrategy value);
	boolean validateConnections(EList<WorkflowParameterConnection> value);
	boolean validateStateResolutionStrategy(WorkflowStateResolutionStrategy value);
}
