/*
* generated by Xtext
*/
package org.eclipse.emf.mwe.di.parser.packrat.consumers;

import org.eclipse.emf.ecore.EClassifier;

import org.eclipse.xtext.AbstractRule;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.RuleCall;

import org.eclipse.xtext.parser.packrat.consumers.IElementConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.INonTerminalConsumerConfiguration;
import org.eclipse.xtext.parser.packrat.consumers.ITerminalConsumer;
import org.eclipse.xtext.parser.packrat.consumers.NonTerminalConsumer;
import org.eclipse.xtext.parser.packrat.matching.ICharacterClass;
import org.eclipse.xtext.parser.packrat.matching.ISequenceMatcher;

import org.eclipse.emf.mwe.di.services.MWEGrammarAccess.ComplexValueElements;

public final class MWEComplexValueConsumer extends NonTerminalConsumer {

	private ComplexValueElements rule;	

	private INonTerminalConsumer assignmentConsumer;

	private ITerminalConsumer idConsumer;

	private INonTerminalConsumer qualifiedNameConsumer;

	private IElementConsumer group$1$Consumer;

	private IElementConsumer assignment$5$Consumer;

	private IElementConsumer ruleCall$6$Consumer;

	private IElementConsumer group$7$Consumer;

	private IElementConsumer keyword$8$Consumer;

	private IElementConsumer assignment$9$Consumer;

	private IElementConsumer ruleCall$10$Consumer;

	private IElementConsumer assignment$11$Consumer;

	private IElementConsumer keyword$12$Consumer;

	private IElementConsumer assignment$13$Consumer;

	private IElementConsumer ruleCall$14$Consumer;

	private IElementConsumer keyword$15$Consumer;

	private ICharacterClass keyword$8$Delimiter;

	private ICharacterClass keyword$12$Delimiter;

	private ICharacterClass keyword$15$Delimiter;

	private ISequenceMatcher ruleCall$10$Delimiter;

	protected class Group$1$Consumer extends GroupConsumer {
		
		protected Group$1$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(assignment$5$Consumer);
			acceptor.accept(group$7$Consumer);
			acceptor.accept(assignment$11$Consumer);
			acceptor.accept(assignment$13$Consumer);
			acceptor.accept(keyword$15$Consumer);
		}
	}

	protected class Assignment$5$Consumer extends OptionalAssignmentConsumer {
		
		protected Assignment$5$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$6$Consumer;
		}
	}

	protected class RuleCall$6$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$6$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume() throws Exception {
			return consumeNonTerminal(qualifiedNameConsumer, "className", false, false, false, getElement());
		}
	}

	protected class Group$7$Consumer extends OptionalGroupConsumer {
		
		protected Group$7$Consumer(final Group group) {
			super(group);
		}
		
		@Override
		protected void doGetConsumers(ConsumerAcceptor acceptor) {
			acceptor.accept(keyword$8$Consumer);
			acceptor.accept(assignment$9$Consumer);
		}
	}

	protected class Keyword$8$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$8$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume() throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$8$Delimiter());
		}
	}

	protected class Assignment$9$Consumer extends AssignmentConsumer {
		
		protected Assignment$9$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$10$Consumer;
		}
	}

	protected class RuleCall$10$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$10$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume() throws Exception {
			return consumeTerminal(idConsumer, "id", false, false, getElement(), getRuleCall$10$Delimiter());
		}
	}

	protected class Assignment$11$Consumer extends AssignmentConsumer {
		
		protected Assignment$11$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return keyword$12$Consumer;
		}
	}

	protected class Keyword$12$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$12$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume() throws Exception {
			return consumeKeyword(getElement(), "fooBar", false, true, getKeyword$12$Delimiter());
		}
	}

	protected class Assignment$13$Consumer extends LoopAssignmentConsumer {
		
		protected Assignment$13$Consumer(final Assignment assignment) {
			super(assignment);
		}
		
		@Override
		protected IElementConsumer getConsumer() {
			return ruleCall$14$Consumer;
		}
	}

	protected class RuleCall$14$Consumer extends ElementConsumer<RuleCall> {
		
		protected RuleCall$14$Consumer(final RuleCall ruleCall) {
			super(ruleCall);
		}
		
		@Override
		protected int doConsume() throws Exception {
			return consumeNonTerminal(assignmentConsumer, "assignments", true, false, false, getElement());
		}
	}

	protected class Keyword$15$Consumer extends ElementConsumer<Keyword> {
		
		protected Keyword$15$Consumer(final Keyword keyword) {
			super(keyword);
		}
		
		@Override
		protected int doConsume() throws Exception {
			return consumeKeyword(getElement(), null, false, false, getKeyword$15$Delimiter());
		}
	}

	public MWEComplexValueConsumer(INonTerminalConsumerConfiguration configuration, ITerminalConsumer[] hiddenTokens) {
		super(configuration, hiddenTokens);
		keyword$8$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$12$Delimiter = ICharacterClass.Factory.nullClass();
		keyword$15$Delimiter = ICharacterClass.Factory.nullClass();
		ruleCall$10$Delimiter = ISequenceMatcher.Factory.nullMatcher();
	}
	
	@Override
	protected int doConsume() throws Exception {
		return group$1$Consumer.consume();
	}

	public ComplexValueElements getRule() {
		return rule;
	}
	
	public void setRule(ComplexValueElements rule) {
		this.rule = rule;
		
		group$1$Consumer = new Group$1$Consumer(rule.eleGroup());
		assignment$5$Consumer = new Assignment$5$Consumer(rule.ele0000AssignmentClassName());
		ruleCall$6$Consumer = new RuleCall$6$Consumer(rule.ele00000ParserRuleCallQualifiedName());
		group$7$Consumer = new Group$7$Consumer(rule.ele0001Group());
		keyword$8$Consumer = new Keyword$8$Consumer(rule.ele00010KeywordColon());
		assignment$9$Consumer = new Assignment$9$Consumer(rule.ele00011AssignmentId());
		ruleCall$10$Consumer = new RuleCall$10$Consumer(rule.ele000110LexerRuleCallID());
		assignment$11$Consumer = new Assignment$11$Consumer(rule.ele001AssignmentFooBar());
		keyword$12$Consumer = new Keyword$12$Consumer(rule.ele0010KeywordLeftCurlyBracket());
		assignment$13$Consumer = new Assignment$13$Consumer(rule.ele01AssignmentAssignments());
		ruleCall$14$Consumer = new RuleCall$14$Consumer(rule.ele010ParserRuleCallAssignment());
		keyword$15$Consumer = new Keyword$15$Consumer(rule.ele1KeywordRightCurlyBracket());
	}
	
	@Override
	protected AbstractRule getGrammarElement() {
		return getRule().getRule();
	}

	@Override
	protected EClassifier getDefaultType() {
		return getGrammarElement().getType().getType();
	}
	
	public void setAssignmentConsumer(INonTerminalConsumer assignmentConsumer) {
		this.assignmentConsumer = assignmentConsumer;
	}
	
	public void setIdConsumer(ITerminalConsumer idConsumer) {
		this.idConsumer = idConsumer;
	}
	
	public void setQualifiedNameConsumer(INonTerminalConsumer qualifiedNameConsumer) {
		this.qualifiedNameConsumer = qualifiedNameConsumer;
	}
	
	public ICharacterClass getKeyword$8$Delimiter() {
		return keyword$8$Delimiter;
	}
	
	public void setKeyword$8$Delimiter(ICharacterClass characterClass) {
		keyword$8$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$12$Delimiter() {
		return keyword$12$Delimiter;
	}
	
	public void setKeyword$12$Delimiter(ICharacterClass characterClass) {
		keyword$12$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ICharacterClass getKeyword$15$Delimiter() {
		return keyword$15$Delimiter;
	}
	
	public void setKeyword$15$Delimiter(ICharacterClass characterClass) {
		keyword$15$Delimiter = characterClass != null ? characterClass : ICharacterClass.Factory.nullClass();
	}
	
	public ISequenceMatcher getRuleCall$10$Delimiter() {
		return ruleCall$10$Delimiter;
	}
	
	public void setRuleCall$10$Delimiter(ISequenceMatcher matcher) {
		ruleCall$10$Delimiter = matcher != null ? matcher : ISequenceMatcher.Factory.nullMatcher();
	}
	
}
