module org.eclipse.emf.mwe2.language.GenerateMwe2

import org.eclipse.emf.mwe2.runtime.workflow.Workflow
import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*

var grammarURI = "classpath:/org/eclipse/emf/mwe2/language/Mwe2.xtext"
var file.extensions = "mwe2"
var projectName = "org.eclipse.emf.mwe2.language"
var runtimeProject = "../${projectName}"

Workflow {
	
	bean = StandaloneSetup {
		platformUri = "${runtimeProject}/.."
	}
	
	component = DirectoryCleaner {
		directory = "${runtimeProject}/src-gen"
	}
	
	component = DirectoryCleaner {
		directory = "${runtimeProject}.ui/src-gen"
	}
	
	component = Generator {
		pathRtProject = runtimeProject
		pathUiProject = "${runtimeProject}.ui"
		projectNameRt = projectName
		projectNameUi = "${projectName}.ui"
		
		language = {
			uri = grammarURI
			fileExtensions = file.extensions

			// Java API to access grammar elements (required by several other fragments)
			fragment = grammarAccess.GrammarAccessFragment {}
			
			// the serialization component
			fragment = parseTreeConstructor.ParseTreeConstructorFragment {}
			
			// a custom ResourceFactory for use with EMF 
			fragment = resourceFactory.ResourceFactoryFragment {
				fileExtensions = file.extensions
			}
				
			// the following fragment tries to use the Antlr Generator fragment which can be installed via update manager from http://download.itemis.com/updates/ -->
			fragment = AntlrDelegatingFragment {}
			
			// java-based API for validation 
			fragment = validation.JavaValidatorFragment {
                composedCheck = "org.eclipse.xtext.validation.ImportUriValidator"
            }
            
			// scoping API 
			fragment = scoping.ImportNamespacesScopingFragment {}
			
			// java types 
			fragment = types.TypesGeneratorFragment {}
			
			// formatter API 
			fragment = formatting.FormatterFragment {}

			// labeling API 
			fragment = labeling.LabelProviderFragment {}

			// outline API 
			fragment = outline.TransformerFragment {}
			fragment = outline.OutlineNodeAdapterFactoryFragment {}
			fragment = outline.QuickOutlineFragment {}

			// java-based API for content assistance 
			fragment = contentAssist.JavaBasedContentAssistFragment {}
			
			// the following fragment tries to use the Antlr based content assist 
			//     fragment which can be downloaded from http://www.itemis.com 
			//     and will be ignored if it's not available. 
			fragment = DelegatingGeneratorFragment { 
				delegate = "de.itemis.xtext.antlr.XtextAntlrUiGeneratorFragment"
				message="You are generating without ANTLR. It is highly recommended to download and use the plugin \'de.itemis.xtext.antlr\' \n\t using the update site http:\//download.itemis.com/updates/."
			}

			fragment = builder.BuilderIntegrationFragment {}
			fragment = exporting.QualifiedNamesFragment {}
			fragment = de.itemis.xtext.antlr.ex.ExternalAntlrLexerFragment {
				lexerGrammar = "org.eclipse.emf.mwe2.language.ui.highlighting.MweHighlighting"
				highlighting = true
			}

			// quickfix API 
			fragment = quickfix.QuickfixProviderFragment {}			
		}
	}
}
