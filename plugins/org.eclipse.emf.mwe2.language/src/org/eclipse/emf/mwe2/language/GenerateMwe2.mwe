<workflow>
    <property name="grammarURI" value="classpath:/org/eclipse/emf/mwe2/language/Mwe2.xtext"/>
    <property name="file.extensions" value="mwe2"/>
    <property name="projectName" value="org.eclipse.emf.mwe2.language"/>
    <property name="runtimeProject" value="../${projectName}"/>
	
	<bean class="org.eclipse.emf.mwe.utils.StandaloneSetup" platformUri="${runtimeProject}/../../.."/>
	
	<component class="org.eclipse.emf.mwe.utils.DirectoryCleaner" directory="${runtimeProject}/src-gen"/>
	<component class="org.eclipse.emf.mwe.utils.DirectoryCleaner" directory="${runtimeProject}.ui/src-gen"/>
	
	<component class="org.eclipse.xtext.generator.Generator">
		<pathRtProject value="${runtimeProject}"/>
		<pathUiProject value="${runtimeProject}.ui"/>
		<projectNameRt value="${projectName}"/>
		<projectNameUi value="${projectName}.ui"/>
		
		<language uri="${grammarURI}" fileExtensions="${file.extensions}">
			<!-- Java API to access grammar elements (required by several other fragments) -->
			<fragment class="org.eclipse.xtext.generator.grammarAccess.GrammarAccessFragment"/>
			
			<!-- the serialization component -->
			<fragment class="org.eclipse.xtext.generator.parseTreeConstructor.ParseTreeConstructorFragment"/>
			
			<!-- a custom ResourceFactory for use with EMF -->
			<fragment class="org.eclipse.xtext.generator.resourceFactory.ResourceFactoryFragment" 
				fileExtensions="${file.extensions}"/>
				
			<fragment class="org.eclipse.xtext.generator.parser.antlr.ex.rt.AntlrGeneratorFragment" />
			<fragment class="org.eclipse.xtext.generator.parser.antlr.ex.ExternalAntlrLexerFragment">
				<lexerGrammar value="org.eclipse.emf.mwe2.language.lexer.Mwe2Lexer"/>
				<runtime value="true"/>
				<antlrParam value="-lib"/>
				<antlrParam value="${runtimeProject}/src-gen/org/eclipse/emf/mwe2/language/parser/antlr/lexer"/>
			</fragment>
			
			<!-- java-based API for validation -->
			<fragment class="org.eclipse.xtext.generator.validation.JavaValidatorFragment">
                <composedCheck value="org.eclipse.xtext.validation.ImportUriValidator"/>
            </fragment>
            
			<!-- scoping API -->
			<fragment class="org.eclipse.xtext.generator.scoping.ImportNamespacesScopingFragment"/>
			
			<!-- java types -->
			<fragment class="org.eclipse.xtext.generator.types.TypesGeneratorFragment"/>
			
			<!-- formatter API -->
			<fragment class="org.eclipse.xtext.generator.formatting.FormatterFragment"/>

			<!-- labeling API -->
			<fragment class="org.eclipse.xtext.ui.generator.labeling.LabelProviderFragment"/>

			<!-- outline API -->
			<fragment class="org.eclipse.xtext.ui.generator.outline.OutlineTreeProviderFragment"/>
			<fragment class="org.eclipse.xtext.ui.generator.outline.QuickOutlineFragment"/>

			<!-- java-based API for content assistance -->
			<fragment class="org.eclipse.xtext.ui.generator.contentAssist.JavaBasedContentAssistFragment"/>
			<!-- the following fragment tries to use the Antlr based content assist fragment which can be downloaded from http://www.itemis.com 
			     and will be ignored if it's not available. -->
			<fragment class="org.eclipse.xtext.generator.parser.antlr.ex.ca.ContentAssistParserGeneratorFragment"/>

				<fragment class="org.eclipse.xtext.generator.builder.BuilderIntegrationFragment"/>
			<fragment class="org.eclipse.xtext.generator.exporting.QualifiedNamesFragment"/>
			<fragment class="org.eclipse.xtext.generator.parser.antlr.ex.ExternalAntlrLexerFragment"
				lexerGrammar="org.eclipse.emf.mwe2.language.ui.highlighting.MweHighlighting"
				highlighting="true"
			/>
			<fragment class="org.eclipse.xtext.generator.parser.antlr.ex.ExternalAntlrLexerFragment">
				<lexerGrammar value="org.eclipse.emf.mwe2.language.ui.contentassist.Mwe2ContentAssistLexer"/>
				<contentAssist value="true"/>
				<antlrParam value="-lib"/>
				<antlrParam value="${runtimeProject}.ui/src-gen/org/eclipse/emf/mwe2/language/ui/contentassist/antlr/lexer"/>
			</fragment>

			<!-- quickfix API -->
			<fragment class="org.eclipse.xtext.ui.generator.quickfix.QuickfixProviderFragment"/>			
		</language>
	</component>
</workflow>
