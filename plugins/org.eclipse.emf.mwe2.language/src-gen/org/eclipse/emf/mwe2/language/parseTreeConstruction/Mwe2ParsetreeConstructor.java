/*
* generated by Xtext
*/
package org.eclipse.emf.mwe2.language.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IInstanceDescription;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;

import org.eclipse.emf.mwe2.language.services.Mwe2GrammarAccess;

import com.google.inject.Inject;

public class Mwe2ParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private Mwe2GrammarAccess grammarAccess;
	
	@Override	
	public Mwe2GrammarAccess getGrammarAccess() {
		return grammarAccess;
	}

	@Override
	protected AbstractToken getRootToken(IInstanceDescription inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IInstanceDescription inst) {
		super(inst);
	}
	
	@Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Module_Group(this, this, 0, inst);
			case 1: return new DeclaredProperty_Group(this, this, 1, inst);
			case 2: return new RootComponent_Group(this, this, 2, inst);
			case 3: return new Component_Group(this, this, 3, inst);
			case 4: return new Import_Group(this, this, 4, inst);
			case 5: return new Assignment_Group(this, this, 5, inst);
			case 6: return new Value_Alternatives(this, this, 6, inst);
			case 7: return new StringLiteral_ValueAssignment(this, this, 7, inst);
			case 8: return new BooleanLiteral_Group(this, this, 8, inst);
			case 9: return new Reference_ReferableAssignment(this, this, 9, inst);
			case 10: return new MWEString_Alternatives(this, this, 10, inst);
			case 11: return new MWEStringPart_Alternatives(this, this, 11, inst);
			case 12: return new ReplaceableString_Group(this, this, 12, inst);
			case 13: return new PlainString_ValueAssignment(this, this, 13, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule Module ****************
 *
 * Module:
 *   {Module} "module" canonicalName=FQN imports+=Import* declaredProperties+=
 *   DeclaredProperty* root=RootComponent;
 *
 **/

// {Module} "module" canonicalName=FQN imports+=Import* declaredProperties+=
// DeclaredProperty* root=RootComponent
protected class Module_Group extends GroupToken {
	
	public Module_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getModuleAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Module_RootAssignment_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getModuleRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {Module}
protected class Module_ModuleAction_0 extends ActionToken  {

	public Module_ModuleAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getModuleAccess().getModuleAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getModuleAccess().getModuleAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "module"
protected class Module_ModuleKeyword_1 extends KeywordToken  {
	
	public Module_ModuleKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getModuleAccess().getModuleKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Module_ModuleAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// canonicalName=FQN
protected class Module_CanonicalNameAssignment_2 extends AssignmentToken  {
	
	public Module_CanonicalNameAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModuleAccess().getCanonicalNameAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Module_ModuleKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("canonicalName",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("canonicalName");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.DRC;
			element = grammarAccess.getModuleAccess().getCanonicalNameFQNParserRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// imports+=Import*
protected class Module_ImportsAssignment_3 extends AssignmentToken  {
	
	public Module_ImportsAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModuleAccess().getImportsAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Import_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("imports",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("imports");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getImportRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getModuleAccess().getImportsImportParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Module_ImportsAssignment_3(parent, next, actIndex, consumed);
			case 1: return new Module_CanonicalNameAssignment_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// declaredProperties+=DeclaredProperty*
protected class Module_DeclaredPropertiesAssignment_4 extends AssignmentToken  {
	
	public Module_DeclaredPropertiesAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModuleAccess().getDeclaredPropertiesAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DeclaredProperty_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("declaredProperties",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("declaredProperties");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDeclaredPropertyRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getModuleAccess().getDeclaredPropertiesDeclaredPropertyParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Module_DeclaredPropertiesAssignment_4(parent, next, actIndex, consumed);
			case 1: return new Module_ImportsAssignment_3(parent, next, actIndex, consumed);
			case 2: return new Module_CanonicalNameAssignment_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// root=RootComponent
protected class Module_RootAssignment_5 extends AssignmentToken  {
	
	public Module_RootAssignment_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModuleAccess().getRootAssignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RootComponent_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("root",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("root");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRootComponentRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getModuleAccess().getRootRootComponentParserRuleCall_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Module_DeclaredPropertiesAssignment_4(parent, next, actIndex, consumed);
			case 1: return new Module_ImportsAssignment_3(parent, next, actIndex, consumed);
			case 2: return new Module_CanonicalNameAssignment_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule Module ****************/


/************ begin Rule DeclaredProperty ****************
 *
 * DeclaredProperty:
 *   "var" type=[types::JvmType|FQN]? name=FQN ("=" default=Value)?;
 *
 **/

// "var" type=[types::JvmType|FQN]? name=FQN ("=" default=Value)?
protected class DeclaredProperty_Group extends GroupToken {
	
	public DeclaredProperty_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDeclaredPropertyAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DeclaredProperty_Group_3(parent, this, 0, inst);
			case 1: return new DeclaredProperty_NameAssignment_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getDeclaredPropertyRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "var"
protected class DeclaredProperty_VarKeyword_0 extends KeywordToken  {
	
	public DeclaredProperty_VarKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDeclaredPropertyAccess().getVarKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// type=[types::JvmType|FQN]?
protected class DeclaredProperty_TypeAssignment_1 extends AssignmentToken  {
	
	public DeclaredProperty_TypeAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDeclaredPropertyAccess().getTypeAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DeclaredProperty_VarKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDeclaredPropertyAccess().getTypeJvmTypeCrossReference_1_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getDeclaredPropertyAccess().getTypeJvmTypeCrossReference_1_0(); 
				return obj;
			}
		}
		return null;
	}

}

// name=FQN
protected class DeclaredProperty_NameAssignment_2 extends AssignmentToken  {
	
	public DeclaredProperty_NameAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDeclaredPropertyAccess().getNameAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DeclaredProperty_TypeAssignment_1(parent, this, 0, inst);
			case 1: return new DeclaredProperty_VarKeyword_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.DRC;
			element = grammarAccess.getDeclaredPropertyAccess().getNameFQNParserRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// ("=" default=Value)?
protected class DeclaredProperty_Group_3 extends GroupToken {
	
	public DeclaredProperty_Group_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDeclaredPropertyAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DeclaredProperty_DefaultAssignment_3_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "="
protected class DeclaredProperty_EqualsSignKeyword_3_0 extends KeywordToken  {
	
	public DeclaredProperty_EqualsSignKeyword_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDeclaredPropertyAccess().getEqualsSignKeyword_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DeclaredProperty_NameAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// default=Value
protected class DeclaredProperty_DefaultAssignment_3_1 extends AssignmentToken  {
	
	public DeclaredProperty_DefaultAssignment_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDeclaredPropertyAccess().getDefaultAssignment_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Value_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("default",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("default");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getValueRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getDeclaredPropertyAccess().getDefaultValueParserRuleCall_3_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new DeclaredProperty_EqualsSignKeyword_3_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule DeclaredProperty ****************/


/************ begin Rule RootComponent ****************
 *
 * RootComponent returns Component:
 *   {Component} (type=[types::JvmType|FQN]|"@" module=[Module|FQN]) (":" name=FQN)?
 *   autoInject?="auto-inject"? "{" assignment+=Assignment* "}";
 *
 **/

// {Component} (type=[types::JvmType|FQN]|"@" module=[Module|FQN]) (":" name=FQN)?
// autoInject?="auto-inject"? "{" assignment+=Assignment* "}"
protected class RootComponent_Group extends GroupToken {
	
	public RootComponent_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRootComponentAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RootComponent_RightCurlyBracketKeyword_6(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getRootComponentRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {Component}
protected class RootComponent_ComponentAction_0 extends ActionToken  {

	public RootComponent_ComponentAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getRootComponentAccess().getComponentAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getRootComponentAccess().getComponentAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// type=[types::JvmType|FQN]|"@" module=[Module|FQN]
protected class RootComponent_Alternatives_1 extends AlternativesToken {

	public RootComponent_Alternatives_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getRootComponentAccess().getAlternatives_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RootComponent_TypeAssignment_1_0(parent, this, 0, inst);
			case 1: return new RootComponent_Group_1_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// type=[types::JvmType|FQN]
protected class RootComponent_TypeAssignment_1_0 extends AssignmentToken  {
	
	public RootComponent_TypeAssignment_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRootComponentAccess().getTypeAssignment_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RootComponent_ComponentAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRootComponentAccess().getTypeJvmTypeCrossReference_1_0_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getRootComponentAccess().getTypeJvmTypeCrossReference_1_0_0(); 
				return obj;
			}
		}
		return null;
	}

}

// "@" module=[Module|FQN]
protected class RootComponent_Group_1_1 extends GroupToken {
	
	public RootComponent_Group_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRootComponentAccess().getGroup_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RootComponent_ModuleAssignment_1_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "@"
protected class RootComponent_CommercialAtKeyword_1_1_0 extends KeywordToken  {
	
	public RootComponent_CommercialAtKeyword_1_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRootComponentAccess().getCommercialAtKeyword_1_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RootComponent_ComponentAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// module=[Module|FQN]
protected class RootComponent_ModuleAssignment_1_1_1 extends AssignmentToken  {
	
	public RootComponent_ModuleAssignment_1_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRootComponentAccess().getModuleAssignment_1_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RootComponent_CommercialAtKeyword_1_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("module",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("module");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRootComponentAccess().getModuleModuleCrossReference_1_1_1_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getRootComponentAccess().getModuleModuleCrossReference_1_1_1_0(); 
				return obj;
			}
		}
		return null;
	}

}



// (":" name=FQN)?
protected class RootComponent_Group_2 extends GroupToken {
	
	public RootComponent_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRootComponentAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RootComponent_NameAssignment_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ":"
protected class RootComponent_ColonKeyword_2_0 extends KeywordToken  {
	
	public RootComponent_ColonKeyword_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRootComponentAccess().getColonKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RootComponent_Alternatives_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// name=FQN
protected class RootComponent_NameAssignment_2_1 extends AssignmentToken  {
	
	public RootComponent_NameAssignment_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRootComponentAccess().getNameAssignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RootComponent_ColonKeyword_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.DRC;
			element = grammarAccess.getRootComponentAccess().getNameFQNParserRuleCall_2_1_0();
			return obj;
		}
		return null;
	}

}


// autoInject?="auto-inject"?
protected class RootComponent_AutoInjectAssignment_3 extends AssignmentToken  {
	
	public RootComponent_AutoInjectAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRootComponentAccess().getAutoInjectAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RootComponent_Group_2(parent, this, 0, inst);
			case 1: return new RootComponent_Alternatives_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("autoInject",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("autoInject");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getRootComponentAccess().getAutoInjectAutoInjectKeyword_3_0();
			return obj;
		}
		return null;
	}

}

// "{"
protected class RootComponent_LeftCurlyBracketKeyword_4 extends KeywordToken  {
	
	public RootComponent_LeftCurlyBracketKeyword_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRootComponentAccess().getLeftCurlyBracketKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RootComponent_AutoInjectAssignment_3(parent, this, 0, inst);
			case 1: return new RootComponent_Group_2(parent, this, 1, inst);
			case 2: return new RootComponent_Alternatives_1(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// assignment+=Assignment*
protected class RootComponent_AssignmentAssignment_5 extends AssignmentToken  {
	
	public RootComponent_AssignmentAssignment_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRootComponentAccess().getAssignmentAssignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Assignment_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("assignment",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("assignment");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAssignmentRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getRootComponentAccess().getAssignmentAssignmentParserRuleCall_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new RootComponent_AssignmentAssignment_5(parent, next, actIndex, consumed);
			case 1: return new RootComponent_LeftCurlyBracketKeyword_4(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class RootComponent_RightCurlyBracketKeyword_6 extends KeywordToken  {
	
	public RootComponent_RightCurlyBracketKeyword_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRootComponentAccess().getRightCurlyBracketKeyword_6();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new RootComponent_AssignmentAssignment_5(parent, this, 0, inst);
			case 1: return new RootComponent_LeftCurlyBracketKeyword_4(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule RootComponent ****************/


/************ begin Rule Component ****************
 *
 * Component:
 *   {Component} (type=[types::JvmType|FQN]|"@" module=[Module|FQN])? (":" name=FQN)?
 *   autoInject?="auto-inject"? "{" assignment+=Assignment* "}";
 *
 **/

// {Component} (type=[types::JvmType|FQN]|"@" module=[Module|FQN])? (":" name=FQN)?
// autoInject?="auto-inject"? "{" assignment+=Assignment* "}"
protected class Component_Group extends GroupToken {
	
	public Component_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getComponentAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Component_RightCurlyBracketKeyword_6(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getComponentRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {Component}
protected class Component_ComponentAction_0 extends ActionToken  {

	public Component_ComponentAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getComponentAccess().getComponentAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getComponentAccess().getComponentAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// (type=[types::JvmType|FQN]|"@" module=[Module|FQN])?
protected class Component_Alternatives_1 extends AlternativesToken {

	public Component_Alternatives_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getComponentAccess().getAlternatives_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Component_TypeAssignment_1_0(parent, this, 0, inst);
			case 1: return new Component_Group_1_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// type=[types::JvmType|FQN]
protected class Component_TypeAssignment_1_0 extends AssignmentToken  {
	
	public Component_TypeAssignment_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getComponentAccess().getTypeAssignment_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Component_ComponentAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getComponentAccess().getTypeJvmTypeCrossReference_1_0_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getComponentAccess().getTypeJvmTypeCrossReference_1_0_0(); 
				return obj;
			}
		}
		return null;
	}

}

// "@" module=[Module|FQN]
protected class Component_Group_1_1 extends GroupToken {
	
	public Component_Group_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getComponentAccess().getGroup_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Component_ModuleAssignment_1_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "@"
protected class Component_CommercialAtKeyword_1_1_0 extends KeywordToken  {
	
	public Component_CommercialAtKeyword_1_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getComponentAccess().getCommercialAtKeyword_1_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Component_ComponentAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// module=[Module|FQN]
protected class Component_ModuleAssignment_1_1_1 extends AssignmentToken  {
	
	public Component_ModuleAssignment_1_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getComponentAccess().getModuleAssignment_1_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Component_CommercialAtKeyword_1_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("module",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("module");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getComponentAccess().getModuleModuleCrossReference_1_1_1_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getComponentAccess().getModuleModuleCrossReference_1_1_1_0(); 
				return obj;
			}
		}
		return null;
	}

}



// (":" name=FQN)?
protected class Component_Group_2 extends GroupToken {
	
	public Component_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getComponentAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Component_NameAssignment_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ":"
protected class Component_ColonKeyword_2_0 extends KeywordToken  {
	
	public Component_ColonKeyword_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getComponentAccess().getColonKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Component_Alternatives_1(parent, this, 0, inst);
			case 1: return new Component_ComponentAction_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// name=FQN
protected class Component_NameAssignment_2_1 extends AssignmentToken  {
	
	public Component_NameAssignment_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getComponentAccess().getNameAssignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Component_ColonKeyword_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.DRC;
			element = grammarAccess.getComponentAccess().getNameFQNParserRuleCall_2_1_0();
			return obj;
		}
		return null;
	}

}


// autoInject?="auto-inject"?
protected class Component_AutoInjectAssignment_3 extends AssignmentToken  {
	
	public Component_AutoInjectAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getComponentAccess().getAutoInjectAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Component_Group_2(parent, this, 0, inst);
			case 1: return new Component_Alternatives_1(parent, this, 1, inst);
			case 2: return new Component_ComponentAction_0(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("autoInject",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("autoInject");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getComponentAccess().getAutoInjectAutoInjectKeyword_3_0();
			return obj;
		}
		return null;
	}

}

// "{"
protected class Component_LeftCurlyBracketKeyword_4 extends KeywordToken  {
	
	public Component_LeftCurlyBracketKeyword_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getComponentAccess().getLeftCurlyBracketKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Component_AutoInjectAssignment_3(parent, this, 0, inst);
			case 1: return new Component_Group_2(parent, this, 1, inst);
			case 2: return new Component_Alternatives_1(parent, this, 2, inst);
			case 3: return new Component_ComponentAction_0(parent, this, 3, inst);
			default: return null;
		}	
	}	
		
}

// assignment+=Assignment*
protected class Component_AssignmentAssignment_5 extends AssignmentToken  {
	
	public Component_AssignmentAssignment_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getComponentAccess().getAssignmentAssignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Assignment_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("assignment",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("assignment");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAssignmentRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getComponentAccess().getAssignmentAssignmentParserRuleCall_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Component_AssignmentAssignment_5(parent, next, actIndex, consumed);
			case 1: return new Component_LeftCurlyBracketKeyword_4(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class Component_RightCurlyBracketKeyword_6 extends KeywordToken  {
	
	public Component_RightCurlyBracketKeyword_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getComponentAccess().getRightCurlyBracketKeyword_6();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Component_AssignmentAssignment_5(parent, this, 0, inst);
			case 1: return new Component_LeftCurlyBracketKeyword_4(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule Component ****************/


/************ begin Rule Import ****************
 *
 * Import:
 *   "import" importedNamespace=ImportedFQN;
 *
 **/

// "import" importedNamespace=ImportedFQN
protected class Import_Group extends GroupToken {
	
	public Import_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getImportAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Import_ImportedNamespaceAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getImportRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "import"
protected class Import_ImportKeyword_0 extends KeywordToken  {
	
	public Import_ImportKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getImportAccess().getImportKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// importedNamespace=ImportedFQN
protected class Import_ImportedNamespaceAssignment_1 extends AssignmentToken  {
	
	public Import_ImportedNamespaceAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getImportAccess().getImportedNamespaceAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Import_ImportKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("importedNamespace",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("importedNamespace");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.DRC;
			element = grammarAccess.getImportAccess().getImportedNamespaceImportedFQNParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule Import ****************/



/************ begin Rule Assignment ****************
 *
 * Assignment:
 *   feature=[types::JvmFeature] "=" value=Value;
 *
 **/

// feature=[types::JvmFeature] "=" value=Value
protected class Assignment_Group extends GroupToken {
	
	public Assignment_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAssignmentAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Assignment_ValueAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAssignmentRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// feature=[types::JvmFeature]
protected class Assignment_FeatureAssignment_0 extends AssignmentToken  {
	
	public Assignment_FeatureAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAssignmentAccess().getFeatureAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("feature",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("feature");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAssignmentAccess().getFeatureJvmFeatureCrossReference_0_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getAssignmentAccess().getFeatureJvmFeatureCrossReference_0_0(); 
				return obj;
			}
		}
		return null;
	}

}

// "="
protected class Assignment_EqualsSignKeyword_1 extends KeywordToken  {
	
	public Assignment_EqualsSignKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAssignmentAccess().getEqualsSignKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Assignment_FeatureAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// value=Value
protected class Assignment_ValueAssignment_2 extends AssignmentToken  {
	
	public Assignment_ValueAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAssignmentAccess().getValueAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Value_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("value",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("value");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getValueRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getAssignmentAccess().getValueValueParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Assignment_EqualsSignKeyword_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule Assignment ****************/


/************ begin Rule Value ****************
 *
 * Value:
 *   Component|StringLiteral|BooleanLiteral|Reference;
 *
 **/

// Component|StringLiteral|BooleanLiteral|Reference
protected class Value_Alternatives extends AlternativesToken {

	public Value_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getValueAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Value_ComponentParserRuleCall_0(parent, this, 0, inst);
			case 1: return new Value_StringLiteralParserRuleCall_1(parent, this, 1, inst);
			case 2: return new Value_BooleanLiteralParserRuleCall_2(parent, this, 2, inst);
			case 3: return new Value_ReferenceParserRuleCall_3(parent, this, 3, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getValueRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// Component
protected class Value_ComponentParserRuleCall_0 extends RuleCallToken {
	
	public Value_ComponentParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getValueAccess().getComponentParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Component_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Component_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getComponentRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// StringLiteral
protected class Value_StringLiteralParserRuleCall_1 extends RuleCallToken {
	
	public Value_StringLiteralParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getValueAccess().getStringLiteralParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new StringLiteral_ValueAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(StringLiteral_ValueAssignment.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getStringLiteralRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// BooleanLiteral
protected class Value_BooleanLiteralParserRuleCall_2 extends RuleCallToken {
	
	public Value_BooleanLiteralParserRuleCall_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getValueAccess().getBooleanLiteralParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BooleanLiteral_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(BooleanLiteral_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getBooleanLiteralRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// Reference
protected class Value_ReferenceParserRuleCall_3 extends RuleCallToken {
	
	public Value_ReferenceParserRuleCall_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getValueAccess().getReferenceParserRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Reference_ReferableAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Reference_ReferableAssignment.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getReferenceRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Value ****************/


/************ begin Rule StringLiteral ****************
 *
 * StringLiteral:
 *   value=MWEString;
 *
 **/

// value=MWEString
protected class StringLiteral_ValueAssignment extends AssignmentToken  {
	
	public StringLiteral_ValueAssignment(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStringLiteralAccess().getValueAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MWEString_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getStringLiteralRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("value",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("value");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getMWEStringRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getStringLiteralAccess().getValueMWEStringParserRuleCall_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

/************ end Rule StringLiteral ****************/


/************ begin Rule BooleanLiteral ****************
 *
 * BooleanLiteral:
 *   {BooleanLiteral} (isTrue?="true"|"false");
 *
 **/

// {BooleanLiteral} (isTrue?="true"|"false")
protected class BooleanLiteral_Group extends GroupToken {
	
	public BooleanLiteral_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getBooleanLiteralAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BooleanLiteral_Alternatives_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getBooleanLiteralRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {BooleanLiteral}
protected class BooleanLiteral_BooleanLiteralAction_0 extends ActionToken  {

	public BooleanLiteral_BooleanLiteralAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getBooleanLiteralAccess().getBooleanLiteralAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getBooleanLiteralAccess().getBooleanLiteralAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// isTrue?="true"|"false"
protected class BooleanLiteral_Alternatives_1 extends AlternativesToken {

	public BooleanLiteral_Alternatives_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getBooleanLiteralAccess().getAlternatives_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BooleanLiteral_IsTrueAssignment_1_0(parent, this, 0, inst);
			case 1: return new BooleanLiteral_FalseKeyword_1_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// isTrue?="true"
protected class BooleanLiteral_IsTrueAssignment_1_0 extends AssignmentToken  {
	
	public BooleanLiteral_IsTrueAssignment_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBooleanLiteralAccess().getIsTrueAssignment_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BooleanLiteral_BooleanLiteralAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("isTrue",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("isTrue");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getBooleanLiteralAccess().getIsTrueTrueKeyword_1_0_0();
			return obj;
		}
		return null;
	}

}

// "false"
protected class BooleanLiteral_FalseKeyword_1_1 extends KeywordToken  {
	
	public BooleanLiteral_FalseKeyword_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getBooleanLiteralAccess().getFalseKeyword_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BooleanLiteral_BooleanLiteralAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}



/************ end Rule BooleanLiteral ****************/


/************ begin Rule Reference ****************
 *
 * Reference:
 *   referable=[Referrable];
 *
 **/

// referable=[Referrable]
protected class Reference_ReferableAssignment extends AssignmentToken  {
	
	public Reference_ReferableAssignment(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getReferenceAccess().getReferableAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getReferenceRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("referable",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("referable");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getReferenceAccess().getReferableReferrableCrossReference_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getReferenceAccess().getReferableReferrableCrossReference_0(); 
				return obj;
			}
		}
		return null;
	}

}

/************ end Rule Reference ****************/



/************ begin Rule MWEString ****************
 *
 * MWEString hidden ( ):
 *   begin=SingleQuote parts+=MWEStringPart* end=SingleQuote|begin=DoubleQuote parts+=
 *   MWEStringPart* end=DoubleQuote;
 *
 **/

// begin=SingleQuote parts+=MWEStringPart* end=SingleQuote|begin=DoubleQuote parts+=
// MWEStringPart* end=DoubleQuote
protected class MWEString_Alternatives extends AlternativesToken {

	public MWEString_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getMWEStringAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MWEString_Group_0(parent, this, 0, inst);
			case 1: return new MWEString_Group_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getMWEStringRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// begin=SingleQuote parts+=MWEStringPart* end=SingleQuote
protected class MWEString_Group_0 extends GroupToken {
	
	public MWEString_Group_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getMWEStringAccess().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MWEString_EndAssignment_0_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// begin=SingleQuote
protected class MWEString_BeginAssignment_0_0 extends AssignmentToken  {
	
	public MWEString_BeginAssignment_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMWEStringAccess().getBeginAssignment_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("begin",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("begin");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.DRC;
			element = grammarAccess.getMWEStringAccess().getBeginSingleQuoteParserRuleCall_0_0_0();
			return obj;
		}
		return null;
	}

}

// parts+=MWEStringPart*
protected class MWEString_PartsAssignment_0_1 extends AssignmentToken  {
	
	public MWEString_PartsAssignment_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMWEStringAccess().getPartsAssignment_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MWEStringPart_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("parts",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("parts");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getMWEStringPartRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getMWEStringAccess().getPartsMWEStringPartParserRuleCall_0_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new MWEString_PartsAssignment_0_1(parent, next, actIndex, consumed);
			case 1: return new MWEString_BeginAssignment_0_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// end=SingleQuote
protected class MWEString_EndAssignment_0_2 extends AssignmentToken  {
	
	public MWEString_EndAssignment_0_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMWEStringAccess().getEndAssignment_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MWEString_PartsAssignment_0_1(parent, this, 0, inst);
			case 1: return new MWEString_BeginAssignment_0_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("end",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("end");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.DRC;
			element = grammarAccess.getMWEStringAccess().getEndSingleQuoteParserRuleCall_0_2_0();
			return obj;
		}
		return null;
	}

}


// begin=DoubleQuote parts+=MWEStringPart* end=DoubleQuote
protected class MWEString_Group_1 extends GroupToken {
	
	public MWEString_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getMWEStringAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MWEString_EndAssignment_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// begin=DoubleQuote
protected class MWEString_BeginAssignment_1_0 extends AssignmentToken  {
	
	public MWEString_BeginAssignment_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMWEStringAccess().getBeginAssignment_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("begin",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("begin");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.DRC;
			element = grammarAccess.getMWEStringAccess().getBeginDoubleQuoteParserRuleCall_1_0_0();
			return obj;
		}
		return null;
	}

}

// parts+=MWEStringPart*
protected class MWEString_PartsAssignment_1_1 extends AssignmentToken  {
	
	public MWEString_PartsAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMWEStringAccess().getPartsAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MWEStringPart_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("parts",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("parts");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getMWEStringPartRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getMWEStringAccess().getPartsMWEStringPartParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new MWEString_PartsAssignment_1_1(parent, next, actIndex, consumed);
			case 1: return new MWEString_BeginAssignment_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// end=DoubleQuote
protected class MWEString_EndAssignment_1_2 extends AssignmentToken  {
	
	public MWEString_EndAssignment_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMWEStringAccess().getEndAssignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MWEString_PartsAssignment_1_1(parent, this, 0, inst);
			case 1: return new MWEString_BeginAssignment_1_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("end",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("end");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.DRC;
			element = grammarAccess.getMWEStringAccess().getEndDoubleQuoteParserRuleCall_1_2_0();
			return obj;
		}
		return null;
	}

}



/************ end Rule MWEString ****************/


/************ begin Rule MWEStringPart ****************
 *
 * MWEStringPart:
 *   ReplaceableString|PlainString;
 *
 **/

// ReplaceableString|PlainString
protected class MWEStringPart_Alternatives extends AlternativesToken {

	public MWEStringPart_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getMWEStringPartAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new MWEStringPart_ReplaceableStringParserRuleCall_0(parent, this, 0, inst);
			case 1: return new MWEStringPart_PlainStringParserRuleCall_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getMWEStringPartRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// ReplaceableString
protected class MWEStringPart_ReplaceableStringParserRuleCall_0 extends RuleCallToken {
	
	public MWEStringPart_ReplaceableStringParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getMWEStringPartAccess().getReplaceableStringParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ReplaceableString_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(ReplaceableString_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getReplaceableStringRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// PlainString
protected class MWEStringPart_PlainStringParserRuleCall_1 extends RuleCallToken {
	
	public MWEStringPart_PlainStringParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getMWEStringPartAccess().getPlainStringParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PlainString_ValueAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(PlainString_ValueAssignment.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getPlainStringRule().getType().getClassifier())) return null;
		return current;
	}
	
    @Override
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule MWEStringPart ****************/


/************ begin Rule ReplaceableString ****************
 *
 * ReplaceableString:
 *   "${" property=[DeclaredProperty] "}";
 *
 **/

// "${" property=[DeclaredProperty] "}"
protected class ReplaceableString_Group extends GroupToken {
	
	public ReplaceableString_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getReplaceableStringAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ReplaceableString_RightCurlyBracketKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getReplaceableStringRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "${"
protected class ReplaceableString_DollarSignLeftCurlyBracketKeyword_0 extends KeywordToken  {
	
	public ReplaceableString_DollarSignLeftCurlyBracketKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getReplaceableStringAccess().getDollarSignLeftCurlyBracketKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// property=[DeclaredProperty]
protected class ReplaceableString_PropertyAssignment_1 extends AssignmentToken  {
	
	public ReplaceableString_PropertyAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getReplaceableStringAccess().getPropertyAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ReplaceableString_DollarSignLeftCurlyBracketKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("property",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("property");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getReplaceableStringAccess().getPropertyDeclaredPropertyCrossReference_1_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getReplaceableStringAccess().getPropertyDeclaredPropertyCrossReference_1_0(); 
				return obj;
			}
		}
		return null;
	}

}

// "}"
protected class ReplaceableString_RightCurlyBracketKeyword_2 extends KeywordToken  {
	
	public ReplaceableString_RightCurlyBracketKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getReplaceableStringAccess().getRightCurlyBracketKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ReplaceableString_PropertyAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule ReplaceableString ****************/


/************ begin Rule PlainString ****************
 *
 * PlainString:
 *   value=ConstantValue;
 *
 **/

// value=ConstantValue
protected class PlainString_ValueAssignment extends AssignmentToken  {
	
	public PlainString_ValueAssignment(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPlainStringAccess().getValueAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
    @Override
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPlainStringRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
    @Override	
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("value",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("value");
		if(Boolean.TRUE.booleanValue()) { 
			type = AssignmentType.DRC;
			element = grammarAccess.getPlainStringAccess().getValueConstantValueParserRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule PlainString ****************/








}
