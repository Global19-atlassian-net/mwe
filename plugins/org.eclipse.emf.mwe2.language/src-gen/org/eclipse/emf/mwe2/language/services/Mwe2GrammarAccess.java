/*
* generated by Xtext
*/

package org.eclipse.emf.mwe2.language.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class Mwe2GrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Module");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cModuleAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cModuleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCanonicalNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCanonicalNameFQNParserRuleCall_2_0 = (RuleCall)cCanonicalNameAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cImportsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cImportsImportParserRuleCall_4_0 = (RuleCall)cImportsAssignment_4.eContents().get(0);
		private final Assignment cDeclaredPropertiesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDeclaredPropertiesDeclaredPropertyParserRuleCall_5_0 = (RuleCall)cDeclaredPropertiesAssignment_5.eContents().get(0);
		private final Assignment cRootAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cRootComponentParserRuleCall_6_0 = (RuleCall)cRootAssignment_6.eContents().get(0);
		
		//Module:
		//  {Module} "module" canonicalName=FQN ";" imports+=Import* declaredProperties+=
		//  DeclaredProperty* root=Component;
		public ParserRule getRule() { return rule; }

		//{Module} "module" canonicalName=FQN ";" imports+=Import* declaredProperties+=
		//DeclaredProperty* root=Component
		public Group getGroup() { return cGroup; }

		//{Module}
		public Action getModuleAction_0() { return cModuleAction_0; }

		//"module"
		public Keyword getModuleKeyword_1() { return cModuleKeyword_1; }

		//canonicalName=FQN
		public Assignment getCanonicalNameAssignment_2() { return cCanonicalNameAssignment_2; }

		//FQN
		public RuleCall getCanonicalNameFQNParserRuleCall_2_0() { return cCanonicalNameFQNParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }

		//imports+=Import*
		public Assignment getImportsAssignment_4() { return cImportsAssignment_4; }

		//Import
		public RuleCall getImportsImportParserRuleCall_4_0() { return cImportsImportParserRuleCall_4_0; }

		//declaredProperties+=DeclaredProperty*
		public Assignment getDeclaredPropertiesAssignment_5() { return cDeclaredPropertiesAssignment_5; }

		//DeclaredProperty
		public RuleCall getDeclaredPropertiesDeclaredPropertyParserRuleCall_5_0() { return cDeclaredPropertiesDeclaredPropertyParserRuleCall_5_0; }

		//root=Component
		public Assignment getRootAssignment_6() { return cRootAssignment_6; }

		//Component
		public RuleCall getRootComponentParserRuleCall_6_0() { return cRootComponentParserRuleCall_6_0; }
	}

	public class ReferrableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Referrable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDeclaredPropertyParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cComponentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Referrable:
		//  DeclaredProperty|Component;
		public ParserRule getRule() { return rule; }

		//DeclaredProperty|Component
		public Alternatives getAlternatives() { return cAlternatives; }

		//DeclaredProperty
		public RuleCall getDeclaredPropertyParserRuleCall_0() { return cDeclaredPropertyParserRuleCall_0; }

		//Component
		public RuleCall getComponentParserRuleCall_1() { return cComponentParserRuleCall_1; }
	}

	public class DeclaredPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DeclaredProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypeTypeCrossReference_1_0 = (CrossReference)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeTypeFQNParserRuleCall_1_0_1 = (RuleCall)cTypeTypeCrossReference_1_0.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameFQNParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDefaultAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDefaultValueParserRuleCall_3_1_0 = (RuleCall)cDefaultAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DeclaredProperty:
		//  "var" type=[types::Type|FQN]? name=FQN ("=" default=Value)? ";";
		public ParserRule getRule() { return rule; }

		//"var" type=[types::Type|FQN]? name=FQN ("=" default=Value)? ";"
		public Group getGroup() { return cGroup; }

		//"var"
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }

		//type=[types::Type|FQN]?
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//[types::Type|FQN]
		public CrossReference getTypeTypeCrossReference_1_0() { return cTypeTypeCrossReference_1_0; }

		//FQN
		public RuleCall getTypeTypeFQNParserRuleCall_1_0_1() { return cTypeTypeFQNParserRuleCall_1_0_1; }

		//name=FQN
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//FQN
		public RuleCall getNameFQNParserRuleCall_2_0() { return cNameFQNParserRuleCall_2_0; }

		//("=" default=Value)?
		public Group getGroup_3() { return cGroup_3; }

		//"="
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }

		//default=Value
		public Assignment getDefaultAssignment_3_1() { return cDefaultAssignment_3_1; }

		//Value
		public RuleCall getDefaultValueParserRuleCall_3_1_0() { return cDefaultValueParserRuleCall_3_1_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class ComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Component");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cComponentAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final CrossReference cTypeTypeCrossReference_1_0_0 = (CrossReference)cTypeAssignment_1_0.eContents().get(0);
		private final RuleCall cTypeTypeFQNParserRuleCall_1_0_0_1 = (RuleCall)cTypeTypeCrossReference_1_0_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cCommercialAtKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cModuleAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final CrossReference cModuleModuleCrossReference_1_1_1_0 = (CrossReference)cModuleAssignment_1_1_1.eContents().get(0);
		private final RuleCall cModuleModuleFQNParserRuleCall_1_1_1_0_1 = (RuleCall)cModuleModuleCrossReference_1_1_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cAsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNameFQNParserRuleCall_2_1_0 = (RuleCall)cNameAssignment_2_1.eContents().get(0);
		private final Assignment cAutoInjectAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cAutoInjectAutoInjectKeyword_3_0 = (Keyword)cAutoInjectAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cAssignmentAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cAssignmentAssignmentParserRuleCall_5_0 = (RuleCall)cAssignmentAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Component:
		//  {Component} (type=[types::Type|FQN]|"@" module=[Module|FQN])? ("as" name=FQN)?
		//  autoInject?="auto-inject"? "{" assignment+=Assignment* "}";
		public ParserRule getRule() { return rule; }

		//{Component} (type=[types::Type|FQN]|"@" module=[Module|FQN])? ("as" name=FQN)?
		//autoInject?="auto-inject"? "{" assignment+=Assignment* "}"
		public Group getGroup() { return cGroup; }

		//{Component}
		public Action getComponentAction_0() { return cComponentAction_0; }

		//(type=[types::Type|FQN]|"@" module=[Module|FQN])?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//type=[types::Type|FQN]
		public Assignment getTypeAssignment_1_0() { return cTypeAssignment_1_0; }

		//[types::Type|FQN]
		public CrossReference getTypeTypeCrossReference_1_0_0() { return cTypeTypeCrossReference_1_0_0; }

		//FQN
		public RuleCall getTypeTypeFQNParserRuleCall_1_0_0_1() { return cTypeTypeFQNParserRuleCall_1_0_0_1; }

		//"@" module=[Module|FQN]
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"@"
		public Keyword getCommercialAtKeyword_1_1_0() { return cCommercialAtKeyword_1_1_0; }

		//module=[Module|FQN]
		public Assignment getModuleAssignment_1_1_1() { return cModuleAssignment_1_1_1; }

		//[Module|FQN]
		public CrossReference getModuleModuleCrossReference_1_1_1_0() { return cModuleModuleCrossReference_1_1_1_0; }

		//FQN
		public RuleCall getModuleModuleFQNParserRuleCall_1_1_1_0_1() { return cModuleModuleFQNParserRuleCall_1_1_1_0_1; }

		//("as" name=FQN)?
		public Group getGroup_2() { return cGroup_2; }

		//"as"
		public Keyword getAsKeyword_2_0() { return cAsKeyword_2_0; }

		//name=FQN
		public Assignment getNameAssignment_2_1() { return cNameAssignment_2_1; }

		//FQN
		public RuleCall getNameFQNParserRuleCall_2_1_0() { return cNameFQNParserRuleCall_2_1_0; }

		//autoInject?="auto-inject"?
		public Assignment getAutoInjectAssignment_3() { return cAutoInjectAssignment_3; }

		//"auto-inject"
		public Keyword getAutoInjectAutoInjectKeyword_3_0() { return cAutoInjectAutoInjectKeyword_3_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//assignment+=Assignment*
		public Assignment getAssignmentAssignment_5() { return cAssignmentAssignment_5; }

		//Assignment
		public RuleCall getAssignmentAssignmentParserRuleCall_5_0() { return cAssignmentAssignmentParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceImportedFQNParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		
		//Import:
		//  "import" importedNamespace=ImportedFQN;
		public ParserRule getRule() { return rule; }

		//"import" importedNamespace=ImportedFQN
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importedNamespace=ImportedFQN
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }

		//ImportedFQN
		public RuleCall getImportedNamespaceImportedFQNParserRuleCall_1_0() { return cImportedNamespaceImportedFQNParserRuleCall_1_0; }
	}

	public class ImportedFQNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImportedFQN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFQNParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ImportedFQN returns ecore::EString:
		//  FQN ".*"?;
		public ParserRule getRule() { return rule; }

		//FQN ".*"?
		public Group getGroup() { return cGroup; }

		//FQN
		public RuleCall getFQNParserRuleCall_0() { return cFQNParserRuleCall_0; }

		//".*"?
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}

	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Assignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFeatureAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cFeatureOperationCrossReference_0_0 = (CrossReference)cFeatureAssignment_0.eContents().get(0);
		private final RuleCall cFeatureOperationIDTerminalRuleCall_0_0_1 = (RuleCall)cFeatureOperationCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Assignment:
		//  feature=[types::Operation] "=" value=Value ";";
		public ParserRule getRule() { return rule; }

		//feature=[types::Operation] "=" value=Value ";"
		public Group getGroup() { return cGroup; }

		//feature=[types::Operation]
		public Assignment getFeatureAssignment_0() { return cFeatureAssignment_0; }

		//[types::Operation]
		public CrossReference getFeatureOperationCrossReference_0_0() { return cFeatureOperationCrossReference_0_0; }

		//ID
		public RuleCall getFeatureOperationIDTerminalRuleCall_0_0_1() { return cFeatureOperationIDTerminalRuleCall_0_0_1; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=Value
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//Value
		public RuleCall getValueValueParserRuleCall_2_0() { return cValueValueParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cComponentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStringLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBooleanLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cReferenceParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Value:
		//  Component|StringLiteral|BooleanLiteral|Reference;
		public ParserRule getRule() { return rule; }

		//Component|StringLiteral|BooleanLiteral|Reference
		public Alternatives getAlternatives() { return cAlternatives; }

		//Component
		public RuleCall getComponentParserRuleCall_0() { return cComponentParserRuleCall_0; }

		//StringLiteral
		public RuleCall getStringLiteralParserRuleCall_1() { return cStringLiteralParserRuleCall_1; }

		//BooleanLiteral
		public RuleCall getBooleanLiteralParserRuleCall_2() { return cBooleanLiteralParserRuleCall_2; }

		//Reference
		public RuleCall getReferenceParserRuleCall_3() { return cReferenceParserRuleCall_3; }
	}

	public class StringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueMWEStringParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringLiteral:
		//  value=MWEString;
		public ParserRule getRule() { return rule; }

		//value=MWEString
		public Assignment getValueAssignment() { return cValueAssignment; }

		//MWEString
		public RuleCall getValueMWEStringParserRuleCall_0() { return cValueMWEStringParserRuleCall_0; }
	}

	public class BooleanLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBooleanLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cIsTrueAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cIsTrueTrueKeyword_1_0_0 = (Keyword)cIsTrueAssignment_1_0.eContents().get(0);
		private final Keyword cFalseKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//BooleanLiteral:
		//  {BooleanLiteral} (isTrue?="true"|"false");
		public ParserRule getRule() { return rule; }

		//{BooleanLiteral} (isTrue?="true"|"false")
		public Group getGroup() { return cGroup; }

		//{BooleanLiteral}
		public Action getBooleanLiteralAction_0() { return cBooleanLiteralAction_0; }

		//isTrue?="true"|"false"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//isTrue?="true"
		public Assignment getIsTrueAssignment_1_0() { return cIsTrueAssignment_1_0; }

		//"true"
		public Keyword getIsTrueTrueKeyword_1_0_0() { return cIsTrueTrueKeyword_1_0_0; }

		//"false"
		public Keyword getFalseKeyword_1_1() { return cFalseKeyword_1_1; }
	}

	public class ReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Reference");
		private final Assignment cReferableAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cReferableReferrableCrossReference_0 = (CrossReference)cReferableAssignment.eContents().get(0);
		private final RuleCall cReferableReferrableIDTerminalRuleCall_0_1 = (RuleCall)cReferableReferrableCrossReference_0.eContents().get(1);
		
		//Reference:
		//  referable=[Referrable];
		public ParserRule getRule() { return rule; }

		//referable=[Referrable]
		public Assignment getReferableAssignment() { return cReferableAssignment; }

		//[Referrable]
		public CrossReference getReferableReferrableCrossReference_0() { return cReferableReferrableCrossReference_0; }

		//ID
		public RuleCall getReferableReferrableIDTerminalRuleCall_0_1() { return cReferableReferrableIDTerminalRuleCall_0_1; }
	}

	public class FQNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FQN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//FQN returns ecore::EString:
		//  ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class MWEStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MWEString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cBeginAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cBeginSingleQuoteParserRuleCall_0_0_0 = (RuleCall)cBeginAssignment_0_0.eContents().get(0);
		private final Assignment cPartsAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cPartsMWEStringPartParserRuleCall_0_1_0 = (RuleCall)cPartsAssignment_0_1.eContents().get(0);
		private final Assignment cEndAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cEndSingleQuoteParserRuleCall_0_2_0 = (RuleCall)cEndAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cBeginAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cBeginDoubleQuoteParserRuleCall_1_0_0 = (RuleCall)cBeginAssignment_1_0.eContents().get(0);
		private final Assignment cPartsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPartsMWEStringPartParserRuleCall_1_1_0 = (RuleCall)cPartsAssignment_1_1.eContents().get(0);
		private final Assignment cEndAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cEndDoubleQuoteParserRuleCall_1_2_0 = (RuleCall)cEndAssignment_1_2.eContents().get(0);
		
		//MWEString hidden ( ):
		//  begin=SingleQuote parts+=MWEStringPart* end=SingleQuote|begin=DoubleQuote parts+=
		//  MWEStringPart* end=DoubleQuote;
		public ParserRule getRule() { return rule; }

		//begin=SingleQuote parts+=MWEStringPart* end=SingleQuote|begin=DoubleQuote parts+=
		//MWEStringPart* end=DoubleQuote
		public Alternatives getAlternatives() { return cAlternatives; }

		//begin=SingleQuote parts+=MWEStringPart* end=SingleQuote
		public Group getGroup_0() { return cGroup_0; }

		//begin=SingleQuote
		public Assignment getBeginAssignment_0_0() { return cBeginAssignment_0_0; }

		//SingleQuote
		public RuleCall getBeginSingleQuoteParserRuleCall_0_0_0() { return cBeginSingleQuoteParserRuleCall_0_0_0; }

		//parts+=MWEStringPart*
		public Assignment getPartsAssignment_0_1() { return cPartsAssignment_0_1; }

		//MWEStringPart
		public RuleCall getPartsMWEStringPartParserRuleCall_0_1_0() { return cPartsMWEStringPartParserRuleCall_0_1_0; }

		//end=SingleQuote
		public Assignment getEndAssignment_0_2() { return cEndAssignment_0_2; }

		//SingleQuote
		public RuleCall getEndSingleQuoteParserRuleCall_0_2_0() { return cEndSingleQuoteParserRuleCall_0_2_0; }

		//begin=DoubleQuote parts+=MWEStringPart* end=DoubleQuote
		public Group getGroup_1() { return cGroup_1; }

		//begin=DoubleQuote
		public Assignment getBeginAssignment_1_0() { return cBeginAssignment_1_0; }

		//DoubleQuote
		public RuleCall getBeginDoubleQuoteParserRuleCall_1_0_0() { return cBeginDoubleQuoteParserRuleCall_1_0_0; }

		//parts+=MWEStringPart*
		public Assignment getPartsAssignment_1_1() { return cPartsAssignment_1_1; }

		//MWEStringPart
		public RuleCall getPartsMWEStringPartParserRuleCall_1_1_0() { return cPartsMWEStringPartParserRuleCall_1_1_0; }

		//end=DoubleQuote
		public Assignment getEndAssignment_1_2() { return cEndAssignment_1_2; }

		//DoubleQuote
		public RuleCall getEndDoubleQuoteParserRuleCall_1_2_0() { return cEndDoubleQuoteParserRuleCall_1_2_0; }
	}

	public class MWEStringPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MWEStringPart");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cReplaceableStringParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPlainStringParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//MWEStringPart:
		//  ReplaceableString|PlainString;
		public ParserRule getRule() { return rule; }

		//ReplaceableString|PlainString
		public Alternatives getAlternatives() { return cAlternatives; }

		//ReplaceableString
		public RuleCall getReplaceableStringParserRuleCall_0() { return cReplaceableStringParserRuleCall_0; }

		//PlainString
		public RuleCall getPlainStringParserRuleCall_1() { return cPlainStringParserRuleCall_1; }
	}

	public class ReplaceableStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReplaceableString");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDollarSignLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPropertyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPropertyValueParserRuleCall_1_0 = (RuleCall)cPropertyAssignment_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ReplaceableString:
		//  "${" property=Value "}";
		public ParserRule getRule() { return rule; }

		//"${" property=Value "}"
		public Group getGroup() { return cGroup; }

		//"${"
		public Keyword getDollarSignLeftCurlyBracketKeyword_0() { return cDollarSignLeftCurlyBracketKeyword_0; }

		//property=Value
		public Assignment getPropertyAssignment_1() { return cPropertyAssignment_1; }

		//Value
		public RuleCall getPropertyValueParserRuleCall_1_0() { return cPropertyValueParserRuleCall_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}

	public class PlainStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PlainString");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueConstantValueParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//PlainString:
		//  value=ConstantValue;
		public ParserRule getRule() { return rule; }

		//value=ConstantValue
		public Assignment getValueAssignment() { return cValueAssignment; }

		//ConstantValue
		public RuleCall getValueConstantValueParserRuleCall_0() { return cValueConstantValueParserRuleCall_0; }
	}

	public class ConstantValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstantValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cCommercialAtKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final RuleCall cEscapedDoubleQuoteParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cEscapedSingleQuoteParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cANY_OTHERTerminalRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cEscapedBackslashParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cIDTerminalRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final Keyword cTrueKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cFalseKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cEqualsSignKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cImportKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Keyword cModuleKeyword_14 = (Keyword)cAlternatives.eContents().get(14);
		private final Keyword cAutoInjectKeyword_15 = (Keyword)cAlternatives.eContents().get(15);
		private final Keyword cVarKeyword_16 = (Keyword)cAlternatives.eContents().get(16);
		private final Keyword cAsKeyword_17 = (Keyword)cAlternatives.eContents().get(17);
		private final Keyword cSemicolonKeyword_18 = (Keyword)cAlternatives.eContents().get(18);
		private final Keyword cFullStopKeyword_19 = (Keyword)cAlternatives.eContents().get(19);
		
		//ConstantValue returns ecore::EString:
		//  WS|":"|"{"|"}"|"@"|EscapedDoubleQuote|EscapedSingleQuote|ANY_OTHER|
		//  EscapedBackslash|ID|"true"|"false"|"="|"import"|"module"|"auto-inject"|"var"|
		//  "as"|";"|".";
		public ParserRule getRule() { return rule; }

		//WS|":"|"{"|"}"|"@"|EscapedDoubleQuote|EscapedSingleQuote|ANY_OTHER|
		//EscapedBackslash|ID|"true"|"false"|"="|"import"|"module"|"auto-inject"|"var"|
		//"as"|";"|"."
		public Alternatives getAlternatives() { return cAlternatives; }

		//WS
		public RuleCall getWSTerminalRuleCall_0() { return cWSTerminalRuleCall_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }

		//"@"
		public Keyword getCommercialAtKeyword_4() { return cCommercialAtKeyword_4; }

		//EscapedDoubleQuote
		public RuleCall getEscapedDoubleQuoteParserRuleCall_5() { return cEscapedDoubleQuoteParserRuleCall_5; }

		//EscapedSingleQuote
		public RuleCall getEscapedSingleQuoteParserRuleCall_6() { return cEscapedSingleQuoteParserRuleCall_6; }

		//ANY_OTHER
		public RuleCall getANY_OTHERTerminalRuleCall_7() { return cANY_OTHERTerminalRuleCall_7; }

		//EscapedBackslash
		public RuleCall getEscapedBackslashParserRuleCall_8() { return cEscapedBackslashParserRuleCall_8; }

		//ID
		public RuleCall getIDTerminalRuleCall_9() { return cIDTerminalRuleCall_9; }

		//"true"
		public Keyword getTrueKeyword_10() { return cTrueKeyword_10; }

		//"false"
		public Keyword getFalseKeyword_11() { return cFalseKeyword_11; }

		//"="
		public Keyword getEqualsSignKeyword_12() { return cEqualsSignKeyword_12; }

		//"import"
		public Keyword getImportKeyword_13() { return cImportKeyword_13; }

		//"module"
		public Keyword getModuleKeyword_14() { return cModuleKeyword_14; }

		//"auto-inject"
		public Keyword getAutoInjectKeyword_15() { return cAutoInjectKeyword_15; }

		//"var"
		public Keyword getVarKeyword_16() { return cVarKeyword_16; }

		//"as"
		public Keyword getAsKeyword_17() { return cAsKeyword_17; }

		//";"
		public Keyword getSemicolonKeyword_18() { return cSemicolonKeyword_18; }

		//"."
		public Keyword getFullStopKeyword_19() { return cFullStopKeyword_19; }
	}

	public class SingleQuoteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SingleQuote");
		private final Keyword cApostropheKeyword = (Keyword)rule.eContents().get(1);
		
		//SingleQuote returns ecore::EString:
		//  "\'";
		public ParserRule getRule() { return rule; }

		//"\'"
		public Keyword getApostropheKeyword() { return cApostropheKeyword; }
	}

	public class EscapedSingleQuoteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EscapedSingleQuote");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBackslashParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cSingleQuoteParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EscapedSingleQuote returns ecore::EString hidden ( ):
		//  Backslash SingleQuote;
		public ParserRule getRule() { return rule; }

		//Backslash SingleQuote
		public Group getGroup() { return cGroup; }

		//Backslash
		public RuleCall getBackslashParserRuleCall_0() { return cBackslashParserRuleCall_0; }

		//SingleQuote
		public RuleCall getSingleQuoteParserRuleCall_1() { return cSingleQuoteParserRuleCall_1; }
	}

	public class DoubleQuoteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DoubleQuote");
		private final Keyword cQuotationMarkKeyword = (Keyword)rule.eContents().get(1);
		
		//DoubleQuote returns ecore::EString:
		//  "\"";
		public ParserRule getRule() { return rule; }

		//"\""
		public Keyword getQuotationMarkKeyword() { return cQuotationMarkKeyword; }
	}

	public class EscapedDoubleQuoteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EscapedDoubleQuote");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBackslashParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cDoubleQuoteParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EscapedDoubleQuote returns ecore::EString hidden ( ):
		//  Backslash DoubleQuote;
		public ParserRule getRule() { return rule; }

		//Backslash DoubleQuote
		public Group getGroup() { return cGroup; }

		//Backslash
		public RuleCall getBackslashParserRuleCall_0() { return cBackslashParserRuleCall_0; }

		//DoubleQuote
		public RuleCall getDoubleQuoteParserRuleCall_1() { return cDoubleQuoteParserRuleCall_1; }
	}

	public class BackslashElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Backslash");
		private final Keyword cReverseSolidusKeyword = (Keyword)rule.eContents().get(1);
		
		//Backslash returns ecore::EString:
		//  "\\";
		public ParserRule getRule() { return rule; }

		//"\\"
		public Keyword getReverseSolidusKeyword() { return cReverseSolidusKeyword; }
	}

	public class EscapedBackslashElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EscapedBackslash");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBackslashParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cBackslashParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EscapedBackslash returns ecore::EString hidden ( ):
		//  Backslash Backslash;
		public ParserRule getRule() { return rule; }

		//Backslash Backslash
		public Group getGroup() { return cGroup; }

		//Backslash
		public RuleCall getBackslashParserRuleCall_0() { return cBackslashParserRuleCall_0; }

		//Backslash
		public RuleCall getBackslashParserRuleCall_1() { return cBackslashParserRuleCall_1; }
	}
	
	
	private ModuleElements pModule;
	private ReferrableElements pReferrable;
	private DeclaredPropertyElements pDeclaredProperty;
	private ComponentElements pComponent;
	private ImportElements pImport;
	private ImportedFQNElements pImportedFQN;
	private AssignmentElements pAssignment;
	private ValueElements pValue;
	private StringLiteralElements pStringLiteral;
	private BooleanLiteralElements pBooleanLiteral;
	private ReferenceElements pReference;
	private FQNElements pFQN;
	private MWEStringElements pMWEString;
	private MWEStringPartElements pMWEStringPart;
	private ReplaceableStringElements pReplaceableString;
	private PlainStringElements pPlainString;
	private ConstantValueElements pConstantValue;
	private SingleQuoteElements pSingleQuote;
	private EscapedSingleQuoteElements pEscapedSingleQuote;
	private DoubleQuoteElements pDoubleQuote;
	private EscapedDoubleQuoteElements pEscapedDoubleQuote;
	private BackslashElements pBackslash;
	private EscapedBackslashElements pEscapedBackslash;
	private TerminalRule tID;
	private TerminalRule tML_COMMENT;
	private TerminalRule tSL_COMMENT;
	private TerminalRule tWS;
	private TerminalRule tANY_OTHER;
	
	private final GrammarProvider grammarProvider;

	@Inject
	public Mwe2GrammarAccess(GrammarProvider grammarProvider) {
		this.grammarProvider = grammarProvider;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	
	//Module:
	//  {Module} "module" canonicalName=FQN ";" imports+=Import* declaredProperties+=
	//  DeclaredProperty* root=Component;
	public ModuleElements getModuleAccess() {
		return (pModule != null) ? pModule : (pModule = new ModuleElements());
	}
	
	public ParserRule getModuleRule() {
		return getModuleAccess().getRule();
	}

	//Referrable:
	//  DeclaredProperty|Component;
	public ReferrableElements getReferrableAccess() {
		return (pReferrable != null) ? pReferrable : (pReferrable = new ReferrableElements());
	}
	
	public ParserRule getReferrableRule() {
		return getReferrableAccess().getRule();
	}

	//DeclaredProperty:
	//  "var" type=[types::Type|FQN]? name=FQN ("=" default=Value)? ";";
	public DeclaredPropertyElements getDeclaredPropertyAccess() {
		return (pDeclaredProperty != null) ? pDeclaredProperty : (pDeclaredProperty = new DeclaredPropertyElements());
	}
	
	public ParserRule getDeclaredPropertyRule() {
		return getDeclaredPropertyAccess().getRule();
	}

	//Component:
	//  {Component} (type=[types::Type|FQN]|"@" module=[Module|FQN])? ("as" name=FQN)?
	//  autoInject?="auto-inject"? "{" assignment+=Assignment* "}";
	public ComponentElements getComponentAccess() {
		return (pComponent != null) ? pComponent : (pComponent = new ComponentElements());
	}
	
	public ParserRule getComponentRule() {
		return getComponentAccess().getRule();
	}

	//Import:
	//  "import" importedNamespace=ImportedFQN;
	public ImportElements getImportAccess() {
		return (pImport != null) ? pImport : (pImport = new ImportElements());
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//ImportedFQN returns ecore::EString:
	//  FQN ".*"?;
	public ImportedFQNElements getImportedFQNAccess() {
		return (pImportedFQN != null) ? pImportedFQN : (pImportedFQN = new ImportedFQNElements());
	}
	
	public ParserRule getImportedFQNRule() {
		return getImportedFQNAccess().getRule();
	}

	//Assignment:
	//  feature=[types::Operation] "=" value=Value ";";
	public AssignmentElements getAssignmentAccess() {
		return (pAssignment != null) ? pAssignment : (pAssignment = new AssignmentElements());
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}

	//Value:
	//  Component|StringLiteral|BooleanLiteral|Reference;
	public ValueElements getValueAccess() {
		return (pValue != null) ? pValue : (pValue = new ValueElements());
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}

	//StringLiteral:
	//  value=MWEString;
	public StringLiteralElements getStringLiteralAccess() {
		return (pStringLiteral != null) ? pStringLiteral : (pStringLiteral = new StringLiteralElements());
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}

	//BooleanLiteral:
	//  {BooleanLiteral} (isTrue?="true"|"false");
	public BooleanLiteralElements getBooleanLiteralAccess() {
		return (pBooleanLiteral != null) ? pBooleanLiteral : (pBooleanLiteral = new BooleanLiteralElements());
	}
	
	public ParserRule getBooleanLiteralRule() {
		return getBooleanLiteralAccess().getRule();
	}

	//Reference:
	//  referable=[Referrable];
	public ReferenceElements getReferenceAccess() {
		return (pReference != null) ? pReference : (pReference = new ReferenceElements());
	}
	
	public ParserRule getReferenceRule() {
		return getReferenceAccess().getRule();
	}

	//FQN returns ecore::EString:
	//  ID ("." ID)*;
	public FQNElements getFQNAccess() {
		return (pFQN != null) ? pFQN : (pFQN = new FQNElements());
	}
	
	public ParserRule getFQNRule() {
		return getFQNAccess().getRule();
	}

	//MWEString hidden ( ):
	//  begin=SingleQuote parts+=MWEStringPart* end=SingleQuote|begin=DoubleQuote parts+=
	//  MWEStringPart* end=DoubleQuote;
	public MWEStringElements getMWEStringAccess() {
		return (pMWEString != null) ? pMWEString : (pMWEString = new MWEStringElements());
	}
	
	public ParserRule getMWEStringRule() {
		return getMWEStringAccess().getRule();
	}

	//MWEStringPart:
	//  ReplaceableString|PlainString;
	public MWEStringPartElements getMWEStringPartAccess() {
		return (pMWEStringPart != null) ? pMWEStringPart : (pMWEStringPart = new MWEStringPartElements());
	}
	
	public ParserRule getMWEStringPartRule() {
		return getMWEStringPartAccess().getRule();
	}

	//ReplaceableString:
	//  "${" property=Value "}";
	public ReplaceableStringElements getReplaceableStringAccess() {
		return (pReplaceableString != null) ? pReplaceableString : (pReplaceableString = new ReplaceableStringElements());
	}
	
	public ParserRule getReplaceableStringRule() {
		return getReplaceableStringAccess().getRule();
	}

	//PlainString:
	//  value=ConstantValue;
	public PlainStringElements getPlainStringAccess() {
		return (pPlainString != null) ? pPlainString : (pPlainString = new PlainStringElements());
	}
	
	public ParserRule getPlainStringRule() {
		return getPlainStringAccess().getRule();
	}

	//ConstantValue returns ecore::EString:
	//  WS|":"|"{"|"}"|"@"|EscapedDoubleQuote|EscapedSingleQuote|ANY_OTHER|
	//  EscapedBackslash|ID|"true"|"false"|"="|"import"|"module"|"auto-inject"|"var"|
	//  "as"|";"|".";
	public ConstantValueElements getConstantValueAccess() {
		return (pConstantValue != null) ? pConstantValue : (pConstantValue = new ConstantValueElements());
	}
	
	public ParserRule getConstantValueRule() {
		return getConstantValueAccess().getRule();
	}

	//SingleQuote returns ecore::EString:
	//  "\'";
	public SingleQuoteElements getSingleQuoteAccess() {
		return (pSingleQuote != null) ? pSingleQuote : (pSingleQuote = new SingleQuoteElements());
	}
	
	public ParserRule getSingleQuoteRule() {
		return getSingleQuoteAccess().getRule();
	}

	//EscapedSingleQuote returns ecore::EString hidden ( ):
	//  Backslash SingleQuote;
	public EscapedSingleQuoteElements getEscapedSingleQuoteAccess() {
		return (pEscapedSingleQuote != null) ? pEscapedSingleQuote : (pEscapedSingleQuote = new EscapedSingleQuoteElements());
	}
	
	public ParserRule getEscapedSingleQuoteRule() {
		return getEscapedSingleQuoteAccess().getRule();
	}

	//DoubleQuote returns ecore::EString:
	//  "\"";
	public DoubleQuoteElements getDoubleQuoteAccess() {
		return (pDoubleQuote != null) ? pDoubleQuote : (pDoubleQuote = new DoubleQuoteElements());
	}
	
	public ParserRule getDoubleQuoteRule() {
		return getDoubleQuoteAccess().getRule();
	}

	//EscapedDoubleQuote returns ecore::EString hidden ( ):
	//  Backslash DoubleQuote;
	public EscapedDoubleQuoteElements getEscapedDoubleQuoteAccess() {
		return (pEscapedDoubleQuote != null) ? pEscapedDoubleQuote : (pEscapedDoubleQuote = new EscapedDoubleQuoteElements());
	}
	
	public ParserRule getEscapedDoubleQuoteRule() {
		return getEscapedDoubleQuoteAccess().getRule();
	}

	//Backslash returns ecore::EString:
	//  "\\";
	public BackslashElements getBackslashAccess() {
		return (pBackslash != null) ? pBackslash : (pBackslash = new BackslashElements());
	}
	
	public ParserRule getBackslashRule() {
		return getBackslashAccess().getRule();
	}

	//EscapedBackslash returns ecore::EString hidden ( ):
	//  Backslash Backslash;
	public EscapedBackslashElements getEscapedBackslashAccess() {
		return (pEscapedBackslash != null) ? pEscapedBackslash : (pEscapedBackslash = new EscapedBackslashElements());
	}
	
	public ParserRule getEscapedBackslashRule() {
		return getEscapedBackslashAccess().getRule();
	}

	//terminal ID:
	//  "^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//terminal ML_COMMENT:
	//  "/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return (tML_COMMENT != null) ? tML_COMMENT : (tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT"));
	} 

	//terminal SL_COMMENT:
	//  "//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	//terminal WS:
	//  (" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 

	//terminal ANY_OTHER:
	//  .;
	public TerminalRule getANY_OTHERRule() {
		return (tANY_OTHER != null) ? tANY_OTHER : (tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ANY_OTHER"));
	} 
}
