/*
 * generated by Xtext
 */
package org.eclipse.emf.mwe.concept;

import org.eclipse.emf.mwe.concept.highlighting.SemanticHighlightingCalculator;
import org.eclipse.emf.mwe.concept.highlighting.MweHighlightingConfiguration;
import org.eclipse.emf.mwe.concept.highlighting.TokenDefProvider;
import org.eclipse.emf.mwe.concept.highlighting.TokenToAttributeMapper;
import org.eclipse.emf.mwe.concept.scoping.NamespaceAwareScopeProvider;
import org.eclipse.xtext.ui.common.editor.syntaxcoloring.antlr.AbstractAntlrTokenToAttributeIdMapper;

import com.google.inject.Binder;

/**
 * Use this class to register components to be used within the IDE.
 */
public class MWEConceptUiModule extends org.eclipse.emf.mwe.concept.AbstractMWEConceptUiModule {
	@Override
	public void configureHighlightingTokenDefProvider(Binder binder) {
		binder.bind(org.eclipse.xtext.parser.antlr.ITokenDefProvider.class).annotatedWith(com.google.inject.name.Names.named(org.eclipse.xtext.ui.core.LexerUIBindings.HIGHLIGHTING)).to(TokenDefProvider.class);
	}
	
	public Class<? extends AbstractAntlrTokenToAttributeIdMapper> bindAbstractAntlrTokenToAttributeIdMapper() {
		return TokenToAttributeMapper.class;
	}
	
	public Class<? extends org.eclipse.xtext.ui.common.editor.syntaxcoloring.ISemanticHighlightingCalculator> bindISemanticHighlightingCalculator() {
		return SemanticHighlightingCalculator.class;
	}
	
	
	public Class<? extends org.eclipse.xtext.ui.common.editor.syntaxcoloring.IHighlightingConfiguration> bindIHighlightingConfiguration() {
		return MweHighlightingConfiguration.class;
	}
	
	// contributed by org.eclipse.xtext.ui.generator.scoping.QualifiedNameBasedScopingFragment
	public void configureIScopeProviderDelegate(com.google.inject.Binder binder) {
//		binder.bind(IScopeProvider.class).annotatedWith(com.google.inject.name.Names.named("org.eclipse.xtext.scoping.IScopeProvider.delegate")).to(NamespaceAwareScopeProvider.class);
		binder.bind(org.eclipse.xtext.scoping.IScopeProvider.class).annotatedWith(com.google.inject.name.Names.named("org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider.delegate")).to(NamespaceAwareScopeProvider.class);
	}
	
	
	
	
}
