/*
* generated by Xtext
*/
package org.eclipse.emf.mwe.concept.contentassist;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.mwe.concept.mweConcept.Component;
import org.eclipse.emf.mwe.concept.mweConcept.MWEFile;
import org.eclipse.emf.mwe.concept.mweConcept.Setting;
import org.eclipse.emf.mwe.concept.scoping.MWEConceptScopeProvider;
import org.eclipse.emf.mwe.properties.mweProperties.PropertyEntry;
import org.eclipse.jface.text.contentassist.ICompletionProposal;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.common.types.FormalParameter;
import org.eclipse.xtext.common.types.Operation;
import org.eclipse.xtext.common.types.Type;
import org.eclipse.xtext.common.types.xtext.ui.TypeMatchFilters;
import org.eclipse.xtext.resource.IEObjectDescription;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.ui.core.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.core.editor.contentassist.ICompletionProposalAcceptor;

import com.google.common.base.Function;
import com.google.inject.Inject;
/**
 * see http://www.eclipse.org/Xtext/documentation/latest/xtext.html#contentAssist on how to customize content assistant
 */
public class MWEConceptProposalProvider extends AbstractMWEConceptProposalProvider {
	@Inject
	private NamespaceAwareTypesProposalProvider typeProposalProvider;
	
	@Override
	public MWEConceptScopeProvider getScopeProvider() {
		return (MWEConceptScopeProvider) super.getScopeProvider();
	}
	
	public void completeSetting_Feature(EObject model, Assignment assignment,
			ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		if (model instanceof Setting && model.eContainer() instanceof Component) {
			createFeatureProposals((Component) model.eContainer(), context, acceptor);
		} else if (model instanceof Component) {
			createFeatureProposals((Component) model, context, acceptor);
		}
	}

	private void createFeatureProposals(Component component,
			ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		Type type = component.getType();
		if (type == null) {
			if (component.eContainer() instanceof Setting) {
				Setting setting = (Setting) component.eContainer();
				if (setting != null) {
					Operation containerFeature = setting.getFeature();
					if (containerFeature != null) {
						FormalParameter parameter = containerFeature.getParameters().get(0);
						type = parameter.getParameterType();
					}
				}
			}
		}
		IScope scope = getScopeProvider().createOperationScope(type, IScope.NULLSCOPE);
		Iterable<IEObjectDescription> candidates = scope.getAllContents();
		Function<IEObjectDescription, ICompletionProposal> factory = getProposalFactory("ID", context);
		for (IEObjectDescription candidate: candidates) {
			if (!acceptor.canAcceptMoreProposals())
				return;
			acceptor.accept(factory.apply(candidate));
		}
	}
	
	@Override
	public void completeComponent_Type(EObject model, Assignment assignment,
			final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
		if (model instanceof Component)
			model = model.eContainer();
		if (model instanceof MWEFile) {
			typeProposalProvider.createTypeProposals(this, context, TypeMatchFilters.canInstantiate(), acceptor);	
		} else if (model instanceof Setting) {
			Setting attribute = (Setting) model;
			if (attribute.getFeature() == null || attribute.getFeature().eIsProxy())
				return;
			Type parameterType = attribute.getFeature().getParameters().get(0).getParameterType();
			typeProposalProvider.createSubTypeProposals(parameterType, this, context, TypeMatchFilters.canInstantiate(), acceptor);
		}
	}
	
	@Override
	protected String getDisplayString(EObject element, String qualifiedName,
			String shortName) {
		if (element instanceof PropertyEntry) {
			return qualifiedName;
		}
		return super.getDisplayString(element, qualifiedName, shortName);
	}
}
