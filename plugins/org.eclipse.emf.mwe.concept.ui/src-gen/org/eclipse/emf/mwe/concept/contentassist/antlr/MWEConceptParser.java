/*
* generated by Xtext
*/
package org.eclipse.emf.mwe.concept.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.common.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.common.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.common.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.eclipse.emf.mwe.concept.services.MWEConceptGrammarAccess;

public class MWEConceptParser extends AbstractContentAssistParser {
	
	@Inject
	private MWEConceptGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.eclipse.emf.mwe.concept.contentassist.antlr.internal.InternalMWEConceptParser createParser() {
		org.eclipse.emf.mwe.concept.contentassist.antlr.internal.InternalMWEConceptParser result = new org.eclipse.emf.mwe.concept.contentassist.antlr.internal.InternalMWEConceptParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getSettingAccess().getAlternatives_1(), "rule__Setting__Alternatives_1");
					put(grammarAccess.getComponentAccess().getAlternatives_1(), "rule__Component__Alternatives_1");
					put(grammarAccess.getComponentAccess().getAlternatives_3(), "rule__Component__Alternatives_3");
					put(grammarAccess.getComponentWithTypeAccess().getAlternatives_2(), "rule__ComponentWithType__Alternatives_2");
					put(grammarAccess.getConfigurationElementAccess().getAlternatives(), "rule__ConfigurationElement__Alternatives");
					put(grammarAccess.getLiteralAccess().getAlternatives(), "rule__Literal__Alternatives");
					put(grammarAccess.getAttributeListAccess().getAlternatives(), "rule__AttributeList__Alternatives");
					put(grammarAccess.getPropertyAccess().getAlternatives(), "rule__Property__Alternatives");
					put(grammarAccess.getAttributeAccess().getAlternatives(), "rule__Attribute__Alternatives");
					put(grammarAccess.getValidIDAccess().getAlternatives(), "rule__ValidID__Alternatives");
					put(grammarAccess.getMWEStringAccess().getAlternatives(), "rule__MWEString__Alternatives");
					put(grammarAccess.getMWEStringPartAccess().getAlternatives(), "rule__MWEStringPart__Alternatives");
					put(grammarAccess.getBooleanAccess().getValueAlternatives_1_0(), "rule__Boolean__ValueAlternatives_1_0");
					put(grammarAccess.getConstantValueAccess().getAlternatives(), "rule__ConstantValue__Alternatives");
					put(grammarAccess.getMWEFileAccess().getGroup(), "rule__MWEFile__Group__0");
					put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
					put(grammarAccess.getImportedFQNAccess().getGroup(), "rule__ImportedFQN__Group__0");
					put(grammarAccess.getSettingAccess().getGroup(), "rule__Setting__Group__0");
					put(grammarAccess.getSettingAccess().getGroup_1_0(), "rule__Setting__Group_1_0__0");
					put(grammarAccess.getComponentAccess().getGroup(), "rule__Component__Group__0");
					put(grammarAccess.getComponentAccess().getGroup_2(), "rule__Component__Group_2__0");
					put(grammarAccess.getComponentAccess().getGroup_3_1(), "rule__Component__Group_3_1__0");
					put(grammarAccess.getComponentWithTypeAccess().getGroup(), "rule__ComponentWithType__Group__0");
					put(grammarAccess.getComponentWithTypeAccess().getGroup_1(), "rule__ComponentWithType__Group_1__0");
					put(grammarAccess.getComponentWithTypeAccess().getGroup_2_1(), "rule__ComponentWithType__Group_2_1__0");
					put(grammarAccess.getAttributeListAccess().getGroup_0(), "rule__AttributeList__Group_0__0");
					put(grammarAccess.getAttributeListAccess().getGroup_0_1(), "rule__AttributeList__Group_0_1__0");
					put(grammarAccess.getAttributeListAccess().getGroup_0_1_1(), "rule__AttributeList__Group_0_1_1__0");
					put(grammarAccess.getAttributeListAccess().getGroup_1(), "rule__AttributeList__Group_1__0");
					put(grammarAccess.getAttributeListAccess().getGroup_1_1(), "rule__AttributeList__Group_1_1__0");
					put(grammarAccess.getAttributeListAccess().getGroup_1_1_1(), "rule__AttributeList__Group_1_1_1__0");
					put(grammarAccess.getSimplePropertyAccess().getGroup(), "rule__SimpleProperty__Group__0");
					put(grammarAccess.getPropertyFileAccess().getGroup(), "rule__PropertyFile__Group__0");
					put(grammarAccess.getFQNAccess().getGroup(), "rule__FQN__Group__0");
					put(grammarAccess.getFQNAccess().getGroup_1(), "rule__FQN__Group_1__0");
					put(grammarAccess.getMWEStringAccess().getGroup_1(), "rule__MWEString__Group_1__0");
					put(grammarAccess.getMWEStringAccess().getGroup_2(), "rule__MWEString__Group_2__0");
					put(grammarAccess.getBooleanAccess().getGroup(), "rule__Boolean__Group__0");
					put(grammarAccess.getReplaceableStringAccess().getGroup(), "rule__ReplaceableString__Group__0");
					put(grammarAccess.getFileRefAccess().getGroup(), "rule__FileRef__Group__0");
					put(grammarAccess.getEscapedSingleQuoteAccess().getGroup(), "rule__EscapedSingleQuote__Group__0");
					put(grammarAccess.getEscapedDoubleQuoteAccess().getGroup(), "rule__EscapedDoubleQuote__Group__0");
					put(grammarAccess.getEscapedBackslashAccess().getGroup(), "rule__EscapedBackslash__Group__0");
					put(grammarAccess.getMWEFileAccess().getImportsAssignment_1(), "rule__MWEFile__ImportsAssignment_1");
					put(grammarAccess.getMWEFileAccess().getRootAssignment_2(), "rule__MWEFile__RootAssignment_2");
					put(grammarAccess.getImportAccess().getImportedNamespaceAssignment_1(), "rule__Import__ImportedNamespaceAssignment_1");
					put(grammarAccess.getSettingAccess().getFeatureAssignment_0(), "rule__Setting__FeatureAssignment_0");
					put(grammarAccess.getSettingAccess().getValueAssignment_1_0_1(), "rule__Setting__ValueAssignment_1_0_1");
					put(grammarAccess.getSettingAccess().getValueAssignment_1_1(), "rule__Setting__ValueAssignment_1_1");
					put(grammarAccess.getComponentAccess().getTypeAssignment_1_0(), "rule__Component__TypeAssignment_1_0");
					put(grammarAccess.getComponentAccess().getFileRefAssignment_1_1(), "rule__Component__FileRefAssignment_1_1");
					put(grammarAccess.getComponentAccess().getNameAssignment_2_1(), "rule__Component__NameAssignment_2_1");
					put(grammarAccess.getComponentAccess().getElementsAssignment_3_1_1(), "rule__Component__ElementsAssignment_3_1_1");
					put(grammarAccess.getComponentWithTypeAccess().getTypeAssignment_0(), "rule__ComponentWithType__TypeAssignment_0");
					put(grammarAccess.getComponentWithTypeAccess().getNameAssignment_1_1(), "rule__ComponentWithType__NameAssignment_1_1");
					put(grammarAccess.getComponentWithTypeAccess().getElementsAssignment_2_1_1(), "rule__ComponentWithType__ElementsAssignment_2_1_1");
					put(grammarAccess.getAttributeListAccess().getContentAssignment_0_1_1_1(), "rule__AttributeList__ContentAssignment_0_1_1_1");
					put(grammarAccess.getAttributeListAccess().getContentAssignment_1_1_1_1(), "rule__AttributeList__ContentAssignment_1_1_1_1");
					put(grammarAccess.getSimplePropertyAccess().getNameAssignment_1(), "rule__SimpleProperty__NameAssignment_1");
					put(grammarAccess.getSimplePropertyAccess().getDelimiterAssignment_2(), "rule__SimpleProperty__DelimiterAssignment_2");
					put(grammarAccess.getSimplePropertyAccess().getValueAssignment_3(), "rule__SimpleProperty__ValueAssignment_3");
					put(grammarAccess.getPropertyFileAccess().getFileRefAssignment_1(), "rule__PropertyFile__FileRefAssignment_1");
					put(grammarAccess.getSimpleAttributeAccess().getValueAssignment(), "rule__SimpleAttribute__ValueAssignment");
					put(grammarAccess.getReferenceAccess().getComponentAssignment(), "rule__Reference__ComponentAssignment");
					put(grammarAccess.getMWEStringAccess().getPartsAssignment_0(), "rule__MWEString__PartsAssignment_0");
					put(grammarAccess.getMWEStringAccess().getBeginAssignment_1_0(), "rule__MWEString__BeginAssignment_1_0");
					put(grammarAccess.getMWEStringAccess().getPartsAssignment_1_1(), "rule__MWEString__PartsAssignment_1_1");
					put(grammarAccess.getMWEStringAccess().getEndAssignment_1_2(), "rule__MWEString__EndAssignment_1_2");
					put(grammarAccess.getMWEStringAccess().getBeginAssignment_2_0(), "rule__MWEString__BeginAssignment_2_0");
					put(grammarAccess.getMWEStringAccess().getPartsAssignment_2_1(), "rule__MWEString__PartsAssignment_2_1");
					put(grammarAccess.getMWEStringAccess().getEndAssignment_2_2(), "rule__MWEString__EndAssignment_2_2");
					put(grammarAccess.getBooleanAccess().getValueAssignment_1(), "rule__Boolean__ValueAssignment_1");
					put(grammarAccess.getReplaceableStringAccess().getPropertyAssignment_1(), "rule__ReplaceableString__PropertyAssignment_1");
					put(grammarAccess.getPropertyReferenceAccess().getPropertyAssignment(), "rule__PropertyReference__PropertyAssignment");
					put(grammarAccess.getPlainStringAccess().getValueAssignment(), "rule__PlainString__ValueAssignment");
					put(grammarAccess.getFileRefAccess().getFilePathAssignment_1(), "rule__FileRef__FilePathAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.eclipse.emf.mwe.concept.contentassist.antlr.internal.InternalMWEConceptParser typedParser = (org.eclipse.emf.mwe.concept.contentassist.antlr.internal.InternalMWEConceptParser) parser;
			typedParser.entryRuleMWEFile();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public MWEConceptGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(MWEConceptGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
